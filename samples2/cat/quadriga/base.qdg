@quadriga cat.quadriga.base

@java cat.quadriga.java.base.BaseMaterial

@component Transform {
  Vector3f position  = new Vector3f();
  float scale        = 1.0f;
  Quat4f rotation    = new Quat4f(0.0f,0.0f,0.0f,1.0f);
}

@event Exit {}


@component Materials {
  BaseMaterial[] materials = {};
}

@component StaticMeshRenderer {
  * Transform
  String mesh;
}

@component SphereRenderer {
  * Transform
  float radi = 1.0f;
}

@component BoxRenderer {
  * Transform
}

@component CilynderRenderer {
  * Transform
  float radi = 1.0f;
  Vector3f pos1 = new Vector3f(0.0f,0.0f,0.0f);
  Vector3f pos2 = new Vector3f(0.0f,0.0f,1.0f);
}

@component TexturedQuad {
  String   texture  = "";
  Vector3f position = new Vector3f();
}

@component FontQuad {
  String text       = "";
  Vector3f position = new Vector3f();
  Vector4f color    = new Vector4f();
}

@component BillboardRenderer {
  * Transform
}

@prototype TexturedQuadPrototype {
  Transform()
  TexturedQuad()
}

@prototype FontQuadPrototype {
  Transform()
  FontQuad()
}


// ------------------------------------------------------------------------------------
@component CameraComponent

@component SceneComponent {
  Entity<CameraComponent> camera;
}

@component CameraComponent {
  Vector3f position = new Vector3f(0.0f,0.0f,0.0f);
  Vector3f lookAt   = new Vector3f(0.0f,0.0f,1.0f);
  Vector3f up       = new Vector3f(0.0f,1.0f,0.0f);
}

@prototype SimpleCamera {
  CameraComponent()
}

@java cat.quadriga.render.simple.RenderManager
@java cat.quadriga.render.simple.Node

@system SimpleNodeSystem {
  @components {
    Transform
  }
  
  @update(Entity<Transform> entity: ENTITY) {
    RenderManager rm = RenderManager.instance;
    Node node = rm.getNode(entity.getGUID());
    
    node.setTranslation( entity[Transform].position );
    node.setRotation( entity[Transform].rotation );
    node.setScale( entity[Transform].scale );
  }
  
  @newEntity(Entity<Transform> entity: ENTITY) {
    RenderManager rm = RenderManager.instance;
    Node node = rm.getNode(entity.getGUID());
    Entity parent = entity.getParent();
    if(parent != null) {
      rm.setParent(entity.getGUID(), parent.getGUID());
    }
    node.setTranslation( entity[Transform].position );
    node.setRotation( entity[Transform].rotation );
    node.setScale( entity[Transform].scale );
  }
}

@system SimpleCameraSystem {
  @components {
    CameraComponent
  }
  
  @update(Entity<CameraComponent> entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
                      
    rm.setPerspective(45.f, 1.f, 99.f);
    
    rm.setCamera(entity[CameraComponent].position, entity[CameraComponent].lookAt, entity[CameraComponent].up);
  }
}

@system SimpleSphereRenderer {
  @components {
    SphereRenderer
  }
  
  @newEntity(Entity<SphereRenderer> entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
    rm.setSphere(entity.getGUID(), entity[SphereRenderer].radi);
  }
  
  @update(Entity<SphereRenderer> entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
    rm.changeSphere(entity.getGUID(), entity[SphereRenderer].radi);
  }
  
  @eraseEntity(Entity<SphereRenderer> entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
    rm.deleteSphere(entity.getGUID());
  }
}

@system SimpleBoxRenderer {
  @components {
    BoxRenderer
  }
  
  @newEntity(Entity entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
    rm.setBox(entity.getGUID());
  }
  
  @eraseEntity(Entity  entity : ENTITY) {
    RenderManager rm = RenderManager.instance;
    rm.deleteBox(entity.getGUID());
  }
}

/*
@system SimpleStaticMeshRenderer {
  @components {
    Transform
    StaticMeshRenderer
  }
  
  @update(Entity<Transform, StaticMeshRenderer> entity : ENTITY) {
    //entity[Transform].position = new Vector3f(1.0f,1.0f,entity[Transform].scale*15);
    System.out.println(entity.toString());
  }
}
*/

@component RendererComponent {}

@prototype RendererPrototype {
  RendererComponent()
}

@system EndRender {
  @components {
    RendererComponent
  }
  
  @update() {
    RenderManager.initRender();
    
    
    RenderManager.instance.renderGraph();
  
    //RenderManager.instance.drawAxis(null);
  
    RenderManager.switchBuffers();
    if(RenderManager.isCloseRequested()) {
      @event Exit();
    }
  }
}

@thread SimpleRenderThread {

  @system SimpleCameraSystem
  @system SimpleNodeSystem
  @system SimpleSphereRenderer
  @system SimpleBoxRenderer
  
  @system EndRender
  
  @init {
    RenderManager.initGL(800,600);
    //Keyboard.create();
    //RenderManager rm = RenderManager.instance;
    
    Entity renderer = @newEntity("qdg_renderer",null);
    @prototype renderer : RendererPrototype();
  }
  
  @cleanUp {
    //Keyboard.destroy();
    RenderManager.close();
  }
}