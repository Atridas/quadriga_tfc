enum DetectorKind {
  PLANET, LONG_SHIP, SHORT_SHIP
}

////-----------------------------------------------------------------

@component EsNau {
  shipLongDetector: entity<JBulletCollidable>
  shipShortDetector: entity<JBulletCollidable>
  planetDetector: entity<JBulletCollidable>
  exercit: entity<EsExercit>
}

@component EsShipDetector {
  ship: entity<EsNau>
  kind: DetectorKind
}

@component EsBandol {
  ships: Map<TipusDeNau, Entity>
}

@component PlanetTo: Entity<EsPlaneta>

@component MaxNaus: Map<TipusDeNau, Integer>

@prototype Bandol(colorHue : float) {
  Hue( colorHue )
  MaxNaus()
  EsBandol()
  EdificiEnConstruccio(null)
}

@prototype Nau(tipus:TipusDeNau, planeta: Entity<Position, Radi, EsPlaneta>, bandol: Entity<Hue>) {
  Tipus(tipus)
  
  Transform( position = Utils.moveToRandom(planeta[Position],planeta[Radi]*3) )
  
  Geometry( model = tipus.model, 
            parent = Entity.getFromName(ROOT_NODE), //si es queda a null, ho faria automàticament
            translation = Position )
            
  Material( name = "Assets/Nau.material",
            colors["Ambient"] = Utils.colorHSV(bandol[Hue].hue, tipus.saturation, tipus.value))
            
  EsNau(
        shipLongDetector  = new ShipDetector(5.0f, this, DetectorKind.LONG_SHIP)
        shipShortDetector = new ShipDetector(2.5f, this, DetectorKind.LONG_SHIP)
        planetDetector    = new ShipDetector(Utils.getMaxPlanetRadi() * 5.f, this, DetectorKind.LONG_SHIP)
       )
  
  Bandol(bandol)
  
  PlantetTo(planeta)
  
  SteeringBehavior(
                    maxSpeed = 1.0f,
                    maxRotation = 2.0f * Math.PI,
                    maxAcceleration = 1.0f
                  )
             
  Orbit(
          objective = planeta,
          distance = planeta[EsPlaneta].radi * 3.0f;
        )
        
  MultipleSeek()
  MultipleFlee()
        
  JBulletCollidable(shape = new ShapeParams(ShapeParams.Shape.SPHERE, null, 1.0f))
}

@prototype ShipDetector(float radi, entity<EsNau> nau, DetectorKind kind) {
  EsShipDetector( 
                  ship = nau
                  kind = kind
                )
  JBulletCollidable(
                    shape = new ShapeParams(ShapeParams.Shape.SPHERE, null, radi)
                   )
}

@system NauSystem {
  @components {
    EsNau,
    Tipus,
    Bandol,
    PlanetTo
  }
  
  @newEntity() {
    
    Entity<Hue> bandol = entity[Bandol];
    TipusDeNau tipus = entity[Tipus];
    
    bandol[EsBandol][tipus].add( entity );
  }
  
  @eraseEntity() {
    Entity<Hue> bandol = entity[Bandol];
    TipusDeNau tipus = entity[Tipus];
    
    bandol[EsBandol][tipus].remove( entity );
  }
}

@system DetectorsSystem {
  
  @event JBulletCollision(JBulletCollision event: Incoming Event) {
    if(!event.entityA.contains(EsShipDetector) && !event.entityB.contains(EsShipDetector)) {
      throw event; //we do not handle this event
    }
    
    Entity detector;
    Entity otherObject;
    
    if(event.entityA.contains(EsShipDetector)) {
      detector    = event.entityA;
      otherObject = event.entityB;
    } else {
      detector    = event.entityB;
      otherObject = event.entityA;
    }
    
    Entity ship = detector[EsShipDetector].ship
    
    if(otherObject.equals( ship ) {
      return; //we detected our own ship. Nothing to do here
    }
    
    switch(detector[EsShipDetector].kind) {
    case PLANET:
      if(!otherObject[EsPlaneta] != null) {
        return;
      }
      if(ship[Orbit] != null) {
        return; //we're done
      }
      
      
      Entity<EsPlanet> següentPlaneta = otherObject[EsPlaneta].direccionsExercits[entity[EsNau].exercit];
      
      if(següentPlaneta == null) {
        ship[Seek] = null;
        ship[Orbit] = new Orbit(
                                objective = otherObject,
                                distance  = otherObject[EsPlaneta].radi * 3.0f;
                               );
      } else {
        ship[Seek].objective = otherObject;
      }
      
      break;
    case LONG_SHIP:
      if(!otherObject.contains(EsNau)) {
        return;
      }
      
      if(otherObject[Bandol].equals(ship[Bandol])) {
        ship[MultipleFlee].objectives.add(otherObject);
      } else {
        ship[MultipleSeek].objectives.add(otherObject);
      }
      
      break;
    case SHORT_SHIP:
      if(!otherObject.contains(EsNau)) {
        return;
      }
      
      if(otherObject[Bandol].equals(ship[Bandol])) {
        return;
      } else {
        //TODO shoot!!!!!
      }
      
      break;
    }
  }

  @event JBulletUnCollision(JBulletUnCollision event: Incoming Event) {
    if(!event.entityA.contains(EsShipDetector) && !event.entityB.contains(EsShipDetector)) {
      throw event; //we do not handle this event
    }
    
    Entity detector;
    Entity otherObject;
    
    if(event.entityA.contains(EsShipDetector)) {
      detector    = event.entityA;
      otherObject = event.entityB;
    } else {
      detector    = event.entityB;
      otherObject = event.entityA;
    }
    
    Entity ship = detector[EsShipDetector].ship
    
    if(otherObject.equals( ship ) {
      return; //we detected our own ship. Nothing to do here
    }
    
    switch(detector[EsShipDetector].kind) {
    case PLANET:
    case SHORT_SHIP:
      return;
    case LONG_SHIP:
      if(!otherObject.contains(EsNau)) {
        return;
      }
      
      if(otherObject[Bandol].equals(ship[Bandol])) {
        ship[MultipleFlee].objectives.remove(otherObject);
      } else {
        ship[MultipleSeek].objectives.remove(otherObject);
      }
      
      break;
    }
    
  }
}