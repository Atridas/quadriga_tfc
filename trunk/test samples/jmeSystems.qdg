// en algun lloc de java...

public class JME_Quadriga_API {
  public com.jme3.scene.Node getRootNode() ...
}

//----------------------------------------------

@const String ROOT_NODE = "RootNode";



@component Spatial {
  *Transform
}

@component Geometry extends Spatial {
  String model
  Entity<Node> parent
}
  
@component Node extends Spatial {
  Entity with Node parent
}

@component Material {
  String name
  Map<String,Color> colors
  Map<String,float> floats
  Map<String,int> ints
  Map<String,boolean> booleans
  Map<String,Matrix4f> matrixes
  Map<String,Vector2f> vectors2
  Map<String,Vector3f> vectors3
}

abstract @system JME3Spatials {
  @components {
    Spatial
    Transform
  }
  
  @additionalInfo {
    com.jme3.scene.Spatial jME3Spatial
  }
  
  @newEntity(com.jme3.scene.Spatial spatial, Entity entity: ENTITY) {
    entity[jME3Spatial] = spatial;
    entity[jME3Spatial].setLocalTranslation(entity[Transform].translation);
    entity[jME3Spatial].setLocalRotation(entity[Transform].rotation);
    entity[jME3Spatial].setLocalScale(entity[Transform].scale);
  }
  
  @change(Entity entity: ENTITY) {
    entity[jME3Spatial].setLocalTranslation(entity[Transform].translation);
    entity[jME3Spatial].setLocalRotation(entity[Transform].rotation);
    entity[jME3Spatial].setLocalScale(entity[Transform].scale);
  }
}

@system JME3Nodes implements JME3Spatials {
  @components {
    Node
  }
  
  @additionalInfo {
    com.jme3.scene.Node jME3Node
  }
  
  @newEntity(Entity entity: ENTITY) {
    if(entity[Node].parent == null) {
      if(entity.name.equals(ROOT_NODE)) {
        entity[jME3Node] = JME_Quadriga_API.getRootNode();
        super.onNewEntity(node);
        return;
      } else {
        entity[Node].parent = Entity.getFromName(ROOT_NODE);
      }
    }
  
    com.jme3.scene.Node node = new com.jme3.scene.Node("Entity node: " + entity);
    com.jme3.scene.Node parent = entity[Node].parent[jME3Node];
    
    parent.attachChild(node);
    
    entity[jME3Node] = node;
    super(node);
  }
  
  @change() {
    super();
  }
  
  @eraseEntity(Entity entity: ENTITY) {
    entity[jME3Node].removeFromParent();
  }
}

@system JME3Geometries implements JME3Spatials {
  @components {
    Geometry
  }
  
  @additionalInfo {
    com.jme3.scene.Geometry jME3Geometry
  }
  
  @externInfo {
    com.jme3.scene.Node jME3Node: JME3Nodes.jME3Node
  }
  
  @newEntity(Entity entity: ENTITY) {
    com.jme3.scene.Mesh mesh = JME_Quadriga_API.getAssetManager().loadModel(entity[Geometry].model);
    com.jme3.scene.Geometry geometry = new com.jme3.scene.Geometry("Entity geo: " + entity, mesh);
    com.jme3.scene.Node parent = entity[Geometry].parent[jME3Node];
    
    parent.attachChild(geometry);
    
    entity[jME3Geometry] = geometry;
    super(geometry);
  }
  
  @change() {
    super();
  }
  
  @eraseEntity(Entity entity: ENTITY) {
    entity[jME3Geometry].removeFromParent();
  }
}