/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT  = true;
  ERROR_REPORTING = false;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  TOKEN_FACTORY = "cat.quadriga.parsers.tokens.MySimpleToken";
  JDK_VERSION = "1.5";
}

PARSER_BEGIN(QuadrigaSimple)
package cat.quadriga.parsers;

import java.io.*;
import java.util.*;
import cat.quadriga.parsers.code.*;
import cat.quadriga.parsers.code.statements.*;
import cat.quadriga.parsers.code.expressions.*;
import cat.quadriga.parsers.code.printers.*;
import cat.quadriga.parsers.code.symbols.*;
import cat.quadriga.parsers.code.types.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class QuadrigaSimple
{
   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   private int id = 0;

   private int getNewId()   {     return id++;
   }

   private ErrorLog errorLog = new ErrorLog();

   private SymbolTable symbolTable = new SymbolTable();

   private StatementNode recentSwitchOrFor = null;

   private BlockCode.TmpBlockCode localBlock = null;

   public QuadrigaSimple(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    QuadrigaSimple parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new QuadrigaSimple(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new QuadrigaSimple(new java.io.FileInputStream(args[0]), "UTF-8");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      List<PrintInfo> info = parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
      MegaPrinter mp = MegaPrinter.getInstance();
      System.out.println(mp.print(info));
      mp.printToFile(info, "out.java");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

  public ExpressionNode symbolToExpression(BaseSymbol symbol, Token first, Token last)
  {
    if(symbol instanceof LocalVariableSymbol)    {
      return new LocalVarAccess((LocalVariableSymbol)symbol,
                                first.beginLine, first.beginColumn,
                                last.endLine, last.endColumn);    }
    return null;
  }
  
  public ExpressionNode accessToMember(ExpressionNode expression, String member, Token t)
  {
    return new UnaryProxy("Access to member " + member, expression,
                               expression.beginLine, expression.beginColumn,
                               t.endLine, t.endColumn);
  }

  public ExpressionNode resolveName(List<Token> identifiers) {
    Token first = identifiers.get(0);
    Token actual;
    Iterator<Token> it = identifiers.iterator();
    ExpressionNode result = null;

    actual = it.next();
    String aux = actual.image;
    BaseSymbol symbol = symbolTable.findSymbol(aux);
    if(symbol != null) {
      result = symbolToExpression(symbol,first,actual);    }
    
    while(result == null && it.hasNext()) {
      actual = it.next();
      aux += '.' + actual.image;
      symbol = symbolTable.findSymbol(aux);
      if(symbol != null) {
        result = symbolToExpression(symbol,first,actual);
      }
    }

    if(result == null) {
      result = new ProxyExpression(aux, identifiers.get(0),
                                        identifiers.get(identifiers.size()-1));    } else {      while(it.hasNext()) {
        actual = it.next();
        aux = actual.image;
        result = accessToMember(result, aux, actual);
      }
    }
    
    return result;  }

}

class VarAndInit{  String name;
  BaseType type;
  ExpressionNode init;
  int modifiers;
}

PARSER_END(QuadrigaSimple)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (<HEXADECIMAL_DIGIT>)+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (<HEXADECIMAL_DIGIT>)+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (<HEXADECIMAL_DIGIT>)* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < #HEXADECIMAL_DIGIT : ["0"-"9","a"-"f","A"-"F"] >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((cat.quadriga.parsers.tokens.MySimpleToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((cat.quadriga.parsers.tokens.MySimpleToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
| < GT: ">" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

List<PrintInfo> CompilationUnit():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
}
{
  [LOOKAHEAD( ( Annotation() )* "package" ) PackageDeclaration(out)
    {
      out.add(PrintIntro.getInstance());
    }
  ]
  ( ImportDeclaration(out) )*
  ( 
    {
      out.add(PrintIntro.getInstance());
    }
    TypeDeclaration(out)
  )+
  ( < "\u001a" > )?
  ( <STUFF_TO_IGNORE: ~[]> )?
  <EOF>
  {
    return out;
  }
}

void PackageDeclaration(List<PrintInfo> out):
{
  List<Token > tokens;
}
{
  Modifiers(out) "package" tokens = Name() ";"
  {
    String aux = tokens.get(0).image;
    for(int i = 1; i < tokens.size(); i++) {
      aux += "." + tokens.get(i).image;    }

    symbolTable.addPackage(aux);

    out.add(new PrintString("package " + aux + ";"));
  }
}

void ImportDeclaration(List<PrintInfo> out):
{
  boolean stat = false;
  List<Token> tokens;
  String aux;
}
{
  "import"
  [ "static"
    {
      stat = true;
    }
  ]
  tokens = Name()
  {
    aux = tokens.get(0).image;
    for(int i = 1; i < tokens.size(); i++) {
      aux += "." + tokens.get(i).image;
    }  }
  (     "." "*"
    {
      symbolTable.addPackage(aux);

      aux += ".*";
    }
  |    {
      try {
        Class<?> clazz = Class.forName(aux);
        BaseSymbol symbol = new TypeSymbol(ClassOrInterfaceTypeRef.getFromClass(clazz));
        symbolTable.addGlobalSymbol(symbol);
      } catch (ClassNotFoundException e) {
        //TODO revisar això
        BaseSymbol symbol = new TypeSymbol(NullType.instance);
        symbolTable.addGlobalSymbol(symbol);
      }    }
  )
  ";"
  {
    out.add(new PrintString("import " + aux + ";"));
  }
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers(List<PrintInfo> out):
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public"
   {
     modifiers |= ModifierSet.PUBLIC;
     out.add(new PrintString("public"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "static"
   {
     modifiers |= ModifierSet.STATIC;
     out.add(new PrintString("static"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "protected"
   {
     modifiers |= ModifierSet.PROTECTED;
     out.add(new PrintString("protected"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "private"
   {
     modifiers |= ModifierSet.PRIVATE;
     out.add(new PrintString("private"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "final"
   {
     modifiers |= ModifierSet.FINAL;
     out.add(new PrintString("final"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "abstract"
   {
     modifiers |= ModifierSet.ABSTRACT;
     out.add(new PrintString("abstract"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "synchronized"
   {
     modifiers |= ModifierSet.SYNCHRONIZED;
     out.add(new PrintString("synchronized"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "native"
   {
     modifiers |= ModifierSet.NATIVE;
     out.add(new PrintString("native"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "transient"
   {
     modifiers |= ModifierSet.TRANSIENT;
     out.add(new PrintString("transient"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "volatile"
   {
     modifiers |= ModifierSet.VOLATILE;
     out.add(new PrintString("volatile"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   "strictfp"
   {
     modifiers |= ModifierSet.STRICTFP;
     out.add(new PrintString("strictfp"));
     out.add(PrintWhiteSpace.getInstance());
   }
  |
   Annotation(out)
  )
 )*

 {
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration(List<PrintInfo> out):
{
   int modifiers;
}
{
  (
    ";"
    {
      out.add(new PrintString(";"));
      out.add(PrintIntro.getInstance());
    }
  |
    modifiers = Modifiers(out)
    (
      ClassOrInterfaceDeclaration(modifiers, out)
    |
      EnumDeclaration(modifiers, out)
    |
      AnnotationTypeDeclaration(modifiers, out)
    )
  )
}


void ClassOrInterfaceDeclaration(int modifiers, List<PrintInfo> out):
{
   boolean isInterface = false;
   Token t;
}
{
  ( "class" | "interface" { isInterface = true; } )
  t=<IDENTIFIER>
  {
    out.add(new PrintString(isInterface?"interface":"class"));
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString(t.image));
  }
  [ TypeParameters(out) ]
  {
    out.add(PrintWhiteSpace.getInstance());
  }
  [ ExtendsList(isInterface, out) ]
  [ ImplementsList(isInterface, out) ]
  ClassOrInterfaceBody(isInterface, out)
}

void ExtendsList(boolean isInterface, List<PrintInfo> out):
{
   boolean extendsMoreThanOne = false;
}
{
   "extends"
   {
     out.add(new PrintString("extends"));
     out.add(PrintWhiteSpace.getInstance());
   }
   ClassOrInterfaceType(out)
   ( "," 
     {
       out.add(new PrintString(","));
       out.add(PrintWhiteSpace.getInstance());
     }
     ClassOrInterfaceType(out) { extendsMoreThanOne = true; }
   )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface, List<PrintInfo> out):
{}
{
   "implements"
   {
     out.add(new PrintString("implements"));
     out.add(PrintWhiteSpace.getInstance());
   }
   ClassOrInterfaceType(out)
   ( "," 
     {
       out.add(new PrintString(","));
       out.add(PrintWhiteSpace.getInstance());
     }
     ClassOrInterfaceType(out)
   )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void EnumDeclaration(int modifiers, List<PrintInfo> out):
{
  Token t;
}
{
  "enum" t=<IDENTIFIER>
  {
    out.add(new PrintString("enum"));
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString(t.image));
  }
  [ ImplementsList(false, out) 
    {
      out.add(PrintWhiteSpace.getInstance());
    }
  ]
  EnumBody(out)
}

void EnumBody(List<PrintInfo> out):
{}
{
   "{"
   {
    out.add(new PrintString("{"));
    out.add(PrintInitTab.getInstance());
    out.add(PrintIntro.getInstance());
   }
   [ EnumConstant(out)
     ( LOOKAHEAD(2) ","
       {
         out.add(new PrintString(","));
         out.add(PrintWhiteSpace.getInstance());
       }
       EnumConstant(out)
     )*
   ]
    [ "," ]
   [ ";"
     ( 
     {
       out.add(PrintIntro.getInstance());
     }
     ClassOrInterfaceBodyDeclaration(false, out) )*
   ]
   "}"
   {
     out.add(PrintEndTab.getInstance());
     out.add(PrintIntro.getInstance());
     out.add(new PrintString("}"));
   }
}

void EnumConstant(List<PrintInfo> out):
{
  Token t;
}
{
  Modifiers(out) t=<IDENTIFIER>
  {
    out.add(new PrintString(t.image));
  }
  [ Arguments(out) ]
  [ ClassOrInterfaceBody(false, out) ]
}

void TypeParameters(List<PrintInfo> out):
{}
{
   "<"
   {
     out.add(new PrintString("<"));
   }
   TypeParameter(out)
   ( ","
   {
     out.add(new PrintString(","));
     out.add(PrintWhiteSpace.getInstance());
   }
   TypeParameter(out)
   )*
   ">"
   {
     out.add(new PrintString(">"));
   }
}

void TypeParameter(List<PrintInfo> out):
{
  Token t;
}
{
   t=<IDENTIFIER>
   {
     out.add(new PrintString(t.image));
   }
   [
     {
       out.add(PrintWhiteSpace.getInstance());
     }
     TypeBound(out)
   ]
}

void TypeBound(List<PrintInfo> out):
{}
{
   "extends"
   {
     out.add(new PrintString("extends"));
     out.add(PrintWhiteSpace.getInstance());
   }
   ClassOrInterfaceType(out)
   ( "&"
     {
       out.add(PrintWhiteSpace.getInstance());
       out.add(new PrintString("&"));
       out.add(PrintWhiteSpace.getInstance());
     }
     ClassOrInterfaceType(out)
   )*
}

void ClassOrInterfaceBody(boolean isInterface, List<PrintInfo> out):
{
}
{
  "{"
  {
    out.add(new PrintString("{"));
    out.add(PrintInitTab.getInstance());
    out.add(PrintIntro.getInstance());
  }
  ( ClassOrInterfaceBodyDeclaration(isInterface, out)
    {
      out.add(PrintIntro.getInstance());
    }
  )*
  "}"
  {
    out.add(PrintEndTab.getInstance());
    out.add(PrintIntro.getInstance());
    out.add(new PrintString("}"));
    out.add(PrintIntro.getInstance());
  }
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface, List<PrintInfo> out):
{
  //TODO
  boolean isNestedInterface = false;
  int modifiers;
}
{
  (
    LOOKAHEAD(2)
    Initializer(out)
    {
       if (isInterface)
          throw new ParseException("An interface cannot have initializers");
    }
  |
    modifiers = Modifiers(out) // Just get all the modifiers out of the way. If you want to do
                // more checks, pass the modifiers down to the member
    (
        ClassOrInterfaceDeclaration(modifiers, out)
      |
        EnumDeclaration(modifiers, out)
      |
        LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
        ConstructorDeclaration(out)
      |
        LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
        FieldDeclaration(modifiers, out)
      |
        MethodDeclaration(modifiers, out)
      |
        AnnotationTypeDeclaration(modifiers, out)
    )
  |
    ";"
  )
}

void FieldDeclaration(int modifiers, List<PrintInfo> out):
{
  VarAndInit v;
  BaseType tipus;
}
{
  // Modifiers are already matched in the caller
  tipus = Type(out)
  {
    out.add(PrintWhiteSpace.getInstance());
  }
  v = VariableDeclarator(modifiers, tipus)
  ( ","
    {
      //TODO
    }
    v = VariableDeclarator(modifiers, tipus)
  )* ";"
  {
    out.add(new PrintString(";"));
  }
}

VarAndInit VariableDeclarator(int modifiers, BaseType type):
{
  VarAndInit vai;
  ExpressionNode initialization;
}
{
  vai = VariableDeclaratorId(type)
  {
    vai.modifiers = modifiers;  }
  [ "="
    initialization = VariableInitializer()
    {
      vai.init = initialization;    }
  ]
  {    return vai;
  }
}

VarAndInit VariableDeclaratorId(BaseType type):
{
  Token t;
  VarAndInit vai = new VarAndInit();
}
{
  t=<IDENTIFIER>
  {
    vai.name = t.image;
    vai.type = type;
  }
  ( "[" "]" 
    {
      vai.type = new ArrayType(type);
    }
  )*
  {
    return vai;  }
}

ExpressionNode VariableInitializer():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  ExpressionNode result;
}
{
  (
    result = ArrayInitializer()
  |
    result = Expression(out)
  )
  {    return result;
  }
}

ExpressionNode ArrayInitializer():
{
  ExpressionNode aux;
  List<ExpressionNode> listOfInits = new LinkedList<ExpressionNode>();
}
{
  "{"
  [ aux = VariableInitializer()
    {
      listOfInits.add(aux);
    }
    ( LOOKAHEAD(2) "," aux = VariableInitializer()
      {
        listOfInits.add(aux);
      }
    )*
  ]
  [ "," ]
  "}"
  {
    if(listOfInits.size() == 0)    {
      //TODO
      return null;    } else    {
      return new UnaryProxy(listOfInits.get(0));    }
  }
}

void MethodDeclaration(int modifiers, List<PrintInfo> out):
{
}
{
  // Modifiers already matched in the caller!
  [ TypeParameters(out) ]
  {
    out.add(PrintWhiteSpace.getInstance());
  }
  ResultType(out)
  {
    out.add(PrintWhiteSpace.getInstance());
  }
  MethodDeclarator(out)
  [ "throws"
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString("throws"));
      out.add(PrintWhiteSpace.getInstance());
    }
    NameList()
  ]
  ( Block(out)
  | ";"
    {
      out.add(new PrintString(";"));
    }
  )
}

void MethodDeclarator(List<PrintInfo> out):
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    out.add(new PrintString(t.image));
  }
  FormalParameters(out)
  ( "[" "]"
    {
      out.add(new PrintString("["));
      out.add(new PrintString("]"));
    }
  )*
}

void FormalParameters(List<PrintInfo> out):
{}
{
  "("
  {
    out.add(new PrintString("("));
  }
  [ FormalParameter(out)
    ( ","
    {
      out.add(new PrintString(","));
      out.add(PrintWhiteSpace.getInstance());
    }
    FormalParameter(out)
    )*
  ]
  ")"
  {
    out.add(new PrintString(")"));
  }
}

void FormalParameter(List<PrintInfo> out):
{
  int modifiers;
  BaseType type;
}
{
  // danson, added
  //          [ "final" | Annotation() ]
  // See Java Language Specification, 3rd Edition, section 8.4.1
  modifiers = Modifiers(out)
  {
    if(modifiers > 0)
      out.add(PrintWhiteSpace.getInstance());
  }
  [ "final"
    {
      out.add(new PrintString("final"));
      out.add(PrintWhiteSpace.getInstance());
    }
  | Annotation(out)
  ]
  type = Type(out)
  [ "..."
  {
    out.add(new PrintString("..."));
  }
  ]
  {
    out.add(PrintWhiteSpace.getInstance());
  }
  VariableDeclaratorId(type)
  {
    //TODO  }
}

void ConstructorDeclaration(List<PrintInfo> out):
{
  Token t;
  out.add(PrintWhiteSpace.getInstance());
  BlockStatementNode bsn;
}
{
  [ TypeParameters(out) ]
  // Modifiers matched in the caller
  t=<IDENTIFIER>
  {
    out.add(new PrintString(t.image));
  }
  FormalParameters(out)
  [ "throws"
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString("throws"));
      out.add(PrintWhiteSpace.getInstance());
    }
  NameList()
  ]
  "{"
  {
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString("{"));
    out.add(PrintInitTab.getInstance());
    out.add(PrintIntro.getInstance());
  } 
  [ LOOKAHEAD(ExplicitConstructorInvocation())
       ExplicitConstructorInvocation(out)
  ]
  ( bsn = BlockStatement()
    {
      String treeString = bsn.treeStringRepresentation();
      out.addAll( MegaPrinter.getInstance().format(treeString) );
    }
  )*
  "}"
  {
    while(out.get(out.size()-1) == PrintIntro.getInstance())
      out.remove(out.size()-1);
    if(out.get(out.size()-1) != PrintInitTab.getInstance()) {
      out.add(PrintEndTab.getInstance());
      out.add(PrintIntro.getInstance());
    } else {
      out.add(PrintEndTab.getInstance());
    }
    out.add(new PrintString("}"));
  }
}

void ExplicitConstructorInvocation(List<PrintInfo> out):
{
  Token t;
}
{
  ( t=<IDENTIFIER> "."
    {
      out.add(new PrintString(t.image));
      out.add(new PrintString("."));
    }
  )*
  [ LOOKAHEAD(2) "this" "."
    {
      out.add(new PrintString("this"));
      out.add(new PrintString("."));
    }
  ]
  [ TypeArguments(out) ]
  ( "this"
    {
      out.add(new PrintString("this"));
    }
  | "super"
    {
      out.add(new PrintString("super"));
    }
  ) Arguments(out) ";"
    {
      out.add(new PrintString(";"));
      out.add(PrintIntro.getInstance());
    }
}

void Initializer(List<PrintInfo> out):
{}
{
  [ "static"
  {
    {
      out.add(new PrintString("static"));
      out.add(PrintWhiteSpace.getInstance());
    }
  }
  ] Block(out)
}


/*
 * Type, name and expression syntax follows.
 */

BaseType Type(List<PrintInfo> out):
{
  BaseType t;
}
{
  ( 
    LOOKAHEAD(2) t = ReferenceType(out)
  |
    t = PrimitiveType(out)
  )
  {    out.add(new PrintString(t.getBinaryName()));
    return t;
  }
}

BaseType ReferenceType(List<PrintInfo> out):
{
  BaseType type;
}
{
  (
    
    type = PrimitiveType(out)
    ( LOOKAHEAD(2) "[" "]"
      {
        type = new ArrayType(type);
      }
    )+
  |
    type = ClassOrInterfaceType(out) 
    ( LOOKAHEAD(2) "[" "]"
      {
        type = new ArrayType(type);
      }
    )*
  )
  {    return type;
  }
}

BaseType ClassOrInterfaceType(List<PrintInfo> out):
{
  Token t, first, last;
  List<String> aux = new LinkedList<String>();
  //List<PrintInfo> out = new LinkedList<PrintInfo>();
  BaseType type;
}
{
  t=<IDENTIFIER>
  {
    aux.add(t.image);
    first = last = t;
  }
  [ LOOKAHEAD(2)TypeArguments(out)
    //TODO type arguments
  ]
  ( LOOKAHEAD(2) "." t=<IDENTIFIER>
    {
      aux.add(t.image);
      last = t;
    }
    [ LOOKAHEAD(2) TypeArguments(out)
      {
        //last = t;      }
    ]
  )*
  {
    CodeZone cz = new CodeZone(first.beginLine, last.beginColumn, last.endLine, first.endColumn);
    String name = aux.get(0);
    for(int i = 1; i < aux.size(); i++) {
	  name += "." + aux.get(i);    }
    BaseSymbol symbol = symbolTable.findSymbol(name);
    if(symbol != null) {
      if(symbol instanceof TypeSymbol) {
        return ((TypeSymbol)symbol).type;      } else {
        errorLog.insertError("El simbol \"" + name + "\" no és un tipus.", cz);
        return UnknownType.empty;       }    } else {
      try {
        Class<?> clazz = Class.forName(name);
        return ClassOrInterfaceTypeRef.getFromClass(clazz);      } catch(ClassNotFoundException e) {
        try {
          Class<?> clazz = Class.forName("java.lang." + name);
          return ClassOrInterfaceTypeRef.getFromClass(clazz);
        } catch(ClassNotFoundException e2) {
          errorLog.insertWarning("No s'ha trobat la classe \"" + name + "\".", cz);
          return new UnknownType(name);
        }      }    }  }
}

void TypeArguments(List<PrintInfo> out):
{}
{
   "<"
   {
     out.add(new PrintString("<"));
   }
   TypeArgument(out)
   ( ","
     {
       out.add(new PrintString(","));
       out.add(PrintWhiteSpace.getInstance());
     }
     TypeArgument(out)
   )* ">"
   {
     out.add(new PrintString(">"));
   }
}

void TypeArgument(List<PrintInfo> out):
{}
{
 ( 
   ReferenceType(out)
 |
   "?"
   {
     out.add(new PrintString("?"));
   }
   [ {
       out.add(PrintWhiteSpace.getInstance());
     }
     WildcardBounds(out)
   ]
 )
}

void WildcardBounds(List<PrintInfo> out):
{
  Token t;
  List<PrintInfo> other = new LinkedList<PrintInfo>();
}
{
 (
   t="extends" ReferenceType(other)
 |
   t="super" ReferenceType(other)
 )
 {
   out.add(new PrintString(t.image));
   out.add(PrintWhiteSpace.getInstance());
   out.addAll(other);
 }
}


PrimitiveTypeRef PrimitiveType(List<PrintInfo> out):
{
  Token t;
}
{
  (
      t="boolean"
    |
      t="char"
    |
      t="byte"
    |
      t="short"
    |
      t="int"
    |
      t="long"
    |
      t="float"
    |
      t="double"
  )
  {
    return PrimitiveTypeRef.getFromName(t.image);
  }
}

BaseType ResultType(List<PrintInfo> out):
{
  BaseType type;
  Token t;
}
{
  (   
      t="void"
      {
        type = PrimitiveTypeRef.getFromName(t.image);
      }
    |
      type = Type(out)
    )
    {      return type;
    }
}

List<Token> Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  List<Token> tokens = new LinkedList<Token>();
  Token t;
}
{
  t=<IDENTIFIER>
  {
    tokens.add(t);
  }
  ( LOOKAHEAD(2) "." t=<IDENTIFIER>
    {
      tokens.add(t);
    }
  )*
  {    return tokens;
  }
}

List<List<Token>> NameList():
{
  List<Token> aux;
  List<List<Token>> names = new LinkedList<List<Token>>();
}
{
  aux = Name()
  {
    names.add(aux);  }
  ( ","
    Name()
    {      names.add(aux);
    }
  )*
  {    return names;
  }
}


/*
 * Expression syntax follows.
 */

ExpressionNode Expression(List<PrintInfo> out):
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
  ExpressionNode finalNode, auxNode;
  AssigmentStatementNode.Operator operator; 
}
{
  finalNode = ConditionalExpression()
  [
    LOOKAHEAD(2)
    {
      out.add(PrintWhiteSpace.getInstance());
    }
    operator = AssignmentOperator()
    {
      out.add(PrintWhiteSpace.getInstance());
    }
    auxNode = Expression(out)
    {
      finalNode = new AssigmentExpressionNode(operator, finalNode, auxNode);    }
  ]

  {    return finalNode;
  }
}

AssigmentStatementNode.Operator AssignmentOperator():
{}
{
  ( "="    { return AssigmentStatementNode.Operator.ASSIGN; }
  | "*="   { return AssigmentStatementNode.Operator.STARASSIGN; }
  | "/="   { return AssigmentStatementNode.Operator.SLASHASSIGN; }
  | "%="   { return AssigmentStatementNode.Operator.REMASSIGN; }
  | "+="   { return AssigmentStatementNode.Operator.PLUSASSIGN; }
  | "-="   { return AssigmentStatementNode.Operator.MINUSASSIGN; }
  | "<<="  { return AssigmentStatementNode.Operator.LSHIFTASSIGN; }
  | ">>="  { return AssigmentStatementNode.Operator.RSIGNEDSHIFTASSIGN; }
  | ">>>=" { return AssigmentStatementNode.Operator.RUNSIGNEDSHIFTASSIGN; }
  | "&="   { return AssigmentStatementNode.Operator.ANDASSIGN; }
  | "^="   { return AssigmentStatementNode.Operator.XORASSIGN; }
  | "|="   { return AssigmentStatementNode.Operator.ORASSIGN; }
  )
}

ExpressionNode ConditionalExpression():
{
  List<PrintInfo> aux  = new LinkedList<PrintInfo>();

  ExpressionNode finalNode, auxNode1, auxNode2;
}
{
  finalNode = ConditionalOrExpression()
  
  [ "?" auxNode1=Expression(aux) ":" auxNode2=Expression(aux)
    {
      finalNode = new TernaryExpressionNode(finalNode, auxNode1, auxNode2);
    }
  ]
  {
    return finalNode;  }
}

ExpressionNode ConditionalOrExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  LogicalOperation.Operator operator;
}
{
  finalNode = ConditionalAndExpression()
  ( "||" { operator = LogicalOperation.Operator.OR; }
    auxiliarNode = ConditionalAndExpression()
    {
      finalNode = new LogicalOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode ConditionalAndExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  LogicalOperation.Operator operator;
}
{
  finalNode = InclusiveOrExpression()
  ( "&&" { operator = LogicalOperation.Operator.AND; }
    auxiliarNode = InclusiveOrExpression()
    {
      finalNode = new LogicalOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode InclusiveOrExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  MathematicOperation.Operator operator;
}
{
  finalNode = ExclusiveOrExpression()
  ( "|" { operator = MathematicOperation.Operator.BIT_OR; }
    auxiliarNode = ExclusiveOrExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode ExclusiveOrExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  MathematicOperation.Operator operator;
}
{
  finalNode = AndExpression()
  ( "^" { operator = MathematicOperation.Operator.BIT_XOR; }
    auxiliarNode = AndExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode AndExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  MathematicOperation.Operator operator;
}
{
  finalNode = EqualityExpression()
  ( "&" { operator = MathematicOperation.Operator.BIT_AND; }
    auxiliarNode = EqualityExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode EqualityExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  BooleanOperation.Operator operator;
}
{
  finalNode = InstanceOfExpression()
  (
    ( "==" { operator = BooleanOperation.Operator.EQ; }
    | "!=" { operator = BooleanOperation.Operator.NEQ; }
    )
    auxiliarNode = InstanceOfExpression()
    {
      finalNode = new BooleanOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {    return finalNode;
  }
}

ExpressionNode InstanceOfExpression():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  ExpressionNode finalNode, auxiliarNode;
  BooleanOperation.Operator operator;
  Token t;
}
{
  finalNode = RelationalExpression()
  [ t="instanceof" { operator = BooleanOperation.Operator.INSTANCEOF; }
    Type(out)
    {
      auxiliarNode = new ProxyExpression(out,t,t);
      finalNode = new BooleanOperation(operator,finalNode,auxiliarNode);    }
  ]
  {
    return finalNode;
  }
}

ExpressionNode RelationalExpression():
{
  ExpressionNode finalNode, auxiliarNode;
  BooleanOperation.Operator operator;
}
{
  finalNode = ShiftExpression()
  (
    ( "<" { operator = BooleanOperation.Operator.LT; }
    | ">" { operator = BooleanOperation.Operator.GT; }
    | "<=" { operator = BooleanOperation.Operator.LE; }
    | ">=" { operator = BooleanOperation.Operator.GE; }
    )
    auxiliarNode = ShiftExpression()
    {
      finalNode = new BooleanOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode ShiftExpression():
{
    ExpressionNode finalNode, auxiliarNode;
    MathematicOperation.Operator operator;
}
{
  finalNode = AdditiveExpression()
  (
    ( "<<" { operator = MathematicOperation.Operator.LEFT_SHIFT; }
    | RSIGNEDSHIFT()
           { operator = MathematicOperation.Operator.RIGHT_SHIFT; }
    | RUNSIGNEDSHIFT()
           { operator = MathematicOperation.Operator.RIGHT_UNSIGNED_SHIFT; }
    )
    auxiliarNode = AdditiveExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode AdditiveExpression():
{
    ExpressionNode finalNode, auxiliarNode;
    MathematicOperation.Operator operator;
}
{
  finalNode = MultiplicativeExpression()
  (
    (   "+" { operator = MathematicOperation.Operator.ADD; }
      | "-" { operator = MathematicOperation.Operator.SUB;  }
    )
    auxiliarNode = MultiplicativeExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);
    }
  )*
  {
    return finalNode;
  }
}

ExpressionNode MultiplicativeExpression():
{
    List<PrintInfo> out = new LinkedList<PrintInfo>();
    ExpressionNode finalNode, auxiliarNode;
    MathematicOperation.Operator operator;
}
{
  finalNode = UnaryExpression()
  (
    (   "*" { operator = MathematicOperation.Operator.MUL; }
	  | "/" { operator = MathematicOperation.Operator.DIV; }
	  | "%" { operator = MathematicOperation.Operator.MOD; }
	)
    auxiliarNode = UnaryExpression()
    {
      finalNode = new MathematicOperation(operator,finalNode,auxiliarNode);    }
  )*
  {    return finalNode;
  }
}

ExpressionNode UnaryExpression():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  ExpressionNode finalNode;
  UnaryOperation.Operator operator;
  Token t;
}
{
  (
    ( t="+" { operator = null; }
    | t="-" { operator = UnaryOperation.Operator.NEGATE; } )
    finalNode = UnaryExpression()
    {
      if(operator != null)
        finalNode = new UnaryOperation( operator, finalNode, t );    }
  | finalNode = PreIncrementExpression(out)
  | finalNode = PreDecrementExpression(out)
  | finalNode = UnaryExpressionNotPlusMinus()
  )
  
  {
    return finalNode;
  }
}

ExpressionNode PreIncrementExpression(List<PrintInfo > out):
{
  ExpressionNode node;
  Token t;
}
{
  t="++"
  node = PrimaryExpression(out)
  
  {
    return new UnaryOperation( UnaryOperation.Operator.PRE_INC, node, t );
  }
}

ExpressionNode PreDecrementExpression(List<PrintInfo > out):
{
  ExpressionNode node;
  Token t;
}
{
  t = "--"
  node = PrimaryExpression(out)
  
  {
    return new UnaryOperation( UnaryOperation.Operator.PRE_DEC, node, t );
  }
}

ExpressionNode UnaryExpressionNotPlusMinus():
{
  List<PrintInfo > out = new LinkedList<PrintInfo >();
  ExpressionNode finalNode;
  UnaryOperation.Operator operator;
  Token t;
}
{
  (
    ( t = "~" { operator = UnaryOperation.Operator.BIT_COMP; }
    | t = "!" { operator = UnaryOperation.Operator.NOT; }
    )
     finalNode = UnaryExpression()
     {
       finalNode = new UnaryOperation( operator, finalNode, t );     }
  |
    LOOKAHEAD( CastLookahead() )
    finalNode = CastExpression()
  |
    finalNode = PostfixExpression()
  )
  
  {
    return finalNode;
  }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
}
{
  LOOKAHEAD(2)
  "(" PrimitiveType(out)
|
  LOOKAHEAD("(" Type() "[")
  "(" Type(out) "[" "]"
|
  "(" Type(out) ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

ExpressionNode PostfixExpression():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  ExpressionNode finalNode;
  Token t;
}
{
  finalNode = PrimaryExpression(out)
  [ ( t = "++"  | t = "--" )
  ]

  {    return finalNode;
  }
}

ExpressionNode CastExpression():
{
  ExpressionNode finalNode;
  BaseType type;
  Token t;

  List<PrintInfo> out = new LinkedList<PrintInfo>();
}
{
  (
    LOOKAHEAD("(" PrimitiveType())
    t="(" type=Type(out) ")" finalNode = UnaryExpression()
  |
    t="(" type=Type(out) ")" finalNode = UnaryExpressionNotPlusMinus()
  )
  {
    return new CastExpressionNode(t, type, finalNode);
  }
}

ExpressionNode PrimaryExpression(List<PrintInfo> out):
{
  ExpressionNode result;
}
{
  result = PrimaryPrefix()
  ( LOOKAHEAD(2) PrimarySuffix(out)
    {
      Token t = new Token();
      result = new UnaryProxy( result, t, t );
    }
  )*

  {    return result;
  }
}

void MemberSelector(List<PrintInfo> out):
{
  List<PrintInfo> other = new LinkedList<PrintInfo>();
  Token t;
}
{
  "." TypeArguments(other) t=<IDENTIFIER>
  {
    out.add(new PrintString("."));
    out.addAll(other);
    out.add(new PrintString(t.image));
  }
}

ExpressionNode PrimaryPrefix():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  Token t, t2;
  ExpressionNode result;
  List<Token> tokenList = new LinkedList<Token>();
  BaseType type;
}
{
  (
    result = Literal()
  |
    LOOKAHEAD( ( <IDENTIFIER> "." )* "this" )
    ( t=<IDENTIFIER> "."
      {
        tokenList.add(t);
      }
    )*
    t="this"
    {
      if(tokenList.size() > 0) {
        //TODO algo
        result = new ProxyExpression(tokenList.get(0).image + " ... this",
                                     tokenList.get(0),
                                     t);      } else      {
        result = new ProxyExpression("this", t, t);      }
    }
  |
    t="super" "." t2=<IDENTIFIER>
    {
      //TODO
      result = new ProxyExpression("super." + t2.image, t, t2);
    }
  |
     // danson, added this part to support a construct like:
     //   Buffer.super.setDirty(true);
     // See Java Language Specification, 3rd edition, section 15.11.2.
     LOOKAHEAD( ClassOrInterfaceType() "." "super" "." <IDENTIFIER> )
     type = ClassOrInterfaceType(out) t="." "super" "." t2=<IDENTIFIER>
     {
       //TODO
      result = new ProxyExpression(type + ".super." + t.image, t, t2);
     }
  |
    "(" result = Expression(out) ")"
  |
    AllocationExpression(out)
    {
      result = new ProxyExpression("new something");    }
  |
    LOOKAHEAD( ResultType() "." "class" )
    type = ResultType(out) "." "class"
    {
      result = new ProxyExpression("classe " + type.toString());
    }
  |
    {
      List<Token> aux;    }
    aux = Name()
    {
      result = resolveName(aux);    }
  )
  {
    return result;  }
}

void PrimarySuffix(List<PrintInfo> out):
{
  Token t;
}
{
  ( 
      LOOKAHEAD("." "super" ".")
      "." "super"
      {
        out.add(new PrintString("."));
        out.add(new PrintString("super"));
      }
    |
      LOOKAHEAD("." "this")
      "." "this"
      {
        out.add(new PrintString("."));
        out.add(new PrintString("this"));
      }
    |
      LOOKAHEAD(2)
      "."
      {
        out.add(new PrintString("."));
      }
      AllocationExpression(out)
    |
      LOOKAHEAD(3)
      MemberSelector(out)
    |
      "["
      {
         out.add(new PrintString("["));
      }
      Expression(out) "]"
      {
         out.add(new PrintString("]"));
      }
    |
      "." t = <IDENTIFIER>
      {
        out.add(new PrintString("."));
        out.add(new PrintString(t.image));
      }
    |
      Arguments(out)
  )
}

LiteralData Literal():
{
  Token t;
  LiteralData data;
}
{
  (    
    t=<INTEGER_LITERAL>
    {
      data = new LiteralData.IntegerLiteral(t);
    }
  |
    t=<FLOATING_POINT_LITERAL>
    {
      data = new LiteralData.FloatLiteral(t);
    }
  |
    t=<CHARACTER_LITERAL>
    {
      data = new LiteralData.CharacterLiteral(t);
    }
  |
    t=<STRING_LITERAL>
    {
      data = new LiteralData.StringLiteral(t);
    }
  |
    data = BooleanLiteral()
  |
    data = NullLiteral()
  )
  {    return data;
  }
}

LiteralData BooleanLiteral():
{
  Token t;
}
{
  t="true"
  {
    return new LiteralData.TrueLiteral(t);
  }
|
  t="false"
  {
    return new LiteralData.FalseLiteral(t);
  }
}

LiteralData NullLiteral():
{
  Token t;
}
{
  t = "null"
  {
    return new LiteralData.NullLiteral(t);
  }
}

void Arguments(List<PrintInfo> out):
{
  List<PrintInfo> other = new LinkedList<PrintInfo>();
}
{
  "(" [ ArgumentList(other) ] ")"
  {
    out.add(new PrintString("("));
    out.addAll(other);
    out.add(new PrintString(")"));
  }
}

void ArgumentList(List<PrintInfo> out):
{}
{
  Expression(out)
  ( ","
    {
      out.add(new PrintString(","));
      out.add(PrintWhiteSpace.getInstance());
    }
    Expression(out)
  )*
}

void AllocationExpression(List<PrintInfo> out):
{
  List<PrintInfo> other = new LinkedList<PrintInfo>()
                , other2= new LinkedList<PrintInfo>();
}
{
  (
    
    LOOKAHEAD(2)
    "new" PrimitiveType(other) ArrayDimsAndInits(other2)
    {
      out.add(new PrintString("new"));
      out.add(PrintWhiteSpace.getInstance());
      out.addAll(other);
      out.addAll(other2);
    }
  |
    "new"
    {
      out.add(new PrintString("new"));
      out.add(PrintWhiteSpace.getInstance());
    }
    ClassOrInterfaceType(out)
    [ TypeArguments(out) ]
      (
        ArrayDimsAndInits(out)
      |
        Arguments(out)
        [ ClassOrInterfaceBody(false, out) ]
      )
  )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits(List<PrintInfo> out):
{}
{
  (
    LOOKAHEAD(2)
    ( LOOKAHEAD(2) "["  
      {
        out.add(new PrintString("["));
      }
      Expression(out) "]"
      {
        out.add(new PrintString("]"));
      }
    )+
    ( LOOKAHEAD(2) "[" "]"
      {
        out.add(new PrintString("["));
        out.add(new PrintString("]"));
      }
    )*
  |
    ( "[" "]"
      {
        out.add(new PrintString("["));
        out.add(new PrintString("]"));
      }
    )+
    ArrayInitializer() //TODO
  )
}


/*
 * Statement syntax follows.
 */

StatementNode Statement(List<PrintInfo> out):
{
  StatementNode statement = null;
}
{
  (
    LOOKAHEAD(2)
    statement = LabeledStatement()
  |
    AssertStatement(out)
  |
    statement = Block(out)
  |
    statement = EmptyStatement()
  |
    statement = StatementExpression() ";"
  |
    SwitchStatement(out)
  |
    statement = IfStatement()
  |
    WhileStatement(out)
  |
    DoStatement(out)
  |
    ForStatement(out)
  |
    BreakStatement(out)
  |
    ContinueStatement(out)
  |
    ReturnStatement(out)
  |
    ThrowStatement(out)
  |
    SynchronizedStatement(out)
  |
    TryStatement(out)
  )
  {
    if(statement == null) {
      statement = new ProxyStatement(out);    } else {      String treeString = statement.treeStringRepresentation();
      out.addAll( MegaPrinter.getInstance().format(treeString) );
    }
    return statement;  }
}

void AssertStatement(List<PrintInfo> out):
{}
{
  "assert"
  {
    out.add(new PrintString("assert"));
    out.add(PrintWhiteSpace.getInstance());
  }
  Expression(out)
  [ ":"
    {
      out.add(new PrintString(":"));
      out.add(PrintWhiteSpace.getInstance());
    }
    Expression(out)
    {
      out.add(PrintWhiteSpace.getInstance());
    }
  ]
  ";"
  {
    out.add(new PrintString(";"));
  }
}

StatementNode LabeledStatement():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  Token t;
  StatementNode node;
}
{
  t=<IDENTIFIER> ":"
  node = Statement(out)
  {
    return new LabeledStatementNode(t, node, symbolTable, errorLog);  }
}

BlockCode Block(List<PrintInfo> out):
{
  BlockCode.TmpBlockCode prevBlock = localBlock;
  BlockStatementNode blockStatementNode;
  Token t;

  symbolTable.newContext();
}
{
  t = "{"
  {
    localBlock = new BlockCode.TmpBlockCode(t);
  }
  ( 
    blockStatementNode = BlockStatement()
    {
      localBlock.addStatement(blockStatementNode);
    }
  )*
  t="}"
  {
    out.add(PrintIntro.getInstance());
    
    BlockCode block = localBlock.transformToBlockCode();

    String treeString = block.treeStringRepresentation();
    out.addAll( MegaPrinter.getInstance().format(treeString) );


    localBlock = prevBlock;

    symbolTable.deleteContext();
    return block;
  }
}

BlockStatementNode BlockStatement():
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  Token t;
  BlockStatementNode result;
}
{
  (    LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
    LocalVariableDeclaration(out) t=";"
    {
      //TODO
      result = new NoOpStatement(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
    }
  |
    result = Statement(out)
  |
    ClassOrInterfaceDeclaration(0, out)
    {
      //TODO
      result = new NoOpStatement(0,0,0,0);
    }
  )
  {    return result;
  }
}

StatementList LocalVariableDeclaration(List<PrintInfo> out):
{
  int modifiers;
  BaseType type;
  VarAndInit var;

  List<StatementNode > initializers = new LinkedList<StatementNode >();
}
{
  modifiers=Modifiers(out) type = Type(out) var=VariableDeclarator(modifiers,type)
  {
    if(var.init != null)    {
      //TODO correct left-hand
      ExpressionNode leftHand = new ProxyExpression(var.name);
            initializers.add(new AssigmentStatementNode(
                                    AssigmentStatementNode.Operator.ASSIGN,
                                    leftHand,
                                    var.init)
                      );

      //TODO modifiers
      LocalVariableSymbol localVar = new LocalVariableSymbol(modifiers, var.type, var.name);
      symbolTable.addSymbol(localVar);
      localBlock.addLocalVariable(localVar);
    }  }
  ( ","
    var = VariableDeclarator(modifiers,type)
    {      if(var.init != null)
      {
        //TODO correct left-hand
        ExpressionNode leftHand = new ProxyExpression(var.name);
      
        initializers.add(new AssigmentStatementNode(
                                    AssigmentStatementNode.Operator.ASSIGN,
                                    leftHand,
                                    var.init)
                        );

        //TODO modifiers
        LocalVariableSymbol localVar = new LocalVariableSymbol(modifiers, var.type, var.name);
        symbolTable.addSymbol(localVar);
        localBlock.addLocalVariable(localVar);
      }
    }
  )*
  {
    return new StatementList(initializers.toArray(new StatementNode[initializers.size()]));  }
}

StatementNode EmptyStatement():
{
  Token t;
}
{
  t = ";"
  {
    return new NoOpStatement(t.beginLine, t.beginColumn, t.endLine, t.endColumn);  }
}

StatementNode StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  ExpressionNode expression, expression2;
  Token t;
  AssigmentStatementNode.Operator assignOperator;
  StatementNode statementNode;
}
{
  (
    ( expression = PreIncrementExpression(out)
    | expression = PreDecrementExpression(out)
    )
    {
      statementNode = new StatementFromExpresion(expression);    }
  |
    expression = PrimaryExpression(out)
    (
      ( t = "++"
      | t = "--"
      )
      {
        expression = new UnaryOperation(UnaryOperation.Operator.PRE_INC,
                                       expression, t);
        statementNode = new StatementFromExpresion(expression);
      }
    |
      assignOperator = AssignmentOperator()
      expression2 = Expression(out)
      {
        statementNode = new AssigmentStatementNode(assignOperator,
                                                   expression,
                                                   expression2);      }
    |
    {
      statementNode = new StatementFromExpresion(expression);    }    ) 
  )
  {    return statementNode;
  }
}

void SwitchStatement(List<PrintInfo> out):
{}
{
  "switch" "("
  {
    out.add(new PrintString("switch"));
    out.add(new PrintString("("));
  }
  Expression(out) ")" "{"
  {
    out.add(new PrintString(")"));
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString("{"));
  }
  (
    {
      out.add(PrintIntro.getInstance());
    }
    SwitchLabel(out)
    {
      out.add(PrintInitTab.getInstance());
    }
    (
      {
        out.add(PrintIntro.getInstance());
        BlockStatementNode bsn;
      }
      bsn = BlockStatement()
      {
        String treeString = bsn.treeStringRepresentation();
        out.addAll( MegaPrinter.getInstance().format(treeString) );
      }
    )*
    {
      out.add(PrintEndTab.getInstance());
    }
  )*
  "}"
  {
    out.add(PrintIntro.getInstance());
    out.add(new PrintString("}"));
  }
}

void SwitchLabel(List<PrintInfo> out):
{
  List<PrintInfo> other = new LinkedList<PrintInfo>();
}
{
  "case" Expression(other) ":"
  {
    out.add(new PrintString("case"));
    out.add(PrintWhiteSpace.getInstance());
    out.addAll(other);
    out.add(new PrintString(":"));
  }
|
  "default" ":"
  {
    out.add(new PrintString("default"));
    out.add(new PrintString(":"));
  }
}

StatementNode IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
  List<PrintInfo> out = new LinkedList<PrintInfo>();
  StatementNode node1, node2 = null;
  ExpressionNode expression;
  Token t;
}
{
  t="if" "("
  expression = Expression(out)
  ")"
  {
    symbolTable.newContext();
  }
  node1 = Statement(out)
  {
    symbolTable.deleteContext();
  }
  [    LOOKAHEAD(1) "else"
    {
      symbolTable.newContext();
    }
    node2 = Statement(out)
    {
      symbolTable.deleteContext();
    }
  ]
  {
    return new IfStatementNode( t, expression, 
                          node1, node2, errorLog);  }
}

void WhileStatement(List<PrintInfo> out):
{}
{
  "while" "("
  {
    out.add(new PrintString("while"));
    out.add(new PrintString("("));
    out.add(PrintWhiteSpace.getInstance());
  }
  Expression(out)
  ")"
  {
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString(")"));
  }
  Statement(out)
}

void DoStatement(List<PrintInfo> out):
{}
{
  "do"
  {
    out.add(new PrintString("do"));
    out.add(PrintWhiteSpace.getInstance());
  }
  Statement(out)
  "while" "("
  {
    out.add(new PrintString("while"));
    out.add(new PrintString("("));
    out.add(PrintWhiteSpace.getInstance());
  }
  Expression(out)
  ")" ";"
  {
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString(")"));
    out.add(new PrintString(";"));
  }
}

void ForStatement(List<PrintInfo> out):
{
  Token t;
}
{
  "for" "("
  {
    out.add(new PrintString("for"));
    out.add(new PrintString("("));
    out.add(PrintWhiteSpace.getInstance());
  }

  (
      LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ":")
      Modifiers(out) Type(out) t=<IDENTIFIER> ":"
      {
        out.add(PrintWhiteSpace.getInstance());
        out.add(new PrintString(t.image));
        out.add(new PrintString(":"));
        out.add(PrintWhiteSpace.getInstance());
      }
      Expression(out)
    |
      [ ForInit(out) ] ";"
      {
        out.add(new PrintString(";"));
        out.add(PrintWhiteSpace.getInstance());
      }

      [ Expression(out) ] ";"
      {
        out.add(new PrintString(";"));
        out.add(PrintWhiteSpace.getInstance());
      }

      [ ForUpdate(out) ]
  )
  
  {
    out.add(new PrintString(")"));
    out.add(PrintWhiteSpace.getInstance());
  }

  ")" Statement(out)
}

void ForInit(List<PrintInfo> out):
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration(out)
|
  StatementExpressionList(out)
}

void StatementExpressionList(List<PrintInfo> out):
{
  StatementNode statement;
}
{
  statement = StatementExpression()
  {    String treeString = statement.treeStringRepresentation();
    out.addAll( MegaPrinter.getInstance().format(treeString) );
  }
  ( ","
    {
      out.add(new PrintString(","));
      out.add(PrintWhiteSpace.getInstance());
    }
    statement = StatementExpression()
    {      treeString = statement.treeStringRepresentation();
      out.addAll( MegaPrinter.getInstance().format(treeString) );
    }
  )*
}

void ForUpdate(List<PrintInfo> out):
{}
{
  StatementExpressionList(out)
}

void BreakStatement(List<PrintInfo> out):
{
  Token t = null;
}
{
  "break" [ t=<IDENTIFIER> ] ";"
  {
    out.add(new PrintString("break"));
    if(t != null)
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString(t.image));
    }
    out.add(new PrintString(";"));
  }
}

void ContinueStatement(List<PrintInfo> out):
{
  Token t = null;
}
{
  "continue" [ t=<IDENTIFIER> ] ";"
  {
    out.add(new PrintString("continue"));
    if(t != null)
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString(t.image));
    }
    out.add(new PrintString(";"));
  }
}

void ReturnStatement(List<PrintInfo> out):
{}
{
  "return"
  {
    out.add(new PrintString("return"));
    out.add(PrintWhiteSpace.getInstance());
  }
  [ Expression(out) ] ";"
  {
    out.add(new PrintString(";"));
  }
}

void ThrowStatement(List<PrintInfo> out):
{
  List<PrintInfo> other = new LinkedList<PrintInfo>();
}
{
  "throw" Expression(other) ";"
  {
    out.add(new PrintString("throw"));
    out.add(PrintWhiteSpace.getInstance());
    out.addAll(other);
    out.add(new PrintString(";"));
  }
}

void SynchronizedStatement(List<PrintInfo> out):
{}
{
  "synchronized" "("
  {
    out.add(new PrintString("synchronized"));
    out.add(new PrintString("("));
  }
  Expression(out)
  ")"
  {
    out.add(new PrintString(")"));
    out.add(PrintWhiteSpace.getInstance());
  }
  Block(out)
}

void TryStatement(List<PrintInfo> out):
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try"
  {
    out.add(new PrintString("try"));
    out.add(PrintWhiteSpace.getInstance());
  }
  Block(out)
  ( "catch" "("
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString("catch"));
      out.add(new PrintString("("));
    }
    FormalParameter(out)
    ")"
    {
      out.add(new PrintString(")"));
      out.add(PrintWhiteSpace.getInstance());
    }
    Block(out)
  )*
  [ "finally"
    {
      out.add(PrintWhiteSpace.getInstance());
      out.add(new PrintString("finally"));
      out.add(PrintWhiteSpace.getInstance());
    }
    Block(out)
  ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((cat.quadriga.parsers.tokens.MySimpleToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((cat.quadriga.parsers.tokens.MySimpleToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

void Annotation(List<PrintInfo> out):
{}
{
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation(out)
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation(out)
 |
   MarkerAnnotation(out)
}

void NormalAnnotation(List<PrintInfo> out):
{
}
{
   "@"
   {
     out.add(new PrintString("@"));
   }
   Name()
   "("
   {
     out.add(PrintWhiteSpace.getInstance());
     out.add(new PrintString("("));
   }
   [ MemberValuePairs(out) ] ")"
   {
     out.add(new PrintString(")"));
   }
}

void MarkerAnnotation(List<PrintInfo> out):
{}
{
  "@"
   {
     out.add(new PrintString("@"));
   }
   Name()
}

void SingleMemberAnnotation(List<PrintInfo> out):
{}
{
  "@"
   {
     out.add(new PrintString("@"));
   }
   Name() "("
   {
     out.add(PrintWhiteSpace.getInstance());
     out.add(new PrintString("("));
   }
   MemberValue(out)
   ")"
   {
     out.add(new PrintString(")"));
   }
}

void MemberValuePairs(List<PrintInfo> out):
{}
{
   MemberValuePair(out)
   ( ","
     {
       out.add(PrintWhiteSpace.getInstance());
       out.add(new PrintString(","));
     }
     MemberValuePair(out)
   )*
}

void MemberValuePair(List<PrintInfo> out):
{
  Token t;
}
{
   t=<IDENTIFIER> "="
   {
     out.add(new PrintString(t.image));
     out.add(PrintWhiteSpace.getInstance());
     out.add(new PrintString("="));
     out.add(PrintWhiteSpace.getInstance());
   }
   MemberValue(out)
}

void MemberValue(List<PrintInfo> out):
{}
{
   Annotation(out)
 |
   MemberValueArrayInitializer(out)
 |
   ConditionalExpression()
}

void  MemberValueArrayInitializer(List<PrintInfo> out):
{}
{
  "{"
  {
    out.add(new PrintString("{"));
    out.add(PrintInitTab.getInstance());
    out.add(PrintIntro.getInstance());
  }
  ( MemberValue(out)
    ( LOOKAHEAD(2) ","
    {
      out.add(new PrintString("}"));
      out.add(PrintWhiteSpace.getInstance());
    }
      MemberValue(out)
    )* [ "," ]
  )?
  "}"
  {
    out.add(PrintEndTab.getInstance());
    out.add(PrintIntro.getInstance());
    out.add(new PrintString("}"));
  }
}


/* Annotation Types. */

void AnnotationTypeDeclaration(int modifiers, List<PrintInfo> out):
{
  Token t;
}
{
  "@" "interface" t=<IDENTIFIER>
  {
    out.add(new PrintString("@"));
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString("interface"));
    out.add(PrintWhiteSpace.getInstance());
    out.add(new PrintString(t.image));
    out.add(PrintWhiteSpace.getInstance());
  }
  AnnotationTypeBody(out)
}

void AnnotationTypeBody(List<PrintInfo> out):
{}
{
  "{"
  {
    out.add(new PrintString("{"));
    out.add(PrintInitTab.getInstance());
    out.add(PrintIntro.getInstance());
  }
  ( AnnotationTypeMemberDeclaration(out) )*
  "}"
  {
    out.add(PrintEndTab.getInstance());
    out.add(PrintIntro.getInstance());
    out.add(new PrintString("}"));
  }
}

void AnnotationTypeMemberDeclaration(List<PrintInfo> out):
{
   int modifiers;
   Token t;
}
{
 modifiers = Modifiers(out)
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type(out) t=<IDENTIFIER> "(" ")"
   {
     out.add(new PrintString(t.image));
     out.add(new PrintString("("));
     out.add(new PrintString(")"));
   }
   [ DefaultValue(out) ] ";"
   {
     out.add(new PrintString(";"));
   }
  |
   ClassOrInterfaceDeclaration(modifiers, out)
  |
   EnumDeclaration(modifiers, out)
  |
   AnnotationTypeDeclaration(modifiers, out)
  |
   FieldDeclaration(modifiers, out)
 )
 |
   ( ";" )
}

void DefaultValue(List<PrintInfo> out):
{}
{
  "default"
  {
     out.add(new PrintString("default"));
     out.add(PrintWhiteSpace.getInstance());
  }
  MemberValue(out)
}
