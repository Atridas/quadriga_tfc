@quadriga tetris.base

//tetris.base.Main

@component cat.quadriga.base.Transform;
@component cat.quadriga.base.BoxRenderer;

@component Puntuació {
  int punts  = 0;
  int línies = 0;
  int nivell = 0;
}

@component Taulell {
  int[][] taulell = new int[10][18];
  Entity[][] cubs = new Entity[10][18];
}

@prototype Tetris {
  Transform()
  Puntuació(punts: 0)
  Taulell()
}

@prototype CubDeTaulell(int posX, int posY)
{
  Transform(position: new Vector3f(posX,posY,0))
  BoxRenderer()
}

@event InitTetris {}

@component TetrisGameComponent {
  Entity<Puntuació, Taulell> taulell;
}

@system ControladorDelJoc {
  @components {
    TetrisGameComponent
  }
}

@event InsertarPerça {
  int color;
  int[] px, py;
}

@system LlògicaTaulell {
  @components {
    Puntuació
    Taulell
  }
  
  @event InsertarPerça(
            InsertarPerça event: EVENT, 
            Entity<Puntuació, Taulell> entitat: ENTITY
            )
  {
    int linees = 0;
    int[][] taulell = entitat[Taulell].taulell;
    Entity[][] cubs = entitat[Taulell].cubs;
    for(int peça = 0; peça < 4; ++peça) {
    
      int línea = event.py[peça];
      taulell[event.px[peça]][event.py[peça]] = event.color;
      Entity nouCub = @newEntity(null,entitat);
      @prototype nouCub : CubDeTaulell(
                              posX: event.px[peça], 
                              posY: event.py[peça]);
      cubs[event.px[peça]][event.py[peça]] = nouCub;
      
      boolean netejarLinea = true;
      for(int i = 0; i < 10; ++i) {
        if(entitat[Taulell].taulell[i][event.py[peça]] == 0) {
          netejarLinea = false;
          break;
        }
      }
      if(netejarLinea) {
        for(int i = peça+1; i < 4; ++i) {
          --event.py[i];
        }
        for(int i = 0; i < 10; ++i) {
          @eraseEntity cubs[línea][i];
        }
        for(int i = línea; i < 17; ++i) {
          for(int j = 0; j < 10; ++j) {
            if(i > línea && cubs[i][j] != null) {
              Transform t = cubs[i][j][Transform];
              t.translation.y -= 1;
              cubs[i][j][Transform] = t;
            }
            taulell[i][j] = taulell[i+1][j];
          }
        }
        ++línees;
      }
    }
    
    entitat[Taulell].taulell = taulell;;
    entitat[Taulell].cubs = cubs;
    
    entitat[Puntuació].línees += línees;//TODO
    entitat[Puntuació].nivell = entitat[Puntuació].línees / 10;
    entitat[Puntuació].punts += 11;
    if(línees == 1) {
      entitat[Puntuació].punts +=  30;
    } else if(línees == 2) {
      entitat[Puntuació].punts +=  71;
    } else if(línees == 3) {
      entitat[Puntuació].punts += 111;
    } else if(línees == 4) {
      entitat[Puntuació].punts += 160;
    }
  }
}

@thread LlogicaTetris {
  @system ControladorDelJoc;
  @system LlògicaTaulell;
  
  @init {
    Entity aux = @newEntity("tetris",null);
    @prototype aux : Tetris();
    Entity e = @newEntity("principal", null); 
    
    @add TetrisGameComponent(taulell: aux) : e;
  }
}

@thread cat.quadriga.base.SimpleRenderThread

@main Main {
  @thread LlogicaTetris
  @thread SimpleRenderThread
}