//Java code

public class ShapeParams implements Serializable {
  private static final long serialVersionUID = 4969206546105395467L;
  private static Map<ShapeParams,CollisionShape> cache = new WeakHashMap<ShapeParams, CollisionShape>();
  
  public Shape shape;
  public Vector3f vecParam1;
  public float fParam1;
  
  //TODO equals hashcode
  public CollisionShape getCollisionShape() {
    CollisionShape cs = cache.get(this);
    if(cs!=null) {
      return cs;
    }
    
    switch(shape) {
    case BOX:
      cs = new BoxShape(vecParam1);
      break;
    case SPHERE:
      cs = new SphereShape(fParam1);
      break;
    default:
      return null;
    }
    
    cache.put(this, cs);
    return cs;
  }
  
  public enum Shape {
    BOX, SPHERE;
  }
}
  

///////////////////////////////


const String BULLET_CENTRAL_ENTITY = "BulletCentralEntity";

component JBulletCentral: void

component JBulletCollidable {
  shape: ShapeParams
}

event JBulletCollision {
  entityA, entityB: Entity
}
event JBulletUnCollision {
  entityA, entityB: Entity
}

system jBulletCentralSystem {
  components {
    JBulletCentral
  }

  additionalInfo {
    jBulletCollisionWorld: com.bulletphysics.collision.dispatch.CollisionWorld
    jBulletDispatcher: com.bulletphysics.collision.dispatch.Dispatcher
    prevCollisions: Set<Pair<Entity,Entity>>
    collisionCache: Set<Pair<Entity,Entity>>
  }
  
  onNewEntity() {
    if(Entity.getAllEntitiesWith(JBulletCentral).size() > 1) {
      throw new IllegalStateException("Only one JBulletCentral entity is permitted");
    }
    
    entity[prevCollisions] = new Set<Pair<Entity,Entity>>();
    entity[collisionCache] = new Set<Pair<Entity,Entity>>();
    
    CollisionConfiguration collisionConfiguration = new DefaultCollisionConfiguration();
    entity[jBulletDispatcher] = new CollisionDispatcher(collisionConfiguration) 
    BroadphaseInterface broadphasePairCache = new DbvtBroadphase();
    
    entity[jBulletCollisionWorld] = new CollisionWorld(entity[jBulletDispatcher], broadphasePairCache, collisionConfiguration) 
  }
  
  update() {
    entity[jBulletCollisionWorld].performDiscreteCollisionDetection();
    
    //entity[collisionCache].clear();
    
    int numManifolds = entity[jBulletDispatcher].getNumManifolds();
    for(int i = 0; i < numManifolds; i++)
    {
      PersistentManifold contactManifold = entity[jBulletDispatcher].getManifoldByIndexInternal(i);
      CollisionObject objectA = (CollisionObject) contactManifold.getBody0();
      CollisionObject objectB = (CollisionObject) contactManifold.getBody1();
      
      Entity entityA = objectA.getUserPointer(),
      Entity entityB = objectB.getUserPointer()
      if(entityA.getId() > entityB.getId())
      {
        //swap, sempre A < B
        Entity aux = entityA;
        entityA = entityB;
        entityB = aux;
      }
      
      Pair<Entity,Entity> parella = new Pair<Entity,Entity>(entityA,entityB);
      
      if(!entity[prevCollisions].contains(parella)) {   
        throw new JBulletUnCollision( entityA, entityB );
      }
      entity[collisionCache].add(parella);
    }
    
    for(Pair<Entity, Entity> removed: entity[prevCollisions].removeAll(entity[collisionCache])) {
      throw new JBulletCollision( removed.entityA, removed.entityB );
    }
    
    Set<Pair<Entity,Entity>> auxiliarSet = entity[prevCollisions];
    entity[prevCollisions] = entity[collisionCache];
    entity[collisionCache] = auxiliarSet;
    entity[collisionCache].clear();
  }
}

system jBulletCollisionSystem {
  components {
    JBulletCollidable
    Transform
  }
  
  additionalInfo {
    jBulletCollisionObject: CollisionObject
  }
  
  externInfo {
    jBulletCollisionWorld: jBulletCollisionSystem.jBulletCollisionWorld
  }
  
  onNewEntity {
    CollisionWorld collisionWorld = Entity.getFromName(BULLET_CENTRAL_ENTITY)[jBulletCollisionWorld];
    
    
    entity[jBulletCollisionObject] = new CollisionObject();
    
    entity[jBulletCollisionObject].setCollisionShape(entity[JBulletCollidable].shape.getCollisionShape());
    
    Transform transform = Utils.getJBulletTransform(entity[Transform].position,entity[Transform].rotation,entity[Transform].scale);
    entity[jBulletCollisionObject].setWorldTransform(transform);
    
    entity[jBulletCollisionObject].setUserPointer(entity);
    
    collisionWorld.addCollisionObject(entity[jBulletCollisionObject]);
  }
  
  onChange {
    if( entity[JBulletCollidable].hasChanged() ) {
      entity[jBulletCollisionObject].setCollisionShape(entity[JBulletCollidable].shape.getCollisionShape());
    }
    if( entity[Transform].hasChanged() ) {
      Transform transform = Utils.getJBulletTransform(entity[Transform].position,entity[Transform].rotation,entity[Transform].scale);
      entity[jBulletCollisionObject].setWorldTransform(transform);
    }
  }
  
  onEraseEntity {
    CollisionWorld collisionWorld = Entity.getFromName(BULLET_CENTRAL_ENTITY)[jBulletCollisionWorld];
  
    collisionWorld.removeCollisionObject(entity[jBulletCollisionObject]);
  }
}