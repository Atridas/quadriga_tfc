package cat.quadriga.parsers;
import java.io.*;import java.util.*;import cat.quadriga.parsers.code.*;import cat.quadriga.parsers.code.expressions.*;import cat.quadriga.parsers.code.expressions.dataaccess.*;import cat.quadriga.parsers.code.printers.*;import cat.quadriga.parsers.code.proxy.*;import cat.quadriga.parsers.code.statements.*;import cat.quadriga.parsers.code.symbols.*;import cat.quadriga.parsers.code.types.*;
@ ()public class QuadrigaSimple implements {
  static public final class ModifierSet {
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public static final I ;
    public Z isPublic
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isProtected
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isPrivate
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isStatic
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isAbstract
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isFinal
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isNative
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isStrictfp
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isSynchronized
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isTransient
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    public Z isVolatile
    Params
    modifiers: I
    Block:
    +- Code:
       +- return
          +- Op: != {Z}
             +- Op: & {I}
             |  +- Op: Local variable access: modifiers {I}
             |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
             +- Op: Literal {I}
                +- Integer: 0
    static I removeModifier
    Params
    modifiers: I
    mod: I
    Block:
    +- Code:
       +- return
          +- Op: & {I}
             +- Op: Local variable access: modifiers {I}
             +- Op: ~ {I}
                +- Op: Local variable access: mod {I}
    
  }
  
  private I ;
  private I getNewId
  Params
  Block:
  +- Code:
     +- return
        +- Op: X++ {#unknown#}
           +- Op: >> Proxy Data Access [ id ] << {#unknown#}
  private Lcat/quadriga/parsers/code/ErrorLog; ;
  private Lcat/quadriga/parsers/code/symbols/SymbolTable; ;
  private Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode; ;
  public QuadrigaSimple
  Params
  fileName: Ljava/lang/String;
  {
    this;
    try
    +- Block:
    |  +- Code:
    |     +- St: Proxy Call
    |        +- Op: >> Proxy Data Access [ ReInit ] << {#unknown#}
    |        +- Arguments
    |           +- Op: Constructor {Ljava/io/FileInputStream;}
    |              +- Ljava/io/FileInputStream;
    |              +- Arguments
    |                 +- Op: Constructor {Ljava/io/File;}
    |                    +- Ljava/io/File;
    |                    +- Arguments
    |                       +- Op: Local variable access: fileName {Ljava/lang/String;}
    +- catch {Local var "e" {Ljava/lang/Exception;}}
       +- Block:
          +- Code:
             +- St: Call
                +- Op: Method:
                |  +- java.lang.Throwable -> printStackTrace
                |  +- Op: Local variable access: e {Ljava/lang/Exception;}
                +- No Arguments
  }
  public static main
  Params
  args: [Ljava/lang/String;
  Block:
  +- Local Variables:
  |  +- Symbol Var [ parser ] Type [ Lcat/quadriga/parsers/QuadrigaSimple; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: == {Z}
     |  |     +- Op: Array Length {I}
     |  |     |  +- Op: Local variable access: args {[Ljava/lang/String;}
     |  |     +- Op: Literal {I}
     |  |        +- Integer: 0
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: Call
     |  |        |  +- Op: Method:
     |  |        |  |  +- java.io.PrintStream -> println
     |  |        |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |  |        |  |     +- java.lang.System -> out
     |  |        |  +- Arguments
     |  |        |     +- Op: Literal {Ljava/lang/String;}
     |  |        |        +- String: "Java Parser Version 1.1:  Reading from standard input . . ."
     |  |        +- St: =
     |  |           +- Op: Local variable access: parser {Lcat/quadriga/parsers/QuadrigaSimple;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/QuadrigaSimple;}
     |  |              +- Lcat/quadriga/parsers/QuadrigaSimple;
     |  |              +- Arguments
     |  |                 +- Op: Static Field: {Ljava/io/InputStream;}
     |  |                    +- java.lang.System -> in
     |  +- Else Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: == {Z}
     |        |     +- Op: Array Length {I}
     |        |     |  +- Op: Local variable access: args {[Ljava/lang/String;}
     |        |     +- Op: Literal {I}
     |        |        +- Integer: 1
     |        +- If Code:
     |        |  +- Block:
     |        |     +- Code:
     |        |        +- St: Call
     |        |        |  +- Op: Method:
     |        |        |  |  +- java.io.PrintStream -> println
     |        |        |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |        |        |  |     +- java.lang.System -> out
     |        |        |  +- Arguments
     |        |        |     +- Op: + {#unknown#}
     |        |        |        +- Op: + {#unknown#}
     |        |        |        |  +- Op: Literal {Ljava/lang/String;}
     |        |        |        |  |  +- String: "Java Parser Version 1.1:  Reading from file "
     |        |        |        |  +- Op: Array Access {Ljava/lang/String;}
     |        |        |        |     +- Op: Local variable access: args {[Ljava/lang/String;}
     |        |        |        |     +- Op: Literal {I}
     |        |        |        |        +- Integer: 0
     |        |        |        +- Op: Literal {Ljava/lang/String;}
     |        |        |           +- String: " . . ."
     |        |        +- try
     |        |           +- Block:
     |        |           |  +- Code:
     |        |           |     +- St: =
     |        |           |        +- Op: Local variable access: parser {Lcat/quadriga/parsers/QuadrigaSimple;}
     |        |           |        +- Op: Constructor {Lcat/quadriga/parsers/QuadrigaSimple;}
     |        |           |           +- Lcat/quadriga/parsers/QuadrigaSimple;
     |        |           |           +- Arguments
     |        |           |              +- Op: Invalid Constructor {#unknown java.io.FileInputStream #}
     |        |           |              |  +- #unknown java.io.FileInputStream #
     |        |           |              |  +- Arguments
     |        |           |              |     +- Op: Array Access {Ljava/lang/String;}
     |        |           |              |        +- Op: Local variable access: args {[Ljava/lang/String;}
     |        |           |              |        +- Op: Literal {I}
     |        |           |              |           +- Integer: 0
     |        |           |              +- Op: Literal {Ljava/lang/String;}
     |        |           |                 +- String: "UTF-8"
     |        |           +- catch {Local var "e" {#unknown java.io.FileNotFoundException #}}
     |        |              +- Block:
     |        |                 +- Code:
     |        |                    +- St: Call
     |        |                    |  +- Op: Method:
     |        |                    |  |  +- java.io.PrintStream -> println
     |        |                    |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |        |                    |  |     +- java.lang.System -> out
     |        |                    |  +- Arguments
     |        |                    |     +- Op: + {#unknown#}
     |        |                    |        +- Op: + {#unknown#}
     |        |                    |        |  +- Op: Literal {Ljava/lang/String;}
     |        |                    |        |  |  +- String: "Java Parser Version 1.1:  File "
     |        |                    |        |  +- Op: Array Access {Ljava/lang/String;}
     |        |                    |        |     +- Op: Local variable access: args {[Ljava/lang/String;}
     |        |                    |        |     +- Op: Literal {I}
     |        |                    |        |        +- Integer: 0
     |        |                    |        +- Op: Literal {Ljava/lang/String;}
     |        |                    |           +- String: " not found."
     |        |                    +- return
     |        +- Else Code:
     |           +- Block:
     |              +- Code:
     |                 +- St: Call
     |                 |  +- Op: Method:
     |                 |  |  +- java.io.PrintStream -> println
     |                 |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |                 |  |     +- java.lang.System -> out
     |                 |  +- Arguments
     |                 |     +- Op: Literal {Ljava/lang/String;}
     |                 |        +- String: "Java Parser Version 1.1:  Usage is one of:"
     |                 +- St: Call
     |                 |  +- Op: Method:
     |                 |  |  +- java.io.PrintStream -> println
     |                 |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |                 |  |     +- java.lang.System -> out
     |                 |  +- Arguments
     |                 |     +- Op: Literal {Ljava/lang/String;}
     |                 |        +- String: "         java JavaParser < inputfile"
     |                 +- St: Call
     |                 |  +- Op: Method:
     |                 |  |  +- java.io.PrintStream -> println
     |                 |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |                 |  |     +- java.lang.System -> out
     |                 |  +- Arguments
     |                 |     +- Op: Literal {Ljava/lang/String;}
     |                 |        +- String: "OR"
     |                 +- St: Call
     |                 |  +- Op: Method:
     |                 |  |  +- java.io.PrintStream -> println
     |                 |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
     |                 |  |     +- java.lang.System -> out
     |                 |  +- Arguments
     |                 |     +- Op: Literal {Ljava/lang/String;}
     |                 |        +- String: "         java JavaParser inputfile"
     |                 +- return
     +- try
        +- Block:
        |  +- Local Variables:
        |  |  +- Symbol Var [ info ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
        |  |  +- Symbol Var [ mp ] Type [ Lcat/quadriga/parsers/code/printers/MegaPrinter; ]
        |  +- Code:
        |     +- Statements:
        |     |  +- St: =
        |     |     +- Op: Local variable access: info {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |     |     +- Op: Call {Ljava/util/List;}
        |     |        +- Op: Method:
        |     |        |  +- cat.quadriga.parsers.QuadrigaSimple -> CompilationUnit
        |     |        |  +- Op: Local variable access: parser {Lcat/quadriga/parsers/QuadrigaSimple;}
        |     |        +- No Arguments
        |     +- St: Call
        |     |  +- Op: Method:
        |     |  |  +- java.io.PrintStream -> println
        |     |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
        |     |  |     +- java.lang.System -> out
        |     |  +- Arguments
        |     |     +- Op: Literal {Ljava/lang/String;}
        |     |        +- String: "Java Parser Version 1.1:  Java program parsed successfully."
        |     +- Statements:
        |     |  +- St: =
        |     |     +- Op: Local variable access: mp {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
        |     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
        |     |        +- Op: Static Method:
        |     |        |  +- cat.quadriga.parsers.code.printers.MegaPrinter -> getInstance
        |     |        +- No Arguments
        |     +- St: Call
        |     |  +- Op: Method:
        |     |  |  +- java.io.PrintStream -> println
        |     |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
        |     |  |     +- java.lang.System -> out
        |     |  +- Arguments
        |     |     +- Op: Call {Ljava/lang/String;}
        |     |        +- Op: Method:
        |     |        |  +- cat.quadriga.parsers.code.printers.MegaPrinter -> print
        |     |        |  +- Op: Local variable access: mp {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
        |     |        +- Arguments
        |     |           +- Op: Local variable access: info {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |     +- St: Call
        |        +- Op: Method:
        |        |  +- cat.quadriga.parsers.code.printers.MegaPrinter -> printToFile
        |        |  +- Op: Local variable access: mp {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
        |        +- Arguments
        |           +- Op: Local variable access: info {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |           +- Op: Literal {Ljava/lang/String;}
        |              +- String: "out.java"
        +- catch {Local var "e" {Lcat/quadriga/parsers/ParseException;}}
           +- Block:
              +- Code:
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.io.PrintStream -> println
                 |  |  +- Op: Static Field: {Ljava/io/PrintStream;}
                 |  |     +- java.lang.System -> out
                 |  +- Arguments
                 |     +- Op: Call {Ljava/lang/String;}
                 |        +- Op: Method:
                 |        |  +- java.lang.Throwable -> getMessage
                 |        |  +- Op: Local variable access: e {Lcat/quadriga/parsers/ParseException;}
                 |        +- No Arguments
                 +- St: Call
                    +- Op: Method:
                    |  +- java.io.PrintStream -> println
                    |  +- Op: Static Field: {Ljava/io/PrintStream;}
                    |     +- java.lang.System -> out
                    +- Arguments
                       +- Op: Literal {Ljava/lang/String;}
                          +- String: "Java Parser Version 1.1:  Encountered errors during parse."
  final public Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; CompilationUnit
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_1 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ PackageDeclaration ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        +- St: Call
     |  |           +- Op: Method:
     |  |           |  +- java.util.List -> add
     |  |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |           +- Arguments
     |  |              +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |  |                 +- Op: Static Method:
     |  |                 |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |  |                 +- No Arguments
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: No operation
     +- LABEL: label_1
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IMPORT ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_1
     |           +- St: Proxy Call
     |              +- Op: >> Proxy Data Access [ ImportDeclaration ] << {#unknown#}
     |              +- Arguments
     |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_2
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |           |        +- Op: Static Method:
     |           |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |           |        +- No Arguments
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ TypeDeclaration ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |              |  +- St: No operation
     |              |  +- Proxy break
     |              +- default
     |                 +- Proxy break: label_2
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: Literal {I}
     |  |  |  +- Integer: 128
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 128
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STUFF_TO_IGNORE ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ STUFF_TO_IGNORE ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Literal {I}
     |        +- Integer: 0
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public PackageDeclaration
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ tokens ] Type [ Ljava/util/List<Lcat/quadriga/parsers/Token;>; ]
  |  +- Symbol Var [ aux ] Type [ Ljava/lang/String; ]
  +- Code:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ PACKAGE ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: aux {Ljava/lang/String;}
     |     +- Op: >> Proxy Data Access [ image ] << {#unknown#}
     |        +- Op: Call {Ljava/lang/Object;}
     |           +- Op: Method:
     |           |  +- java.util.List -> get
     |           |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |           +- Arguments
     |              +- Op: Literal {I}
     |                 +- Integer: 0
     +- for
     |  +- Local Variables:
     |  |  +- Symbol Var [ i ] Type [ I ]
     |  +- Statements:
     |  |  +- St: =
     |  |     +- Op: Local variable access: i {I}
     |  |     +- Op: Literal {I}
     |  |        +- Integer: 1
     |  +- Op: < {Z}
     |  |  +- Op: Local variable access: i {I}
     |  |  +- Op: Call {I}
     |  |     +- Op: Method:
     |  |     |  +- java.util.List -> size
     |  |     |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  |     +- No Arguments
     |  +- Statements:
     |  |  +- St: ++X
     |  |     +- Op: Local variable access: i {I}
     |  +- Block:
     |     +- Code:
     |        +- St: +=
     |           +- Op: Local variable access: aux {Ljava/lang/String;}
     |           +- Op: + {#unknown#}
     |              +- Op: Literal {Ljava/lang/String;}
     |              |  +- String: "."
     |              +- Op: >> Proxy Data Access [ image ] << {#unknown#}
     |                 +- Op: Call {Ljava/lang/Object;}
     |                    +- Op: Method:
     |                    |  +- java.util.List -> get
     |                    |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |                    +- Arguments
     |                       +- Op: Local variable access: i {I}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.addPackage ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: aux {Ljava/lang/String;}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: + {#unknown#}
                    +- Op: + {#unknown#}
                    |  +- Op: Literal {Ljava/lang/String;}
                    |  |  +- String: "package "
                    |  +- Op: Local variable access: aux {Ljava/lang/String;}
                    +- Op: Literal {Ljava/lang/String;}
                       +- String: ";"
  final public ImportDeclaration
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ stat ] Type [ Z ]
  |  +- Symbol Var [ tokens ] Type [ Ljava/util/List<Lcat/quadriga/parsers/Token;>; ]
  |  +- Symbol Var [ aux ] Type [ Ljava/lang/String; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: stat {Z}
     |     +- Op: Literal {Z}
     |        +- Boolean: false
     +- Statements:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ IMPORT ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: stat {Z}
     |  |  |  +- Op: Literal {Z}
     |  |  |     +- Boolean: true
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |     +- No Arguments
     +- St: =
     |  +- Op: Local variable access: aux {Ljava/lang/String;}
     |  +- Op: >> Proxy Data Access [ image ] << {#unknown#}
     |     +- Op: Call {Ljava/lang/Object;}
     |        +- Op: Method:
     |        |  +- java.util.List -> get
     |        |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |        +- Arguments
     |           +- Op: Literal {I}
     |              +- Integer: 0
     +- for
     |  +- Local Variables:
     |  |  +- Symbol Var [ i ] Type [ I ]
     |  +- Statements:
     |  |  +- St: =
     |  |     +- Op: Local variable access: i {I}
     |  |     +- Op: Literal {I}
     |  |        +- Integer: 1
     |  +- Op: < {Z}
     |  |  +- Op: Local variable access: i {I}
     |  |  +- Op: Call {I}
     |  |     +- Op: Method:
     |  |     |  +- java.util.List -> size
     |  |     |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  |     +- No Arguments
     |  +- Statements:
     |  |  +- St: ++X
     |  |     +- Op: Local variable access: i {I}
     |  +- Block:
     |     +- Code:
     |        +- St: +=
     |           +- Op: Local variable access: aux {Ljava/lang/String;}
     |           +- Op: + {#unknown#}
     |              +- Op: Literal {Ljava/lang/String;}
     |              |  +- String: "."
     |              +- Op: >> Proxy Data Access [ image ] << {#unknown#}
     |                 +- Op: Call {Ljava/lang/Object;}
     |                    +- Op: Method:
     |                    |  +- java.util.List -> get
     |                    |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |                    +- Arguments
     |                       +- Op: Local variable access: i {I}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ STAR ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ symbolTable.addPackage ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: aux {Ljava/lang/String;}
     |  |  +- St: +=
     |  |  |  +- Op: Local variable access: aux {Ljava/lang/String;}
     |  |  |  +- Op: Literal {Ljava/lang/String;}
     |  |  |     +- String: ".*"
     |  |  +- Proxy break
     |  +- default
     |     +- try
     |        +- Block:
     |        |  +- Local Variables:
     |        |  |  +- Symbol Var [ clazz ] Type [ Ljava/lang/Class<*>; ]
     |        |  |  +- Symbol Var [ symbol ] Type [ Lcat/quadriga/parsers/code/symbols/BaseSymbol; ]
     |        |  +- Code:
     |        |     +- Statements:
     |        |     |  +- St: =
     |        |     |     +- Op: Local variable access: clazz {Ljava/lang/Class<*>;}
     |        |     |     +- Op: Call {Ljava/lang/Class;}
     |        |     |        +- Op: Static Method:
     |        |     |        |  +- java.lang.Class -> forName
     |        |     |        +- Arguments
     |        |     |           +- Op: Local variable access: aux {Ljava/lang/String;}
     |        |     +- Statements:
     |        |     |  +- St: =
     |        |     |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |        |     |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/TypeSymbol;}
     |        |     |        +- Lcat/quadriga/parsers/code/symbols/TypeSymbol;
     |        |     |        +- Arguments
     |        |     |           +- Op: Call {Lcat/quadriga/parsers/code/types/ClassOrInterfaceTypeRef;}
     |        |     |              +- Op: Static Method:
     |        |     |              |  +- cat.quadriga.parsers.code.types.ClassOrInterfaceTypeRef -> getFromClass
     |        |     |              +- Arguments
     |        |     |                 +- Op: Local variable access: clazz {Ljava/lang/Class<*>;}
     |        |     +- St: Proxy Call
     |        |        +- Op: >> Proxy Data Access [ symbolTable.addGlobalSymbol ] << {#unknown#}
     |        |        +- Arguments
     |        |           +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |        +- catch {Local var "e" {Ljava/lang/ClassNotFoundException;}}
     |           +- Block:
     |              +- Local Variables:
     |              |  +- Symbol Var [ symbol ] Type [ Lcat/quadriga/parsers/code/symbols/BaseSymbol; ]
     |              +- Code:
     |                 +- Statements:
     |                 |  +- St: =
     |                 |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |                 |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/TypeSymbol;}
     |                 |        +- Lcat/quadriga/parsers/code/symbols/TypeSymbol;
     |                 |        +- Arguments
     |                 |           +- Op: Static Field: {Lcat/quadriga/parsers/code/types/UnknownType;}
     |                 |              +- cat.quadriga.parsers.code.types.UnknownType -> empty
     |                 +- St: Proxy Call
     |                    +- Op: >> Proxy Data Access [ symbolTable.addGlobalSymbol ] << {#unknown#}
     |                    +- Arguments
     |                       +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: + {#unknown#}
                    +- Op: + {#unknown#}
                    |  +- Op: Literal {Ljava/lang/String;}
                    |  |  +- String: "import "
                    |  +- Op: Local variable access: aux {Ljava/lang/String;}
                    +- Op: Literal {Ljava/lang/String;}
                       +- String: ";"
  final public I Modifiers
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ modifiers ] Type [ I ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: modifiers {I}
     |     +- Op: Literal {I}
     |        +- Integer: 0
     +- LABEL: label_3
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |           |  +- Condition:
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |     +- Op: >> Proxy Data Access [ jj_2_2 ] << {#unknown#}
     |           |  |     +- Arguments
     |           |  |        +- Op: Literal {I}
     |           |  |           +- Integer: 2
     |           |  +- If Code:
     |           |  |  +- Block:
     |           |  |     +- Code:
     |           |  |        +- St: No operation
     |           |  +- Else Code:
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- Proxy break: label_3
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.PUBLIC ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "public"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.STATIC ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "static"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.PROTECTED ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "protected"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.PRIVATE ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "private"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.FINAL ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "final"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.ABSTRACT ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "abstract"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.SYNCHRONIZED ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "synchronized"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.NATIVE ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "native"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.TRANSIENT ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "transient"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.VOLATILE ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "volatile"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |              |  +- St: |=
     |              |  |  +- Op: Local variable access: modifiers {I}
     |              |  |  +- Op: >> Proxy Data Access [ ModifierSet.STRICTFP ] << {#unknown#}
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |              |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |              |  |        +- Arguments
     |              |  |           +- Op: Literal {Ljava/lang/String;}
     |              |  |              +- String: "strictfp"
     |              |  +- St: Call
     |              |  |  +- Op: Method:
     |              |  |  |  +- java.util.List -> add
     |              |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  +- Arguments
     |              |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |              |  |        +- Op: Static Method:
     |              |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |              |  |        +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ Annotation ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: modifiers {I}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public TypeDeclaration
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ modifiers ] Type [ I ]
  +- Code:
     +- Statements:
     +- switch
        +- Op: ? {#unknown#}
        |  +- Op: == {Z}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- Op: - {I}
        |  |     +- Op: Literal {I}
        |  |        +- Integer: 1
        |  +- Op: Proxy Call {#unknown#}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
        |  +- St: Call
        |  |  +- Op: Method:
        |  |  |  +- java.util.List -> add
        |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  +- Arguments
        |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
        |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
        |  |        +- Arguments
        |  |           +- Op: Literal {Ljava/lang/String;}
        |  |              +- String: ";"
        |  +- St: Call
        |  |  +- Op: Method:
        |  |  |  +- java.util.List -> add
        |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  +- Arguments
        |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
        |  |        +- Op: Static Method:
        |  |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
        |  |        +- No Arguments
        |  +- Proxy break
        +- case
        |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
        |  +- St: =
        |  |  +- Op: Local variable access: modifiers {I}
        |  |  +- Op: Proxy Call {#unknown#}
        |  |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
        |  |     +- Arguments
        |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- switch
        |  |  +- Op: ? {#unknown#}
        |  |  |  +- Op: == {Z}
        |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  |  |  +- Op: - {I}
        |  |  |  |     +- Op: Literal {I}
        |  |  |  |        +- Integer: 1
        |  |  |  +- Op: Proxy Call {#unknown#}
        |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  |  |  +- No Arguments
        |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- case
        |  |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
        |  |  +- case
        |  |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
        |  |  |  +- St: Proxy Call
        |  |  |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceDeclaration ] << {#unknown#}
        |  |  |  |  +- Arguments
        |  |  |  |     +- Op: Local variable access: modifiers {I}
        |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |  +- Proxy break
        |  |  +- case
        |  |  |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
        |  |  |  +- St: Proxy Call
        |  |  |  |  +- Op: >> Proxy Data Access [ EnumDeclaration ] << {#unknown#}
        |  |  |  |  +- Arguments
        |  |  |  |     +- Op: Local variable access: modifiers {I}
        |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |  +- Proxy break
        |  |  +- case
        |  |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
        |  |  |  +- St: Proxy Call
        |  |  |  |  +- Op: >> Proxy Data Access [ AnnotationTypeDeclaration ] << {#unknown#}
        |  |  |  |  +- Arguments
        |  |  |  |     +- Op: Local variable access: modifiers {I}
        |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |  +- Proxy break
        |  |  +- default
        |  |     +- St: Proxy Call
        |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |     |  +- Arguments
        |  |     |     +- Op: - {I}
        |  |     |        +- Op: Literal {I}
        |  |     |           +- Integer: 1
        |  |     +- throw
        |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
        |  |           +- Lcat/quadriga/parsers/ParseException;
        |  |           +- No Arguments
        |  +- Proxy break
        +- default
           +- St: Proxy Call
           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
           |  +- Arguments
           |     +- Op: - {I}
           |        +- Op: Literal {I}
           |           +- Integer: 1
           +- throw
              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                 +- Lcat/quadriga/parsers/ParseException;
                 +- No Arguments
  final public ClassOrInterfaceDeclaration
  Params
  modifiers: I
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ isInterface ] Type [ Z ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: isInterface {Z}
     |     +- Op: Literal {Z}
     |        +- Boolean: false
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: isInterface {Z}
     |  |  |  +- Op: Literal {Z}
     |  |  |     +- Boolean: true
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: ? {Ljava/lang/String;}
     |              +- Op: Local variable access: isInterface {Z}
     |              +- Op: Literal {Ljava/lang/String;}
     |              |  +- String: "interface"
     |              +- Op: Literal {Ljava/lang/String;}
     |                 +- String: "class"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ TypeParameters ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ ExtendsList ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: isInterface {Z}
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IMPLEMENTS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ ImplementsList ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: isInterface {Z}
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ ClassOrInterfaceBody ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: isInterface {Z}
           +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public ExtendsList
  Params
  isInterface: Z
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ extendsMoreThanOne ] Type [ Z ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: extendsMoreThanOne {Z}
     |     +- Op: Literal {Z}
     |        +- Boolean: false
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "extends"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_4
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_4
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |           |        +- Arguments
     |           |           +- Op: Literal {Ljava/lang/String;}
     |           |              +- String: ","
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |           |        +- Op: Static Method:
     |           |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |           |        +- No Arguments
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           +- St: =
     |              +- Op: Local variable access: extendsMoreThanOne {Z}
     |              +- Op: Literal {Z}
     |                 +- Boolean: true
     +- If Statement:
        +- Condition:
        |  +- Op: && {Z}
        |     +- Op: Local variable access: extendsMoreThanOne {Z}
        |     +- Op: ! {Z}
        |        +- Op: Local variable access: isInterface {Z}
        +- If Code:
           +- Block:
              +- Code:
                 +- If Statement:
                    +- Condition:
                    |  +- Op: Literal {Z}
                    |     +- Boolean: true
                    +- If Code:
                       +- throw
                          +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                             +- Lcat/quadriga/parsers/ParseException;
                             +- Arguments
                                +- Op: Literal {Ljava/lang/String;}
                                   +- String: "A class cannot extend more than one other class"
  final public ImplementsList
  Params
  isInterface: Z
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ IMPLEMENTS ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "implements"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_5
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_5
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |           |        +- Arguments
     |           |           +- Op: Literal {Ljava/lang/String;}
     |           |              +- String: ","
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |           |        +- Op: Static Method:
     |           |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |           |        +- No Arguments
     |           +- St: Proxy Call
     |              +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |              +- Arguments
     |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- If Statement:
        +- Condition:
        |  +- Op: Local variable access: isInterface {Z}
        +- If Code:
           +- Block:
              +- Code:
                 +- If Statement:
                    +- Condition:
                    |  +- Op: Literal {Z}
                    |     +- Boolean: true
                    +- If Code:
                       +- throw
                          +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                             +- Lcat/quadriga/parsers/ParseException;
                             +- Arguments
                                +- Op: Literal {Ljava/lang/String;}
                                   +- String: "An interface cannot implement other interfaces"
  final public EnumDeclaration
  Params
  modifiers: I
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "enum"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IMPLEMENTS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ ImplementsList ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: false
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |        +- Op: Static Method:
     |  |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |        +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ EnumBody ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public EnumBody
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "{"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ EnumConstant ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- LABEL: label_6
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- If Statement:
     |  |  |           |  +- Condition:
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |     +- Op: >> Proxy Data Access [ jj_2_3 ] << {#unknown#}
     |  |  |           |  |     +- Arguments
     |  |  |           |  |        +- Op: Literal {I}
     |  |  |           |  |           +- Integer: 2
     |  |  |           |  +- If Code:
     |  |  |           |  |  +- Block:
     |  |  |           |  |     +- Code:
     |  |  |           |  |        +- St: No operation
     |  |  |           |  +- Else Code:
     |  |  |           |     +- Block:
     |  |  |           |        +- Code:
     |  |  |           |           +- Proxy break: label_6
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           +- St: Call
     |  |  |           |  +- Op: Method:
     |  |  |           |  |  +- java.util.List -> add
     |  |  |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |           |        +- Arguments
     |  |  |           |           +- Op: Literal {Ljava/lang/String;}
     |  |  |           |              +- String: ","
     |  |  |           +- St: Call
     |  |  |           |  +- Op: Method:
     |  |  |           |  |  +- java.util.List -> add
     |  |  |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |           |        +- Op: Static Method:
     |  |  |           |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |           |        +- No Arguments
     |  |  |           +- St: Proxy Call
     |  |  |              +- Op: >> Proxy Data Access [ EnumConstant ] << {#unknown#}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  |  +- LABEL: label_7
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- switch
     |  |  |           |  +- Op: ? {#unknown#}
     |  |  |           |  |  +- Op: == {Z}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- Op: - {I}
     |  |  |           |  |  |     +- Op: Literal {I}
     |  |  |           |  |  |        +- Integer: 1
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- No Arguments
     |  |  |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  |  |           |  |  +- St: No operation
     |  |  |           |  |  +- Proxy break
     |  |  |           |  +- default
     |  |  |           |     +- Proxy break: label_7
     |  |  |           +- St: Call
     |  |  |           |  +- Op: Method:
     |  |  |           |  |  +- java.util.List -> add
     |  |  |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |  |  |           |        +- Op: Static Method:
     |  |  |           |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |  |  |           |        +- No Arguments
     |  |  |           +- St: Proxy Call
     |  |  |              +- Op: >> Proxy Data Access [ ClassOrInterfaceBodyDeclaration ] << {#unknown#}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Literal {Z}
     |  |  |                 |  +- Boolean: false
     |  |  |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: "}"
  final public EnumConstant
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ Arguments ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
        +- Op: ? {#unknown#}
        |  +- Op: == {Z}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- Op: - {I}
        |  |     +- Op: Literal {I}
        |  |        +- Integer: 1
        |  +- Op: Proxy Call {#unknown#}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceBody ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: Literal {Z}
        |  |     |  +- Boolean: false
        |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- Proxy break
        +- default
           +- St: No operation
  final public TypeParameters
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "<"
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ TypeParameter ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_8
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_8
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |           |        +- Arguments
     |           |           +- Op: Literal {Ljava/lang/String;}
     |           |              +- String: ","
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |           |        +- Op: Static Method:
     |           |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |           |        +- No Arguments
     |           +- St: Proxy Call
     |              +- Op: >> Proxy Data Access [ TypeParameter ] << {#unknown#}
     |              +- Arguments
     |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: ">"
  final public TypeParameter
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- switch
        +- Op: ? {#unknown#}
        |  +- Op: == {Z}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- Op: - {I}
        |  |     +- Op: Literal {I}
        |  |        +- Integer: 1
        |  +- Op: Proxy Call {#unknown#}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
        |  +- St: Call
        |  |  +- Op: Method:
        |  |  |  +- java.util.List -> add
        |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  +- Arguments
        |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
        |  |        +- Op: Static Method:
        |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
        |  |        +- No Arguments
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ TypeBound ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- Proxy break
        +- default
           +- St: No operation
  final public TypeBound
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "extends"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_9
        +- while
           +- Op: Literal {Z}
           |  +- Boolean: true
           +- Block:
              +- Code:
                 +- switch
                 |  +- Op: ? {#unknown#}
                 |  |  +- Op: == {Z}
                 |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  |  |  +- Op: - {I}
                 |  |  |     +- Op: Literal {I}
                 |  |  |        +- Integer: 1
                 |  |  +- Op: Proxy Call {#unknown#}
                 |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  |  |  +- No Arguments
                 |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  +- case
                 |  |  +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
                 |  |  +- St: No operation
                 |  |  +- Proxy break
                 |  +- default
                 |     +- Proxy break: label_9
                 +- St: Proxy Call
                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                 |  +- Arguments
                 |     +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.util.List -> add
                 |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                 |  +- Arguments
                 |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
                 |        +- Op: Static Method:
                 |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
                 |        +- No Arguments
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.util.List -> add
                 |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                 |  +- Arguments
                 |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
                 |        +- Lcat/quadriga/parsers/code/printers/PrintString;
                 |        +- Arguments
                 |           +- Op: Literal {Ljava/lang/String;}
                 |              +- String: "&"
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.util.List -> add
                 |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                 |  +- Arguments
                 |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
                 |        +- Op: Static Method:
                 |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
                 |        +- No Arguments
                 +- St: Proxy Call
                    +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
                    +- Arguments
                       +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public ClassOrInterfaceBody
  Params
  isInterface: Z
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "{"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- LABEL: label_10
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_10
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ ClassOrInterfaceBodyDeclaration ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: Local variable access: isInterface {Z}
     |           |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              +- Arguments
     |                 +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |                    +- Op: Static Method:
     |                    |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |                    +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "}"
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
              +- Op: Static Method:
              |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
              +- No Arguments
  final public ClassOrInterfaceBodyDeclaration
  Params
  isInterface: Z
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ isNestedInterface ] Type [ Z ]
  |  +- Symbol Var [ modifiers ] Type [ I ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: isNestedInterface {Z}
     |     +- Op: Literal {Z}
     |        +- Boolean: false
     +- Statements:
     +- If Statement:
        +- Condition:
        |  +- Op: Proxy Call {#unknown#}
        |     +- Op: >> Proxy Data Access [ jj_2_6 ] << {#unknown#}
        |     +- Arguments
        |        +- Op: Literal {I}
        |           +- Integer: 2
        +- If Code:
        |  +- Block:
        |     +- Code:
        |        +- St: Proxy Call
        |        |  +- Op: >> Proxy Data Access [ Initializer ] << {#unknown#}
        |        |  +- Arguments
        |        |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |        +- If Statement:
        |           +- Condition:
        |           |  +- Op: Local variable access: isInterface {Z}
        |           +- If Code:
        |              +- Block:
        |                 +- Code:
        |                    +- If Statement:
        |                       +- Condition:
        |                       |  +- Op: Literal {Z}
        |                       |     +- Boolean: true
        |                       +- If Code:
        |                          +- throw
        |                             +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
        |                                +- Lcat/quadriga/parsers/ParseException;
        |                                +- Arguments
        |                                   +- Op: Literal {Ljava/lang/String;}
        |                                      +- String: "An interface cannot have initializers"
        +- Else Code:
           +- Block:
              +- Code:
                 +- switch
                    +- Op: ? {#unknown#}
                    |  +- Op: == {Z}
                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |  +- Op: - {I}
                    |  |     +- Op: Literal {I}
                    |  |        +- Integer: 1
                    |  +- Op: Proxy Call {#unknown#}
                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |  +- No Arguments
                    |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
                    +- case
                    |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
                    |  +- St: =
                    |  |  +- Op: Local variable access: modifiers {I}
                    |  |  +- Op: Proxy Call {#unknown#}
                    |  |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
                    |  |     +- Arguments
                    |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  +- switch
                    |  |  +- Op: ? {#unknown#}
                    |  |  |  +- Op: == {Z}
                    |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |  |  |  +- Op: - {I}
                    |  |  |  |     +- Op: Literal {I}
                    |  |  |  |        +- Integer: 1
                    |  |  |  +- Op: Proxy Call {#unknown#}
                    |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |  |  |  +- No Arguments
                    |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |  +- case
                    |  |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
                    |  |  +- case
                    |  |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
                    |  |  |  +- St: Proxy Call
                    |  |  |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceDeclaration ] << {#unknown#}
                    |  |  |  |  +- Arguments
                    |  |  |  |     +- Op: Local variable access: modifiers {I}
                    |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |  |  +- Proxy break
                    |  |  +- case
                    |  |  |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
                    |  |  |  +- St: Proxy Call
                    |  |  |  |  +- Op: >> Proxy Data Access [ EnumDeclaration ] << {#unknown#}
                    |  |  |  |  +- Arguments
                    |  |  |  |     +- Op: Local variable access: modifiers {I}
                    |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |  |  +- Proxy break
                    |  |  +- default
                    |  |     +- If Statement:
                    |  |        +- Condition:
                    |  |        |  +- Op: Proxy Call {#unknown#}
                    |  |        |     +- Op: >> Proxy Data Access [ jj_2_4 ] << {#unknown#}
                    |  |        |     +- Arguments
                    |  |        |        +- Op: Literal {I}
                    |  |        |           +- Integer: 2147483647
                    |  |        +- If Code:
                    |  |        |  +- Block:
                    |  |        |     +- Code:
                    |  |        |        +- St: Proxy Call
                    |  |        |           +- Op: >> Proxy Data Access [ ConstructorDeclaration ] << {#unknown#}
                    |  |        |           +- Arguments
                    |  |        |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |        +- Else Code:
                    |  |           +- If Statement:
                    |  |              +- Condition:
                    |  |              |  +- Op: Proxy Call {#unknown#}
                    |  |              |     +- Op: >> Proxy Data Access [ jj_2_5 ] << {#unknown#}
                    |  |              |     +- Arguments
                    |  |              |        +- Op: Literal {I}
                    |  |              |           +- Integer: 2147483647
                    |  |              +- If Code:
                    |  |              |  +- Block:
                    |  |              |     +- Code:
                    |  |              |        +- St: Proxy Call
                    |  |              |           +- Op: >> Proxy Data Access [ FieldDeclaration ] << {#unknown#}
                    |  |              |           +- Arguments
                    |  |              |              +- Op: Local variable access: modifiers {I}
                    |  |              |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |              +- Else Code:
                    |  |                 +- Block:
                    |  |                    +- Code:
                    |  |                       +- switch
                    |  |                          +- Op: ? {#unknown#}
                    |  |                          |  +- Op: == {Z}
                    |  |                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |                          |  |  +- Op: - {I}
                    |  |                          |  |     +- Op: Literal {I}
                    |  |                          |  |        +- Integer: 1
                    |  |                          |  +- Op: Proxy Call {#unknown#}
                    |  |                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |                          |  |  +- No Arguments
                    |  |                          |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
                    |  |                          |  +- St: Proxy Call
                    |  |                          |  |  +- Op: >> Proxy Data Access [ MethodDeclaration ] << {#unknown#}
                    |  |                          |  |  +- Arguments
                    |  |                          |  |     +- Op: Local variable access: modifiers {I}
                    |  |                          |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |                          |  +- Proxy break
                    |  |                          +- case
                    |  |                          |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
                    |  |                          |  +- St: Proxy Call
                    |  |                          |  |  +- Op: >> Proxy Data Access [ AnnotationTypeDeclaration ] << {#unknown#}
                    |  |                          |  |  +- Arguments
                    |  |                          |  |     +- Op: Local variable access: modifiers {I}
                    |  |                          |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                    |  |                          |  +- Proxy break
                    |  |                          +- default
                    |  |                             +- St: Proxy Call
                    |  |                             |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                    |  |                             |  +- Arguments
                    |  |                             |     +- Op: - {I}
                    |  |                             |        +- Op: Literal {I}
                    |  |                             |           +- Integer: 1
                    |  |                             +- throw
                    |  |                                +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                    |  |                                   +- Lcat/quadriga/parsers/ParseException;
                    |  |                                   +- No Arguments
                    |  +- Proxy break
                    +- case
                    |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
                    |  +- St: Proxy Call
                    |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                    |  |  +- Arguments
                    |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
                    |  +- Proxy break
                    +- default
                       +- St: Proxy Call
                       |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                       |  +- Arguments
                       |     +- Op: - {I}
                       |        +- Op: Literal {I}
                       |           +- Integer: 1
                       +- throw
                          +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                             +- Lcat/quadriga/parsers/ParseException;
                             +- No Arguments
  final public FieldDeclaration
  Params
  modifiers: I
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ v ] Type [ Lcat/quadriga/parsers/VarAndInit; ]
  |  +- Symbol Var [ tipus ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: tipus {Lcat/quadriga/parsers/code/types/BaseType;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: v {Lcat/quadriga/parsers/VarAndInit;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ VariableDeclarator ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: modifiers {I}
     |        +- Op: Local variable access: tipus {Lcat/quadriga/parsers/code/types/BaseType;}
     +- LABEL: label_11
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_11
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: =
     |              +- Op: Local variable access: v {Lcat/quadriga/parsers/VarAndInit;}
     |              +- Op: Proxy Call {#unknown#}
     |                 +- Op: >> Proxy Data Access [ VariableDeclarator ] << {#unknown#}
     |                 +- Arguments
     |                    +- Op: Local variable access: modifiers {I}
     |                    +- Op: Local variable access: tipus {Lcat/quadriga/parsers/code/types/BaseType;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: ";"
  final public Lcat/quadriga/parsers/VarAndInit; VariableDeclarator
  Params
  modifiers: I
  type: Lcat/quadriga/parsers/code/types/BaseType;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ vai ] Type [ Lcat/quadriga/parsers/VarAndInit; ]
  |  +- Symbol Var [ initialization ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ leftHand ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: vai {Lcat/quadriga/parsers/VarAndInit;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ VariableDeclaratorId ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- St: =
     |  +- Op: >> Proxy Data Access [ modifiers ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.VarAndInit
     |  +- Op: Local variable access: modifiers {I}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Local Variables:
     |  |     |  +- Symbol Var [ localVar ] Type [ Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol; ]
     |  |     +- Code:
     |  |        +- Statements:
     |  |        |  +- St: =
     |  |        |     +- Op: Local variable access: localVar {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        |        +- Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;
     |  |        |        +- Arguments
     |  |        |           +- Op: Local variable access: modifiers {I}
     |  |        |           +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |  |        |           |  +- class cat.quadriga.parsers.VarAndInit
     |  |        |           +- Op: >> Proxy Data Access [ Proxy access to member image ] << {#unknown#}
     |  |        |              +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |  |        |                 +- class cat.quadriga.parsers.VarAndInit
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: Local variable access: localVar {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ localBlock.addLocalVariable ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: Local variable access: localVar {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        +- St: =
     |  |           +- Op: Local variable access: leftHand {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;}
     |  |              +- Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: localVar {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |                    +- Arguments
     |  |                       +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |  |                          +- class cat.quadriga.parsers.VarAndInit
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |              +- Op: Local variable access: leftHand {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;}
     |                 +- Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;
     |                 +- Arguments
     |                    +- Op: + {#unknown#}
     |                    |  +- Op: Literal {Ljava/lang/String;}
     |                    |  |  +- String: "Proxy field: "
     |                    |  +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                    |     +- class cat.quadriga.parsers.VarAndInit
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                             +- class cat.quadriga.parsers.VarAndInit
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: initialization {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ VariableInitializer ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- St: =
     |  |  |  +- Op: >> Proxy Data Access [ init ] << {#unknown#}
     |  |  |  |  +- class cat.quadriga.parsers.VarAndInit
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode;}
     |  |  |     +- Lcat/quadriga/parsers/code/statements/AssigmentStatementNode;
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ Proxy access to member ASSIGN ] << {#unknown#}
     |  |  |        |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        |     +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  |        +- Op: Local variable access: leftHand {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: initialization {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: vai {Lcat/quadriga/parsers/VarAndInit;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/VarAndInit; VariableDeclaratorId
  Params
  type: Lcat/quadriga/parsers/code/types/BaseType;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ vai ] Type [ Lcat/quadriga/parsers/VarAndInit; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: vai {Lcat/quadriga/parsers/VarAndInit;}
     |     +- Op: Invalid Constructor {Lcat/quadriga/parsers/VarAndInit;}
     |        +- Lcat/quadriga/parsers/VarAndInit;
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.VarAndInit
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.VarAndInit
     |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- LABEL: label_12
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_12
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |           +- St: =
     |              +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |              |  +- class cat.quadriga.parsers.VarAndInit
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/types/ArrayType;}
     |                 +- Lcat/quadriga/parsers/code/types/ArrayType;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |                       +- class cat.quadriga.parsers.VarAndInit
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: vai {Lcat/quadriga/parsers/VarAndInit;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; VariableInitializer
  Params
  base: Lcat/quadriga/parsers/code/types/BaseType;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ ArrayInitializer ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ArrayInitializer
  Params
  base: Lcat/quadriga/parsers/code/types/BaseType;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ aux ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ listOfInits ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ arraySize ] Type [ [Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ allocation ] Type [ Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;
     |        +- No Arguments
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: instanceof {Z}
     |  |     +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |     +- Op: >> proxy [ Lcat/quadriga/parsers/code/types/ArrayType; ] {#unknown#}
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |              +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |              +- Op: >> Proxy Data Access [ base ] << {#unknown#}
     |                 +- Op: cast Lcat/quadriga/parsers/code/types/ArrayType; {Lcat/quadriga/parsers/code/types/ArrayType;}
     |                    +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ VariableInitializer ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- St: Invalid Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- LABEL: label_13
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- If Statement:
     |  |  |           |  +- Condition:
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |     +- Op: >> Proxy Data Access [ jj_2_7 ] << {#unknown#}
     |  |  |           |  |     +- Arguments
     |  |  |           |  |        +- Op: Literal {I}
     |  |  |           |  |           +- Integer: 2
     |  |  |           |  +- If Code:
     |  |  |           |  |  +- Block:
     |  |  |           |  |     +- Code:
     |  |  |           |  |        +- St: No operation
     |  |  |           |  +- Else Code:
     |  |  |           |     +- Block:
     |  |  |           |        +- Code:
     |  |  |           |           +- Proxy break: label_13
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           +- St: =
     |  |  |           |  +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |           |  +- Op: Proxy Call {#unknown#}
     |  |  |           |     +- Op: >> Proxy Data Access [ VariableInitializer ] << {#unknown#}
     |  |  |           |     +- Arguments
     |  |  |           |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |           +- St: Invalid Call
     |  |  |              +- Op: Method:
     |  |  |              |  +- java.util.List -> add
     |  |  |              |  +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: arraySize {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |     +- Op: Array initialization {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        +- Op: new array {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |  +- Lcat/quadriga/parsers/code/expressions/ExpressionNode;
     |        |  +- Op: Literal {I}
     |        |     +- Integer: 1
     |        +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/IntegerLiteral;}
     |           +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/IntegerLiteral;
     |           +- Arguments
     |              +- Op: Call {I}
     |                 +- Op: Method:
     |                 |  +- java.util.List -> size
     |                 |  +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |                 +- No Arguments
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: allocation {Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;}
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;}
     |        +- Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;
     |        +- Arguments
     |           +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |           +- Op: Local variable access: arraySize {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           +- Op: Literal {I}
     |           |  +- Integer: 1
     |           +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |              +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |              +- Arguments
     |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                 +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/ArrayInitializerNode;}
     |                 +- Lcat/quadriga/parsers/code/expressions/ArrayInitializerNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: allocation {Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;}
     |                    +- Op: Invalid Call {#unknown#}
     |                       +- Op: Method:
     |                       |  +- java.util.List -> toArray
     |                       |  +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |                       +- Arguments
     |                          +- Op: new array {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                             +- Lcat/quadriga/parsers/code/expressions/ExpressionNode;
     |                             +- Op: Call {I}
     |                                +- Op: Method:
     |                                |  +- java.util.List -> size
     |                                |  +- Op: Local variable access: listOfInits {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |                                +- No Arguments
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public MethodDeclaration
  Params
  modifiers: I
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ bc ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  |  +- Symbol Var [ other ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: other {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/ThisSymbol;}
     |        +- Lcat/quadriga/parsers/code/symbols/ThisSymbol;
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ TypeParameters ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ ResultType ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ MethodDeclarator ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |        +- Op: Static Method:
     |  |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |        +- No Arguments
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |        +- Arguments
     |  |  |           +- Op: Literal {Ljava/lang/String;}
     |  |  |              +- String: "throws"
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |        +- Op: Static Method:
     |  |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |        +- No Arguments
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ NameList ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- Local Variables
     |  |  +- Local var "treeString" {Ljava/lang/String;}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: bc {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Statements:
     |  |  |  +- St: =
     |  |  |     +- Op: Local variable access: treeString {Ljava/lang/String;}
     |  |  |     +- Op: Call {Ljava/lang/String;}
     |  |  |        +- Op: Method:
     |  |  |        |  +- cat.quadriga.parsers.code.statements.BlockCode -> treeStringRepresentation
     |  |  |        |  +- Op: Local variable access: bc {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  |  |        +- No Arguments
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> addAll
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Proxy Call {#unknown#}
     |  |  |        +- Op: >> Proxy Data Access [ format ] << {#unknown#}
     |  |  |        |  +- Op: Call {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
     |  |  |        |     +- Op: Static Method:
     |  |  |        |     |  +- cat.quadriga.parsers.code.printers.MegaPrinter -> getInstance
     |  |  |        |     +- No Arguments
     |  |  |        +- Arguments
     |  |  |           +- Op: Local variable access: treeString {Ljava/lang/String;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |        +- Arguments
     |  |  |           +- Op: Literal {Ljava/lang/String;}
     |  |  |              +- String: ";"
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
        +- No Arguments
  final public MethodDeclarator
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ params ] Type [ Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ FormalParameters ] << {#unknown#}
     |     +- No Arguments
     +- for iteration
     |  +- iterator: param {Lcat/quadriga/parsers/ParameterClass;}
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Block:
     |     +- Code:
     |        +- St: Proxy Call
     |           +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |           +- Arguments
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |                 +- Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ modifiers ] << {#unknown#}
     |                    |  +- class cat.quadriga.parsers.ParameterClass
     |                    +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |                    |  +- class cat.quadriga.parsers.ParameterClass
     |                    +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                       +- class cat.quadriga.parsers.ParameterClass
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "Params"
     +- for iteration
     |  +- iterator: param {Lcat/quadriga/parsers/ParameterClass;}
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Block:
     |     +- Code:
     |        +- St: Call
     |        |  +- Op: Method:
     |        |  |  +- java.util.List -> add
     |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        |  +- Arguments
     |        |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        |        +- Op: Static Method:
     |        |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        |        +- No Arguments
     |        +- St: Call
     |           +- Op: Method:
     |           |  +- java.util.List -> add
     |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           +- Arguments
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |                 +- Lcat/quadriga/parsers/code/printers/PrintString;
     |                 +- Arguments
     |                    +- Op: + {#unknown#}
     |                       +- Op: + {#unknown#}
     |                       |  +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                       |  |  +- class cat.quadriga.parsers.ParameterClass
     |                       |  +- Op: Literal {Ljava/lang/String;}
     |                       |     +- String: ": "
     |                       +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |                          +- class cat.quadriga.parsers.ParameterClass
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
              +- Op: Static Method:
              |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
              +- No Arguments
  final public Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>; FormalParameters
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ params ] Type [ Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>; ]
  |  +- Symbol Var [ param ] Type [ Lcat/quadriga/parsers/ParameterClass; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/ParameterClass;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/ParameterClass;>;
     |        +- No Arguments
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ FormalParameter ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |  |  +- LABEL: label_14
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- switch
     |  |  |           |  +- Op: ? {#unknown#}
     |  |  |           |  |  +- Op: == {Z}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- Op: - {I}
     |  |  |           |  |  |     +- Op: Literal {I}
     |  |  |           |  |  |        +- Integer: 1
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- No Arguments
     |  |  |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           |  |  +- St: No operation
     |  |  |           |  |  +- Proxy break
     |  |  |           |  +- default
     |  |  |           |     +- Proxy break: label_14
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           +- St: =
     |  |  |           |  +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |  |  |           |  +- Op: Proxy Call {#unknown#}
     |  |  |           |     +- Op: >> Proxy Data Access [ FormalParameter ] << {#unknown#}
     |  |  |           |     +- No Arguments
     |  |  |           +- St: Call
     |  |  |              +- Op: Method:
     |  |  |              |  +- java.util.List -> add
     |  |  |              |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/ParameterClass; FormalParameter
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ modifiers ] Type [ I ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ param ] Type [ Lcat/quadriga/parsers/ParameterClass; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ vai ] Type [ Lcat/quadriga/parsers/VarAndInit; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |     +- Op: Invalid Constructor {Lcat/quadriga/parsers/ParameterClass;}
     |        +- Lcat/quadriga/parsers/ParameterClass;
     |        +- No Arguments
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: modifiers {I}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  |  |  |  +- St: Proxy Call
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |  +- Arguments
     |  |  |  |  |     +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  |  |  |  +- St: &=
     |  |  |  |  |  +- Op: Local variable access: modifiers {I}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  |  |  |  +- St: Proxy Call
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Annotation ] << {#unknown#}
     |  |  |  |  |  +- Arguments
     |  |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: Proxy Call
     |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: - {I}
     |  |  |     |        +- Op: Literal {I}
     |  |  |     |           +- Integer: 1
     |  |  |     +- throw
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |           +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ELLIPSIS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ELLIPSIS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/types/ArrayType;}
     |  |  |     +- Lcat/quadriga/parsers/code/types/ArrayType;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- St: =
     |  |  |  +- Op: >> Proxy Data Access [ varargs ] << {#unknown#}
     |  |  |  |  +- class cat.quadriga.parsers.ParameterClass
     |  |  |  +- Op: Literal {Z}
     |  |  |     +- Boolean: true
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: vai {Lcat/quadriga/parsers/VarAndInit;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ VariableDeclaratorId ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- St: =
     |  +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.ParameterClass
     |  +- Op: >> Proxy Data Access [ Proxy access to member image ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |        +- class cat.quadriga.parsers.VarAndInit
     +- St: =
     |  +- Op: >> Proxy Data Access [ cz ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.ParameterClass
     |  +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |     +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |           +- class cat.quadriga.parsers.VarAndInit
     +- St: =
     |  +- Op: >> Proxy Data Access [ modifiers ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.ParameterClass
     |  +- Op: Local variable access: modifiers {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |  |  +- class cat.quadriga.parsers.ParameterClass
     |  +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |     +- class cat.quadriga.parsers.VarAndInit
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public ConstructorDeclaration
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ bsn ] Type [ Lcat/quadriga/parsers/code/statements/BlockStatementNode; ]
  |  +- Symbol Var [ params ] Type [ Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>; ]
  +- Code:
     +- Statements:
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/ThisSymbol;}
     |        +- Lcat/quadriga/parsers/code/symbols/ThisSymbol;
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ TypeParameters ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ FormalParameters ] << {#unknown#}
     |     +- No Arguments
     +- for iteration
     |  +- iterator: param {Lcat/quadriga/parsers/ParameterClass;}
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Block:
     |     +- Code:
     |        +- St: Proxy Call
     |           +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |           +- Arguments
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |                 +- Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ modifiers ] << {#unknown#}
     |                    |  +- class cat.quadriga.parsers.ParameterClass
     |                    +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |                    |  +- class cat.quadriga.parsers.ParameterClass
     |                    +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                       +- class cat.quadriga.parsers.ParameterClass
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "Params"
     +- for iteration
     |  +- iterator: param {Lcat/quadriga/parsers/ParameterClass;}
     |  +- Op: Local variable access: params {Ljava/util/List<Lcat/quadriga/parsers/ParameterClass;>;}
     |  +- Block:
     |     +- Code:
     |        +- St: Call
     |        |  +- Op: Method:
     |        |  |  +- java.util.List -> add
     |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        |  +- Arguments
     |        |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        |        +- Op: Static Method:
     |        |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        |        +- No Arguments
     |        +- St: Call
     |           +- Op: Method:
     |           |  +- java.util.List -> add
     |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           +- Arguments
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |                 +- Lcat/quadriga/parsers/code/printers/PrintString;
     |                 +- Arguments
     |                    +- Op: + {#unknown#}
     |                       +- Op: + {#unknown#}
     |                       |  +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |                       |  |  +- class cat.quadriga.parsers.ParameterClass
     |                       |  +- Op: Literal {Ljava/lang/String;}
     |                       |     +- String: ": "
     |                       +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |                          +- class cat.quadriga.parsers.ParameterClass
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |        +- Op: Static Method:
     |  |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |        +- No Arguments
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |        +- Arguments
     |  |  |           +- Op: Literal {Ljava/lang/String;}
     |  |  |              +- String: "throws"
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |        +- Op: Static Method:
     |  |  |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |        +- No Arguments
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ NameList ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "{"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_8 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: Proxy Call
     |  |           +- Op: >> Proxy Data Access [ ExplicitConstructorInvocation ] << {#unknown#}
     |  |           +- Arguments
     |  |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: No operation
     +- LABEL: label_15
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Local Variables:
     |        |  +- Symbol Var [ treeString ] Type [ Ljava/lang/String; ]
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_15
     |           +- St: =
     |           |  +- Op: Local variable access: bsn {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ BlockStatement ] << {#unknown#}
     |           |     +- No Arguments
     |           +- Statements:
     |           |  +- St: =
     |           |     +- Op: Local variable access: treeString {Ljava/lang/String;}
     |           |     +- Op: Call {Ljava/lang/String;}
     |           |        +- Op: Method:
     |           |        |  +- cat.quadriga.parsers.code.TreeRepresentable -> treeStringRepresentation
     |           |        |  +- Op: Local variable access: bsn {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |           |        +- No Arguments
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> addAll
     |              |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              +- Arguments
     |                 +- Op: Proxy Call {#unknown#}
     |                    +- Op: >> Proxy Data Access [ format ] << {#unknown#}
     |                    |  +- Op: Call {Lcat/quadriga/parsers/code/printers/MegaPrinter;}
     |                    |     +- Op: Static Method:
     |                    |     |  +- cat.quadriga.parsers.code.printers.MegaPrinter -> getInstance
     |                    |     +- No Arguments
     |                    +- Arguments
     |                       +- Op: Local variable access: treeString {Ljava/lang/String;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- while
     |  +- Op: == {Z}
     |  |  +- Op: Call {Ljava/lang/Object;}
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> get
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: - {#unknown#}
     |  |  |        +- Op: Call {I}
     |  |  |        |  +- Op: Method:
     |  |  |        |  |  +- java.util.List -> size
     |  |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |        |  +- No Arguments
     |  |  |        +- Op: Literal {I}
     |  |  |           +- Integer: 1
     |  |  +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |  |     +- Op: Static Method:
     |  |     |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |  |     +- No Arguments
     |  +- St: Call
     |     +- Op: Method:
     |     |  +- java.util.List -> remove
     |     |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Arguments
     |        +- Op: - {#unknown#}
     |           +- Op: Call {I}
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> size
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- No Arguments
     |           +- Op: Literal {I}
     |              +- Integer: 1
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: Call {Ljava/lang/Object;}
     |  |     |  +- Op: Method:
     |  |     |  |  +- java.util.List -> get
     |  |     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |     |  +- Arguments
     |  |     |     +- Op: - {#unknown#}
     |  |     |        +- Op: Call {I}
     |  |     |        |  +- Op: Method:
     |  |     |        |  |  +- java.util.List -> size
     |  |     |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |     |        |  +- No Arguments
     |  |     |        +- Op: Literal {I}
     |  |     |           +- Integer: 1
     |  |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |  |        +- Op: Static Method:
     |  |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |  |        +- No Arguments
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: Call
     |  |        |  +- Op: Method:
     |  |        |  |  +- java.util.List -> add
     |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        |  +- Arguments
     |  |        |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |  |        |        +- Op: Static Method:
     |  |        |        |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |  |        |        +- No Arguments
     |  |        +- St: Call
     |  |           +- Op: Method:
     |  |           |  +- java.util.List -> add
     |  |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |           +- Arguments
     |  |              +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |  |                 +- Op: Static Method:
     |  |                 |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |  |                 +- No Arguments
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              +- Arguments
     |                 +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |                    +- Op: Static Method:
     |                    |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |                    +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "}"
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
        +- No Arguments
  final public ExplicitConstructorInvocation
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- LABEL: label_16
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_16
     |           +- St: =
     |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     +- Arguments
     |           |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |           |  +- Arguments
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |           |        +- Arguments
     |           |           +- Op: Field: {Ljava/lang/String;}
     |           |              +- cat.quadriga.parsers.Token -> image
     |           |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              +- Arguments
     |                 +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |                    +- Lcat/quadriga/parsers/code/printers/PrintString;
     |                    +- Arguments
     |                       +- Op: Literal {Ljava/lang/String;}
     |                          +- String: "."
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_9 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  |        +- St: Call
     |  |        |  +- Op: Method:
     |  |        |  |  +- java.util.List -> add
     |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        |  +- Arguments
     |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |        |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |        |        +- Arguments
     |  |        |           +- Op: Literal {Ljava/lang/String;}
     |  |        |              +- String: "this"
     |  |        +- St: Call
     |  |           +- Op: Method:
     |  |           |  +- java.util.List -> add
     |  |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |           +- Arguments
     |  |              +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |                 +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |                 +- Arguments
     |  |                    +- Op: Literal {Ljava/lang/String;}
     |  |                       +- String: "."
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ TypeArguments ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |        +- Arguments
     |  |  |           +- Op: Literal {Ljava/lang/String;}
     |  |  |              +- String: "this"
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |  +- St: Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |        +- Arguments
     |  |  |           +- Op: Literal {Ljava/lang/String;}
     |  |  |              +- String: "super"
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ Arguments ] << {#unknown#}
     |  +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: ";"
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
              +- Op: Static Method:
              |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
              +- No Arguments
  final public Initializer
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  |  +- Block:
     |  |  |  +- Code:
     |  |  |     +- St: Call
     |  |  |     |  +- Op: Method:
     |  |  |     |  |  +- java.util.List -> add
     |  |  |     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |     |        +- Arguments
     |  |  |     |           +- Op: Literal {Ljava/lang/String;}
     |  |  |     |              +- String: "static"
     |  |  |     +- St: Call
     |  |  |        +- Op: Method:
     |  |  |        |  +- java.util.List -> add
     |  |  |        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |        +- Arguments
     |  |  |           +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |              +- Op: Static Method:
     |  |  |              |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |              +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
        +- No Arguments
  final public Lcat/quadriga/parsers/code/types/BaseType; Type
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_10 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |           +- Op: Local variable access: t {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ ReferenceType ] << {#unknown#}
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ PrimitiveType ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Call {Ljava/lang/String;}
     |              +- Op: Method:
     |              |  +- cat.quadriga.parsers.code.types.BaseType -> getBinaryName
     |              |  +- Op: Local variable access: t {Lcat/quadriga/parsers/code/types/BaseType;}
     |              +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/code/types/BaseType;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/BaseType; ReferenceType
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ PrimitiveType ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- LABEL: label_17
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  |  |           +- St: =
     |  |  |           |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |           |  +- Op: Constructor {Lcat/quadriga/parsers/code/types/ArrayType;}
     |  |  |           |     +- Lcat/quadriga/parsers/code/types/ArrayType;
     |  |  |           |     +- Arguments
     |  |  |           |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |           +- If Statement:
     |  |  |              +- Condition:
     |  |  |              |  +- Op: Proxy Call {#unknown#}
     |  |  |              |     +- Op: >> Proxy Data Access [ jj_2_11 ] << {#unknown#}
     |  |  |              |     +- Arguments
     |  |  |              |        +- Op: Literal {I}
     |  |  |              |           +- Integer: 2
     |  |  |              +- If Code:
     |  |  |              |  +- Block:
     |  |  |              |     +- Code:
     |  |  |              |        +- St: No operation
     |  |  |              +- Else Code:
     |  |  |                 +- Block:
     |  |  |                    +- Code:
     |  |  |                       +- Proxy break: label_17
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- LABEL: label_18
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- If Statement:
     |  |  |           |  +- Condition:
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |     +- Op: >> Proxy Data Access [ jj_2_12 ] << {#unknown#}
     |  |  |           |  |     +- Arguments
     |  |  |           |  |        +- Op: Literal {I}
     |  |  |           |  |           +- Integer: 2
     |  |  |           |  +- If Code:
     |  |  |           |  |  +- Block:
     |  |  |           |  |     +- Code:
     |  |  |           |  |        +- St: No operation
     |  |  |           |  +- Else Code:
     |  |  |           |     +- Block:
     |  |  |           |        +- Code:
     |  |  |           |           +- Proxy break: label_18
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  |  |           +- St: =
     |  |  |              +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |              +- Op: Constructor {Lcat/quadriga/parsers/code/types/ArrayType;}
     |  |  |                 +- Lcat/quadriga/parsers/code/types/ArrayType;
     |  |  |                 +- Arguments
     |  |  |                    +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/BaseType; ClassOrInterfaceType
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ first ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ last ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ aux ] Type [ Ljava/util/List<Ljava/lang/String;>; ]
  |  +- Symbol Var [ arguments ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>; ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ cz ] Type [ Lcat/quadriga/parsers/code/CodeZone; ]
  |  +- Symbol Var [ name ] Type [ Ljava/lang/String; ]
  |  +- Symbol Var [ symbol ] Type [ Lcat/quadriga/parsers/code/symbols/BaseSymbol; ]
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Ljava/lang/String;>;}
     |        +- Ljava/util/LinkedList<Ljava/lang/String;>;
     |        +- No Arguments
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |  +- Arguments
     |     +- Op: Field: {Ljava/lang/String;}
     |        +- cat.quadriga.parsers.Token -> image
     |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: first {Lcat/quadriga/parsers/Token;}
     |  +- Op: = {Lcat/quadriga/parsers/Token;}
     |     +- Op: Local variable access: last {Lcat/quadriga/parsers/Token;}
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_13 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |           +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ TypeArguments ] << {#unknown#}
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |              +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |              +- Op: Literal {Null type}
     |                 +- Null
     +- LABEL: label_19
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |           |  +- Condition:
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |     +- Op: >> Proxy Data Access [ jj_2_14 ] << {#unknown#}
     |           |  |     +- Arguments
     |           |  |        +- Op: Literal {I}
     |           |  |           +- Integer: 2
     |           |  +- If Code:
     |           |  |  +- Block:
     |           |  |     +- Code:
     |           |  |        +- St: No operation
     |           |  +- Else Code:
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- Proxy break: label_19
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     +- Arguments
     |           |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |           |  +- Arguments
     |           |     +- Op: Field: {Ljava/lang/String;}
     |           |        +- cat.quadriga.parsers.Token -> image
     |           |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           +- St: =
     |           |  +- Op: Local variable access: last {Lcat/quadriga/parsers/Token;}
     |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_2_15 ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 2
     |              +- If Code:
     |              |  +- Block:
     |              |     +- Code:
     |              |        +- St: =
     |              |           +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |              |           +- Op: Proxy Call {#unknown#}
     |              |              +- Op: >> Proxy Data Access [ TypeArguments ] << {#unknown#}
     |              |              +- Arguments
     |              |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              +- Else Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: No operation
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |        +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |        +- Arguments
     |           +- Op: Field: {I}
     |           |  +- cat.quadriga.parsers.Token -> beginLine
     |           |  +- Op: Local variable access: first {Lcat/quadriga/parsers/Token;}
     |           +- Op: Field: {I}
     |           |  +- cat.quadriga.parsers.Token -> beginColumn
     |           |  +- Op: Local variable access: last {Lcat/quadriga/parsers/Token;}
     |           +- Op: Field: {I}
     |           |  +- cat.quadriga.parsers.Token -> endLine
     |           |  +- Op: Local variable access: last {Lcat/quadriga/parsers/Token;}
     |           +- Op: Field: {I}
     |              +- cat.quadriga.parsers.Token -> endColumn
     |              +- Op: Local variable access: first {Lcat/quadriga/parsers/Token;}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: name {Ljava/lang/String;}
     |     +- Op: Call {Ljava/lang/Object;}
     |        +- Op: Method:
     |        |  +- java.util.List -> get
     |        |  +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |        +- Arguments
     |           +- Op: Literal {I}
     |              +- Integer: 0
     +- for
     |  +- Local Variables:
     |  |  +- Symbol Var [ i ] Type [ I ]
     |  +- Statements:
     |  |  +- St: =
     |  |     +- Op: Local variable access: i {I}
     |  |     +- Op: Literal {I}
     |  |        +- Integer: 1
     |  +- Op: < {Z}
     |  |  +- Op: Local variable access: i {I}
     |  |  +- Op: Call {I}
     |  |     +- Op: Method:
     |  |     |  +- java.util.List -> size
     |  |     |  +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |  |     +- No Arguments
     |  +- Statements:
     |  |  +- St: ++X
     |  |     +- Op: Local variable access: i {I}
     |  +- Block:
     |     +- Code:
     |        +- St: +=
     |           +- Op: Local variable access: name {Ljava/lang/String;}
     |           +- Op: + {#unknown#}
     |              +- Op: Literal {Ljava/lang/String;}
     |              |  +- String: "."
     |              +- Op: Call {Ljava/lang/Object;}
     |                 +- Op: Method:
     |                 |  +- java.util.List -> get
     |                 |  +- Op: Local variable access: aux {Ljava/util/List<Ljava/lang/String;>;}
     |                 +- Arguments
     |                    +- Op: Local variable access: i {I}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |     +- Op: Proxy Call {#unknown#}
     |        +- Op: >> Proxy Data Access [ symbolTable.findSymbol ] << {#unknown#}
     |        +- Arguments
     |           +- Op: Local variable access: name {Ljava/lang/String;}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- If Statement:
     |  |           +- Condition:
     |  |           |  +- Op: instanceof {Z}
     |  |           |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |  |           |     +- Op: >> proxy [ Lcat/quadriga/parsers/code/symbols/TypeSymbol; ] {#unknown#}
     |  |           +- If Code:
     |  |           |  +- Block:
     |  |           |     +- Code:
     |  |           |        +- St: =
     |  |           |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |           |           +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |  |           |              +- Op: cast Lcat/quadriga/parsers/code/symbols/TypeSymbol; {Lcat/quadriga/parsers/code/symbols/TypeSymbol;}
     |  |           |                 +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |  |           +- Else Code:
     |  |              +- Block:
     |  |                 +- Code:
     |  |                    +- St: Proxy Call
     |  |                    |  +- Op: >> Proxy Data Access [ errorLog.insertError ] << {#unknown#}
     |  |                    |  +- Arguments
     |  |                    |     +- Op: + {#unknown#}
     |  |                    |     |  +- Op: + {#unknown#}
     |  |                    |     |  |  +- Op: Literal {Ljava/lang/String;}
     |  |                    |     |  |  |  +- String: "El simbol \\\""
     |  |                    |     |  |  +- Op: Local variable access: name {Ljava/lang/String;}
     |  |                    |     |  +- Op: Literal {Ljava/lang/String;}
     |  |                    |     |     +- String: "\\\" no és un tipus."
     |  |                    |     +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |  |                    +- Block:
     |  |                       +- Code:
     |  |                          +- If Statement:
     |  |                             +- Condition:
     |  |                             |  +- Op: Literal {Z}
     |  |                             |     +- Boolean: true
     |  |                             +- If Code:
     |  |                                +- return
     |  |                                   +- Op: Static Field: {Lcat/quadriga/parsers/code/types/UnknownType;}
     |  |                                      +- cat.quadriga.parsers.code.types.UnknownType -> empty
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ errorLog.insertWarning ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: + {#unknown#}
     |           |     |  +- Op: + {#unknown#}
     |           |     |  |  +- Op: Literal {Ljava/lang/String;}
     |           |     |  |  |  +- String: "No s'ha trobat la classe \\\""
     |           |     |  |  +- Op: Local variable access: name {Ljava/lang/String;}
     |           |     |  +- Op: Literal {Ljava/lang/String;}
     |           |     |     +- String: "\\\"."
     |           |     +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |           +- Block:
     |              +- Code:
     |                 +- If Statement:
     |                    +- Condition:
     |                    |  +- Op: Literal {Z}
     |                    |     +- Boolean: true
     |                    +- If Code:
     |                       +- return
     |                          +- Op: Constructor {Lcat/quadriga/parsers/code/types/UnknownType;}
     |                             +- Lcat/quadriga/parsers/code/types/UnknownType;
     |                             +- Arguments
     |                                +- Op: Local variable access: name {Ljava/lang/String;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: instanceof {Z}
     |              |     +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |     +- Op: >> proxy [ Lcat/quadriga/parsers/code/types/ClassOrInterfaceTypeRef; ] {#unknown#}
     |              +- If Code:
     |              |  +- Block:
     |              |     +- Code:
     |              |        +- St: =
     |              |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |           +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass;}
     |              |              +- Lcat/quadriga/parsers/code/types/ParametrizedClass;
     |              |              +- Arguments
     |              |                 +- Op: cast Lcat/quadriga/parsers/code/types/ClassOrInterfaceTypeRef; {Lcat/quadriga/parsers/code/types/ClassOrInterfaceTypeRef;}
     |              |                 |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |                 +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |              +- Else Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                          +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |                          +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass;}
     |                             +- Lcat/quadriga/parsers/code/types/ParametrizedClass;
     |                             +- Arguments
     |                                +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     |                                +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/types/BaseType;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>; TypeArguments
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ arguments ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>; ]
  |  +- Symbol Var [ argument ] Type [ Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;
     |        +- No Arguments
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: argument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ TypeArgument ] << {#unknown#}
     |     +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |  +- Arguments
     |     +- Op: Local variable access: argument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     +- LABEL: label_20
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_20
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: argument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ TypeArgument ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     |              +- Arguments
     |                 +- Op: Local variable access: argument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;>;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass; TypeArgument
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ typeArgument ] Type [ Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass; ]
  |  +- Symbol Var [ base ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ ReferenceType ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |     +- Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ WildcardBounds ] << {#unknown#}
     |  |  |  |  |     +- No Arguments
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: =
     |  |  |        +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |           +- Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;
     |  |  |           +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass; WildcardBounds
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ typeArgument ] Type [ Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass; ]
  |  +- Symbol Var [ base ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ ReferenceType ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |     +- Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |        +- Op: >> Proxy Data Access [ Proxy access to member EXTENDS ] << {#unknown#}
     |  |  |           +- Op: >> Proxy Data Access [ Proxy access to member Bound ] << {#unknown#}
     |  |  |              +- Op: >> Proxy Data Access [ ParameterClass ] << {#unknown#}
     |  |  |                 +- class cat.quadriga.parsers.code.types.ParametrizedClass
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ ReferenceType ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     |  |  |     +- Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: base {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |        +- Op: >> Proxy Data Access [ Proxy access to member SUPER ] << {#unknown#}
     |  |  |           +- Op: >> Proxy Data Access [ Proxy access to member Bound ] << {#unknown#}
     |  |  |              +- Op: >> Proxy Data Access [ ParameterClass ] << {#unknown#}
     |  |  |                 +- class cat.quadriga.parsers.code.types.ParametrizedClass
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: typeArgument {Lcat/quadriga/parsers/code/types/ParametrizedClass/ParameterClass;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/PrimitiveTypeRef; PrimitiveType
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Call {Lcat/quadriga/parsers/code/types/PrimitiveTypeRef;}
     |                 +- Op: Static Method:
     |                 |  +- cat.quadriga.parsers.code.types.PrimitiveTypeRef -> getFromName
     |                 +- Arguments
     |                    +- Op: Field: {Ljava/lang/String;}
     |                       +- cat.quadriga.parsers.Token -> image
     |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/types/BaseType; ResultType
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Call {Lcat/quadriga/parsers/code/types/PrimitiveTypeRef;}
     |  |  |     +- Op: Static Method:
     |  |  |     |  +- cat.quadriga.parsers.code.types.PrimitiveTypeRef -> getFromName
     |  |  |     +- Arguments
     |  |  |        +- Op: Field: {Ljava/lang/String;}
     |  |  |           +- cat.quadriga.parsers.Token -> image
     |  |  |           +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Ljava/util/List<Lcat/quadriga/parsers/Token;>; Name
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ tokens ] Type [ Ljava/util/List<Lcat/quadriga/parsers/Token;>; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/Token;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/Token;>;
     |        +- No Arguments
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  +- Arguments
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- LABEL: label_21
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |           |  +- Condition:
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |     +- Op: >> Proxy Data Access [ jj_2_16 ] << {#unknown#}
     |           |  |     +- Arguments
     |           |  |        +- Op: Literal {I}
     |           |  |           +- Integer: 2
     |           |  +- If Code:
     |           |  |  +- Block:
     |           |  |     +- Code:
     |           |  |        +- St: No operation
     |           |  +- Else Code:
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- Proxy break: label_21
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     +- Arguments
     |           |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |              +- Arguments
     |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: tokens {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>; NameList
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ aux ] Type [ Ljava/util/List<Lcat/quadriga/parsers/Token;>; ]
  |  +- Symbol Var [ names ] Type [ Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: names {Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;}
     |        +- Ljava/util/LinkedList<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: aux {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |     +- No Arguments
     +- St: Invalid Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: names {Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;}
     |  +- Arguments
     |     +- Op: Local variable access: aux {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     +- LABEL: label_22
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_22
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |           |  +- No Arguments
     |           +- St: Invalid Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: names {Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;}
     |              +- Arguments
     |                 +- Op: Local variable access: aux {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: names {Ljava/util/List<Ljava/util/List<Lcat/quadriga/parsers/Token;>;>;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; Expression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ ConditionalExpression ] << {#unknown#}
     |     +- No Arguments
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_17 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ AssignmentOperator ] << {#unknown#}
     |  |        |     +- No Arguments
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: auxNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |        |     +- No Arguments
     |  |        +- St: =
     |  |           +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/AssigmentExpressionNode;}
     |  |              +- Lcat/quadriga/parsers/code/expressions/AssigmentExpressionNode;
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |                 +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |                 +- Op: Local variable access: auxNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator; AssignmentOperator
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ op ] Type [ Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator; ]
  +- Code:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member ASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STARASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ STARASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member STARASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SLASHASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ SLASHASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member SLASHASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ REMASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ REMASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member REMASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUSASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ PLUSASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member PLUSASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUSASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ MINUSASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member MINUSASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ LSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member LSHIFTASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ RSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ RSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member RSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member RUNSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ANDASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ANDASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member ANDASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ XORASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ XORASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member XORASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ORASSIGN ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ORASSIGN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member ORASSIGN ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.statements.AssigmentStatementNode
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: op {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ConditionalExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxNode1 ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxNode2 ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ ConditionalOrExpression ] << {#unknown#}
     |     +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: auxNode1 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: auxNode2 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/TernaryExpressionNode;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/TernaryExpressionNode;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: auxNode1 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: auxNode2 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ConditionalOrExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ ConditionalAndExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_23
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SC_OR ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_23
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ SC_OR ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator;}
     |           |  +- Op: >> Proxy Data Access [ Proxy access to member OR ] << {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        +- class cat.quadriga.parsers.code.expressions.LogicalOperation
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ ConditionalAndExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/LogicalOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/LogicalOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ConditionalAndExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ InclusiveOrExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_24
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SC_AND ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_24
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ SC_AND ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator;}
     |           |  +- Op: >> Proxy Data Access [ Proxy access to member AND ] << {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        +- class cat.quadriga.parsers.code.expressions.LogicalOperation
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ InclusiveOrExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/LogicalOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/LogicalOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/LogicalOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; InclusiveOrExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ ExclusiveOrExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_25
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BIT_OR ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_25
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ BIT_OR ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  +- Op: >> Proxy Data Access [ Proxy access to member BIT_OR ] << {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ ExclusiveOrExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ExclusiveOrExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ AndExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_26
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ XOR ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_26
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ XOR ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  +- Op: >> Proxy Data Access [ Proxy access to member BIT_XOR ] << {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ AndExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; AndExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ EqualityExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_27
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_27
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  +- Op: >> Proxy Data Access [ Proxy access to member BIT_AND ] << {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ EqualityExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; EqualityExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ InstanceOfExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_28
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ EQ ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NE ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_28
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ EQ ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ EQ ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member EQ ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NE ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ NE ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member NEQ ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- St: Proxy Call
     |           |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     |  +- Arguments
     |           |     |     +- Op: - {I}
     |           |     |        +- Op: Literal {I}
     |           |     |           +- Integer: 1
     |           |     +- throw
     |           |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           |           +- Lcat/quadriga/parsers/ParseException;
     |           |           +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ InstanceOfExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/BooleanOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/BooleanOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; InstanceOfExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ RelationalExpression ] << {#unknown#}
     |     +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INSTANCEOF ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ INSTANCEOF ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member INSTANCEOF ] << {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |  |  |     +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |  |           +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |  |           +- Arguments
     |  |  |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/BooleanOperation;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/BooleanOperation;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |  |  |        +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; RelationalExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ ShiftExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_29
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ GE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_29
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member LT ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member GT ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LE ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ LE ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member LE ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ GE ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ GE ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member GE ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.BooleanOperation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- St: Proxy Call
     |           |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     |  +- Arguments
     |           |     |     +- Op: - {I}
     |           |     |        +- Op: Literal {I}
     |           |     |           +- Integer: 1
     |           |     +- throw
     |           |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           |           +- Lcat/quadriga/parsers/ParseException;
     |           |           +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ ShiftExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/BooleanOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/BooleanOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/BooleanOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ShiftExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ AdditiveExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_30
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |           |  +- Condition:
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |     +- Op: >> Proxy Data Access [ jj_2_18 ] << {#unknown#}
     |           |  |     +- Arguments
     |           |  |        +- Op: Literal {I}
     |           |  |           +- Integer: 1
     |           |  +- If Code:
     |           |  |  +- Block:
     |           |  |     +- Code:
     |           |  |        +- St: No operation
     |           |  +- Else Code:
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- Proxy break: label_30
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LSHIFT ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ LSHIFT ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member LEFT_SHIFT ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- If Statement:
     |           |        +- Condition:
     |           |        |  +- Op: Proxy Call {#unknown#}
     |           |        |     +- Op: >> Proxy Data Access [ jj_2_19 ] << {#unknown#}
     |           |        |     +- Arguments
     |           |        |        +- Op: Literal {I}
     |           |        |           +- Integer: 1
     |           |        +- If Code:
     |           |        |  +- Block:
     |           |        |     +- Code:
     |           |        |        +- St: Proxy Call
     |           |        |        |  +- Op: >> Proxy Data Access [ RSIGNEDSHIFT ] << {#unknown#}
     |           |        |        |  +- No Arguments
     |           |        |        +- St: =
     |           |        |           +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |        |           +- Op: >> Proxy Data Access [ Proxy access to member RIGHT_SHIFT ] << {#unknown#}
     |           |        |              +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |        |                 +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |        +- Else Code:
     |           |           +- If Statement:
     |           |              +- Condition:
     |           |              |  +- Op: Proxy Call {#unknown#}
     |           |              |     +- Op: >> Proxy Data Access [ jj_2_20 ] << {#unknown#}
     |           |              |     +- Arguments
     |           |              |        +- Op: Literal {I}
     |           |              |           +- Integer: 1
     |           |              +- If Code:
     |           |              |  +- Block:
     |           |              |     +- Code:
     |           |              |        +- St: Proxy Call
     |           |              |        |  +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFT ] << {#unknown#}
     |           |              |        |  +- No Arguments
     |           |              |        +- St: =
     |           |              |           +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |              |           +- Op: >> Proxy Data Access [ Proxy access to member RIGHT_UNSIGNED_SHIFT ] << {#unknown#}
     |           |              |              +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |              |                 +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |              +- Else Code:
     |           |                 +- Block:
     |           |                    +- Code:
     |           |                       +- St: Proxy Call
     |           |                       |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |                       |  +- Arguments
     |           |                       |     +- Op: - {I}
     |           |                       |        +- Op: Literal {I}
     |           |                       |           +- Integer: 1
     |           |                       +- throw
     |           |                          +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           |                             +- Lcat/quadriga/parsers/ParseException;
     |           |                             +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ AdditiveExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; AdditiveExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ MultiplicativeExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_31
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_31
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member ADD ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member SUB ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- St: Proxy Call
     |           |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     |  +- Arguments
     |           |     |     +- Op: - {I}
     |           |     |        +- Op: Literal {I}
     |           |     |           +- Integer: 1
     |           |     +- throw
     |           |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           |           +- Lcat/quadriga/parsers/ParseException;
     |           |           +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ MultiplicativeExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; MultiplicativeExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ auxiliarNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ UnaryExpression ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_32
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STAR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SLASH ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ REM ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_32
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STAR ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ STAR ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member MUL ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SLASH ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ SLASH ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member DIV ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ REM ] << {#unknown#}
     |           |  |  +- St: Proxy Call
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  |  |  +- Arguments
     |           |  |  |     +- Op: >> Proxy Data Access [ REM ] << {#unknown#}
     |           |  |  +- St: =
     |           |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |           |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member MOD ] << {#unknown#}
     |           |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |           |  |  |        +- class cat.quadriga.parsers.code.expressions.MathematicOperation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- St: Proxy Call
     |           |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |     |  +- Arguments
     |           |     |     +- Op: - {I}
     |           |     |        +- Op: Literal {I}
     |           |     |           +- Integer: 1
     |           |     +- throw
     |           |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           |           +- Lcat/quadriga/parsers/ParseException;
     |           |           +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ UnaryExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/MathematicOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/MathematicOperation;
     |                 +- Arguments
     |                    +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/MathematicOperation/Operator;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: auxiliarNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; UnaryExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: Literal {Null type}
     |  |  |  |  |     +- Null
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member NEGATE ] << {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: Proxy Call
     |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: - {I}
     |  |  |     |        +- Op: Literal {I}
     |  |  |     |           +- Integer: 1
     |  |  |     +- throw
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |           +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ UnaryExpression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- If Statement:
     |  |  |  +- Condition:
     |  |  |  |  +- Op: != {Z}
     |  |  |  |     +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |     +- Op: Literal {Null type}
     |  |  |  |        +- Null
     |  |  |  +- If Code:
     |  |  |     +- St: =
     |  |  |        +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |  |  |           +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |  |  |           +- Arguments
     |  |  |              +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ PreIncrementExpression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ PreDecrementExpression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ UnaryExpressionNotPlusMinus ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PreIncrementExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ node ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ PrimaryExpression ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ Proxy access to member PRE_INC ] << {#unknown#}
     |                    |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |                    |     +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |                    +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PreDecrementExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ node ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ PrimaryExpression ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |                 +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ Proxy access to member PRE_DEC ] << {#unknown#}
     |                    |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |                    |     +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |                    +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; UnaryExpressionNotPlusMinus
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member BIT_COMP ] << {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member NOT ] << {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: Proxy Call
     |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: - {I}
     |  |  |     |        +- Op: Literal {I}
     |  |  |     |           +- Integer: 1
     |  |  |     +- throw
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |           +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ UnaryExpression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |        +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- default
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Proxy Call {#unknown#}
     |        |     +- Op: >> Proxy Data Access [ jj_2_21 ] << {#unknown#}
     |        |     +- Arguments
     |        |        +- Op: Literal {I}
     |        |           +- Integer: 2147483647
     |        +- If Code:
     |        |  +- Block:
     |        |     +- Code:
     |        |        +- St: =
     |        |           +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |           +- Op: Proxy Call {#unknown#}
     |        |              +- Op: >> Proxy Data Access [ CastExpression ] << {#unknown#}
     |        |              +- No Arguments
     |        +- Else Code:
     |           +- Block:
     |              +- Code:
     |                 +- switch
     |                    +- Op: ? {#unknown#}
     |                    |  +- Op: == {Z}
     |                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    |  |  +- Op: - {I}
     |                    |  |     +- Op: Literal {I}
     |                    |  |        +- Integer: 1
     |                    |  +- Op: Proxy Call {#unknown#}
     |                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    |  |  +- No Arguments
     |                    |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |                    |  +- St: =
     |                    |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    |  |  +- Op: Proxy Call {#unknown#}
     |                    |  |     +- Op: >> Proxy Data Access [ PostfixExpression ] << {#unknown#}
     |                    |  |     +- No Arguments
     |                    |  +- Proxy break
     |                    +- default
     |                       +- St: Proxy Call
     |                       |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                       |  +- Arguments
     |                       |     +- Op: - {I}
     |                       |        +- Op: Literal {I}
     |                       |           +- Integer: 1
     |                       +- throw
     |                          +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                             +- Lcat/quadriga/parsers/ParseException;
     |                             +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public CastLookahead
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- If Statement:
        +- Condition:
        |  +- Op: Proxy Call {#unknown#}
        |     +- Op: >> Proxy Data Access [ jj_2_22 ] << {#unknown#}
        |     +- Arguments
        |        +- Op: Literal {I}
        |           +- Integer: 2
        +- If Code:
        |  +- Block:
        |     +- Code:
        |        +- St: Proxy Call
        |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |        |  +- Arguments
        |        |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
        |        +- St: Proxy Call
        |           +- Op: >> Proxy Data Access [ PrimitiveType ] << {#unknown#}
        |           +- Arguments
        |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Else Code:
           +- If Statement:
              +- Condition:
              |  +- Op: Proxy Call {#unknown#}
              |     +- Op: >> Proxy Data Access [ jj_2_23 ] << {#unknown#}
              |     +- Arguments
              |        +- Op: Literal {I}
              |           +- Integer: 2147483647
              +- If Code:
              |  +- Block:
              |     +- Code:
              |        +- St: Proxy Call
              |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
              |        |  +- Arguments
              |        |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
              |        +- St: Proxy Call
              |        |  +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
              |        |  +- Arguments
              |        |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
              |        +- St: Proxy Call
              |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
              |        |  +- Arguments
              |        |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
              |        +- St: Proxy Call
              |           +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
              |           +- Arguments
              |              +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
              +- Else Code:
                 +- Block:
                    +- Code:
                       +- switch
                          +- Op: ? {#unknown#}
                          |  +- Op: == {Z}
                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  +- Op: - {I}
                          |  |     +- Op: Literal {I}
                          |  |        +- Integer: 1
                          |  +- Op: Proxy Call {#unknown#}
                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  +- No Arguments
                          |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          +- case
                          |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
                          |  +- St: Proxy Call
                          |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  +- Arguments
                          |  |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
                          |  +- St: Proxy Call
                          |  |  +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
                          |  |  +- Arguments
                          |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                          |  +- St: Proxy Call
                          |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  +- Arguments
                          |  |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
                          |  +- switch
                          |  |  +- Op: ? {#unknown#}
                          |  |  |  +- Op: == {Z}
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  |  |  +- Op: - {I}
                          |  |  |  |     +- Op: Literal {I}
                          |  |  |  |        +- Integer: 1
                          |  |  |  +- Op: Proxy Call {#unknown#}
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  |  |  +- No Arguments
                          |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |  |  |  +- Arguments
                          |  |  |  |     +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
                          |  |  |  +- Proxy break
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
                          |  |  +- case
                          |  |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
                          |  |  |  +- St: Proxy Call
                          |  |  |  |  +- Op: >> Proxy Data Access [ Literal ] << {#unknown#}
                          |  |  |  |  +- No Arguments
                          |  |  |  +- Proxy break
                          |  |  +- default
                          |  |     +- St: Proxy Call
                          |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                          |  |     |  +- Arguments
                          |  |     |     +- Op: - {I}
                          |  |     |        +- Op: Literal {I}
                          |  |     |           +- Integer: 1
                          |  |     +- throw
                          |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                          |  |           +- Lcat/quadriga/parsers/ParseException;
                          |  |           +- No Arguments
                          |  +- Proxy break
                          +- default
                             +- St: Proxy Call
                             |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                             |  +- Arguments
                             |     +- Op: - {I}
                             |        +- Op: Literal {I}
                             |           +- Integer: 1
                             +- throw
                                +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                                   +- Lcat/quadriga/parsers/ParseException;
                                   +- No Arguments
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PostfixExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ operator ] Type [ Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ PrimaryExpression ] << {#unknown#}
     |     +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member POST_INC ] << {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ Proxy access to member POST_DEC ] << {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: Proxy Call
     |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: - {I}
     |  |  |     |        +- Op: Literal {I}
     |  |  |     |           +- Integer: 1
     |  |  |     +- throw
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |           +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: operator {Lcat/quadriga/parsers/code/expressions/UnaryOperation/Operator;}
     |  |  |        +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; CastExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ finalNode ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_24 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  |        +- St: =
     |  |           +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ UnaryExpression ] << {#unknown#}
     |  |              +- No Arguments
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ UnaryExpressionNotPlusMinus ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/CastExpressionNode;}
     |                 +- Lcat/quadriga/parsers/code/expressions/CastExpressionNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |                    +- Op: Local variable access: finalNode {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PrimaryExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ PrimaryPrefix ] << {#unknown#}
     |     +- No Arguments
     +- LABEL: label_33
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- If Statement:
     |           |  +- Condition:
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |     +- Op: >> Proxy Data Access [ jj_2_25 ] << {#unknown#}
     |           |  |     +- Arguments
     |           |  |        +- Op: Literal {I}
     |           |  |           +- Integer: 2
     |           |  +- If Code:
     |           |  |  +- Block:
     |           |  |     +- Code:
     |           |  |        +- St: No operation
     |           |  +- Else Code:
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- Proxy break: label_33
     |           +- St: =
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Op: Proxy Call {#unknown#}
     |                 +- Op: >> Proxy Data Access [ PrimarySuffix ] << {#unknown#}
     |                 +- Arguments
     |                    +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; MemberSelector
  Params
  in: Lcat/quadriga/parsers/code/expressions/ExpressionNode;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ other ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: other {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ TypeArguments ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: other {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;}
     |                 +- Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;
     |                 +- Arguments
     |                    +- Op: + {#unknown#}
     |                    |  +- Op: Literal {Ljava/lang/String;}
     |                    |  |  +- String: "parametrized "
     |                    |  +- Op: Field: {Ljava/lang/String;}
     |                    |     +- cat.quadriga.parsers.Token -> image
     |                    |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PrimaryPrefix
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ tokenList ] Type [ Ljava/util/List<Lcat/quadriga/parsers/Token;>; ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: tokenList {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/Token;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/Token;>;
     |        +- No Arguments
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Literal ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Proxy Call {#unknown#}
     |        |     +- Op: >> Proxy Data Access [ jj_2_26 ] << {#unknown#}
     |        |     +- Arguments
     |        |        +- Op: Literal {I}
     |        |           +- Integer: 2147483647
     |        +- If Code:
     |        |  +- Block:
     |        |     +- Code:
     |        |        +- LABEL: label_34
     |        |        |  +- while
     |        |        |     +- Op: Literal {Z}
     |        |        |     |  +- Boolean: true
     |        |        |     +- Block:
     |        |        |        +- Code:
     |        |        |           +- switch
     |        |        |           |  +- Op: ? {#unknown#}
     |        |        |           |  |  +- Op: == {Z}
     |        |        |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |        |        |           |  |  |  +- Op: - {I}
     |        |        |           |  |  |     +- Op: Literal {I}
     |        |        |           |  |  |        +- Integer: 1
     |        |        |           |  |  +- Op: Proxy Call {#unknown#}
     |        |        |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |        |        |           |  |  |  +- No Arguments
     |        |        |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |        |        |           |  +- case
     |        |        |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |        |        |           |  |  +- St: No operation
     |        |        |           |  |  +- Proxy break
     |        |        |           |  +- default
     |        |        |           |     +- Proxy break: label_34
     |        |        |           +- St: =
     |        |        |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |        |           |  +- Op: Proxy Call {#unknown#}
     |        |        |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |        |        |           |     +- Arguments
     |        |        |           |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |        |        |           +- St: Proxy Call
     |        |        |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |        |        |           |  +- Arguments
     |        |        |           |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |        |        |           +- St: Call
     |        |        |              +- Op: Method:
     |        |        |              |  +- java.util.List -> add
     |        |        |              |  +- Op: Local variable access: tokenList {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |        |        |              +- Arguments
     |        |        |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |        +- St: =
     |        |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |        |  +- Op: Proxy Call {#unknown#}
     |        |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |        |        |     +- Arguments
     |        |        |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |        |        +- If Statement:
     |        |           +- Condition:
     |        |           |  +- Op: > {Z}
     |        |           |     +- Op: Call {I}
     |        |           |     |  +- Op: Method:
     |        |           |     |  |  +- java.util.List -> size
     |        |           |     |  |  +- Op: Local variable access: tokenList {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |        |           |     |  +- No Arguments
     |        |           |     +- Op: Literal {I}
     |        |           |        +- Integer: 0
     |        |           +- If Code:
     |        |           |  +- Block:
     |        |           |     +- Code:
     |        |           |        +- St: =
     |        |           |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |           |           +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |        |           |              +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |        |           |              +- Arguments
     |        |           |                 +- Op: + {#unknown#}
     |        |           |                 |  +- Op: >> Proxy Data Access [ image ] << {#unknown#}
     |        |           |                 |  |  +- Op: Call {Ljava/lang/Object;}
     |        |           |                 |  |     +- Op: Method:
     |        |           |                 |  |     |  +- java.util.List -> get
     |        |           |                 |  |     |  +- Op: Local variable access: tokenList {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |        |           |                 |  |     +- Arguments
     |        |           |                 |  |        +- Op: Literal {I}
     |        |           |                 |  |           +- Integer: 0
     |        |           |                 |  +- Op: Literal {Ljava/lang/String;}
     |        |           |                 |     +- String: " ... this"
     |        |           |                 +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |        |           |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |        |           |                    +- Arguments
     |        |           |                       +- Op: Call {Ljava/lang/Object;}
     |        |           |                       |  +- Op: Method:
     |        |           |                       |  |  +- java.util.List -> get
     |        |           |                       |  |  +- Op: Local variable access: tokenList {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |        |           |                       |  +- Arguments
     |        |           |                       |     +- Op: Literal {I}
     |        |           |                       |        +- Integer: 0
     |        |           |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |           +- Else Code:
     |        |              +- Block:
     |        |                 +- Local Variables:
     |        |                 |  +- Symbol Var [ symbol ] Type [ Lcat/quadriga/parsers/code/symbols/BaseSymbol; ]
     |        |                 +- Code:
     |        |                    +- Statements:
     |        |                    |  +- St: =
     |        |                    |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |        |                    |     +- Op: Proxy Call {#unknown#}
     |        |                    |        +- Op: >> Proxy Data Access [ symbolTable.findSymbol ] << {#unknown#}
     |        |                    |        +- Arguments
     |        |                    |           +- Op: Literal {Ljava/lang/String;}
     |        |                    |              +- String: "this"
     |        |                    +- If Statement:
     |        |                       +- Condition:
     |        |                       |  +- Op: != {Z}
     |        |                       |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |        |                       |     +- Op: Literal {Null type}
     |        |                       |        +- Null
     |        |                       +- If Code:
     |        |                       |  +- Block:
     |        |                       |     +- Code:
     |        |                       |        +- St: =
     |        |                       |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |                       |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;}
     |        |                       |              +- Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;
     |        |                       |              +- Arguments
     |        |                       |                 +- Op: cast Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol; {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |        |                       |                 |  +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/BaseSymbol;}
     |        |                       |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |        |                       |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |        |                       |                    +- Arguments
     |        |                       |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |                       +- Else Code:
     |        |                          +- Block:
     |        |                             +- Code:
     |        |                                +- St: =
     |        |                                   +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |                                   +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;}
     |        |                                      +- Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;
     |        |                                      +- Arguments
     |        |                                         +- Op: Literal {Ljava/lang/String;}
     |        |                                         |  +- String: "this"
     |        |                                         +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |        |                                            +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |        |                                            +- Arguments
     |        |                                               +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        +- Else Code:
     |           +- Block:
     |              +- Code:
     |                 +- switch
     |                    +- Op: ? {#unknown#}
     |                    |  +- Op: == {Z}
     |                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    |  |  +- Op: - {I}
     |                    |  |     +- Op: Literal {I}
     |                    |  |        +- Integer: 1
     |                    |  +- Op: Proxy Call {#unknown#}
     |                    |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    |  |  +- No Arguments
     |                    |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                    +- case
     |                    |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |                    |  +- St: =
     |                    |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    |  |  +- Op: Proxy Call {#unknown#}
     |                    |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                    |  |     +- Arguments
     |                    |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |                    |  +- St: Proxy Call
     |                    |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                    |  |  +- Arguments
     |                    |  |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                    |  +- St: =
     |                    |  |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                    |  |  +- Op: Proxy Call {#unknown#}
     |                    |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                    |  |     +- Arguments
     |                    |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |                    |  +- St: =
     |                    |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |                    |  |     +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |                    |  |     +- Arguments
     |                    |  |        +- Op: + {#unknown#}
     |                    |  |        |  +- Op: Literal {Ljava/lang/String;}
     |                    |  |        |  |  +- String: "super."
     |                    |  |        |  +- Op: Field: {Ljava/lang/String;}
     |                    |  |        |     +- cat.quadriga.parsers.Token -> image
     |                    |  |        |     +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                    |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                    |  |           +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                    |  |           +- Arguments
     |                    |  |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    |  |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                    |  +- Proxy break
     |                    +- default
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_2_27 ] << {#unknown#}
     |                          |     +- Arguments
     |                          |        +- Op: Literal {I}
     |                          |           +- Integer: 2147483647
     |                          +- If Code:
     |                          |  +- Block:
     |                          |     +- Code:
     |                          |        +- St: =
     |                          |        |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |                          |        |  +- Op: Proxy Call {#unknown#}
     |                          |        |     +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |                          |        |     +- Arguments
     |                          |        |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |                          |        +- St: =
     |                          |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          |        |  +- Op: Proxy Call {#unknown#}
     |                          |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                          |        |     +- Arguments
     |                          |        |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                          |        +- St: Proxy Call
     |                          |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                          |        |  +- Arguments
     |                          |        |     +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |                          |        +- St: Proxy Call
     |                          |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                          |        |  +- Arguments
     |                          |        |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                          |        +- St: =
     |                          |        |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                          |        |  +- Op: Proxy Call {#unknown#}
     |                          |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                          |        |     +- Arguments
     |                          |        |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |                          |        +- St: =
     |                          |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                          |           +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |                          |              +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |                          |              +- Arguments
     |                          |                 +- Op: + {#unknown#}
     |                          |                 |  +- Op: + {#unknown#}
     |                          |                 |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |                          |                 |  |  +- Op: Literal {Ljava/lang/String;}
     |                          |                 |  |     +- String: ".super."
     |                          |                 |  +- Op: Field: {Ljava/lang/String;}
     |                          |                 |     +- cat.quadriga.parsers.Token -> image
     |                          |                 |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                          |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                          |                    +- Arguments
     |                          |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          |                       +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                          +- Else Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- switch
     |                                      +- Op: ? {#unknown#}
     |                                      |  +- Op: == {Z}
     |                                      |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                      |  |  +- Op: - {I}
     |                                      |  |     +- Op: Literal {I}
     |                                      |  |        +- Integer: 1
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                      |  |  +- No Arguments
     |                                      |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                      +- case
     |                                      |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |                                      |  +- St: Proxy Call
     |                                      |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                      |  |  +- Arguments
     |                                      |  |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |                                      |  +- St: =
     |                                      |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                      |  |  +- Op: Proxy Call {#unknown#}
     |                                      |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |                                      |  |     +- No Arguments
     |                                      |  +- St: Proxy Call
     |                                      |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                      |  |  +- Arguments
     |                                      |  |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |                                      |  +- Proxy break
     |                                      +- case
     |                                      |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |                                      |  +- St: =
     |                                      |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                      |  |  +- Op: Proxy Call {#unknown#}
     |                                      |  |     +- Op: >> Proxy Data Access [ AllocationExpression ] << {#unknown#}
     |                                      |  |     +- Arguments
     |                                      |  |        +- Op: Literal {Null type}
     |                                      |  |           +- Null
     |                                      |  +- Proxy break
     |                                      +- default
     |                                         +- If Statement:
     |                                            +- Condition:
     |                                            |  +- Op: Proxy Call {#unknown#}
     |                                            |     +- Op: >> Proxy Data Access [ jj_2_28 ] << {#unknown#}
     |                                            |     +- Arguments
     |                                            |        +- Op: Literal {I}
     |                                            |           +- Integer: 2147483647
     |                                            +- If Code:
     |                                            |  +- Block:
     |                                            |     +- Code:
     |                                            |        +- St: =
     |                                            |        |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |                                            |        |  +- Op: Proxy Call {#unknown#}
     |                                            |        |     +- Op: >> Proxy Data Access [ ResultType ] << {#unknown#}
     |                                            |        |     +- Arguments
     |                                            |        |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |                                            |        +- St: =
     |                                            |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                            |        |  +- Op: Proxy Call {#unknown#}
     |                                            |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                            |        |     +- Arguments
     |                                            |        |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                                            |        +- St: =
     |                                            |        |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                                            |        |  +- Op: Proxy Call {#unknown#}
     |                                            |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                            |        |     +- Arguments
     |                                            |        |        +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |                                            |        +- St: =
     |                                            |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                            |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/ClassLiteral;}
     |                                            |              +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/ClassLiteral;
     |                                            |              +- Arguments
     |                                            |                 +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |                                            |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                                            |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                                            |                    +- Arguments
     |                                            |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                            |                       +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                                            +- Else Code:
     |                                               +- Block:
     |                                                  +- Code:
     |                                                     +- switch
     |                                                        +- Op: ? {#unknown#}
     |                                                        |  +- Op: == {Z}
     |                                                        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                                        |  |  +- Op: - {I}
     |                                                        |  |     +- Op: Literal {I}
     |                                                        |  |        +- Integer: 1
     |                                                        |  +- Op: Proxy Call {#unknown#}
     |                                                        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                                        |  |  +- No Arguments
     |                                                        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                                        +- Local Variables
     |                                                        |  +- Local var "aux" {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |                                                        +- case
     |                                                        |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |                                                        |  +- Statements:
     |                                                        |  +- St: =
     |                                                        |  |  +- Op: Local variable access: aux {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |                                                        |  |  +- Op: Proxy Call {#unknown#}
     |                                                        |  |     +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |                                                        |  |     +- No Arguments
     |                                                        |  +- St: =
     |                                                        |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                                        |  |  +- Op: Call {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                                        |  |     +- Op: Static Method:
     |                                                        |  |     |  +- cat.quadriga.parsers.code.Utils -> resolveName
     |                                                        |  |     +- Arguments
     |                                                        |  |        +- Op: >> Proxy Data Access [ symbolTable ] << {#unknown#}
     |                                                        |  |        +- Op: Local variable access: aux {Ljava/util/List<Lcat/quadriga/parsers/Token;>;}
     |                                                        |  +- Proxy break
     |                                                        +- default
     |                                                           +- St: Proxy Call
     |                                                           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                                           |  +- Arguments
     |                                                           |     +- Op: - {I}
     |                                                           |        +- Op: Literal {I}
     |                                                           |           +- Integer: 1
     |                                                           +- throw
     |                                                              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                                                                 +- Lcat/quadriga/parsers/ParseException;
     |                                                                 +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; PrimarySuffix
  Params
  in: Lcat/quadriga/parsers/code/expressions/ExpressionNode;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ out ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_29 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  |        +- St: =
     |  |           +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |  |              +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |  |              +- Arguments
     |  |                 +- Op: Literal {Ljava/lang/String;}
     |  |                 |  +- String: ".super"
     |  |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |                    +- Arguments
     |  |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |                       +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Else Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Proxy Call {#unknown#}
     |        |     +- Op: >> Proxy Data Access [ jj_2_30 ] << {#unknown#}
     |        |     +- Arguments
     |        |        +- Op: Literal {I}
     |        |           +- Integer: 2147483647
     |        +- If Code:
     |        |  +- Block:
     |        |     +- Code:
     |        |        +- St: =
     |        |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |        |  +- Op: Proxy Call {#unknown#}
     |        |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |        |        |     +- Arguments
     |        |        |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |        |        +- St: =
     |        |        |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |        |        |  +- Op: Proxy Call {#unknown#}
     |        |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |        |        |     +- Arguments
     |        |        |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |        |        +- St: =
     |        |           +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |        |           +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |        |              +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |        |              +- Arguments
     |        |                 +- Op: Literal {Ljava/lang/String;}
     |        |                 |  +- String: ".this"
     |        |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |        |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |        |                    +- Arguments
     |        |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        |                       +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |        +- Else Code:
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_2_31 ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 2
     |              +- If Code:
     |              |  +- Block:
     |              |     +- Code:
     |              |        +- St: Proxy Call
     |              |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |        |  +- Arguments
     |              |        |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |              |        +- St: =
     |              |           +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |           +- Op: Proxy Call {#unknown#}
     |              |              +- Op: >> Proxy Data Access [ AllocationExpression ] << {#unknown#}
     |              |              +- Arguments
     |              |                 +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              +- Else Code:
     |                 +- If Statement:
     |                    +- Condition:
     |                    |  +- Op: Proxy Call {#unknown#}
     |                    |     +- Op: >> Proxy Data Access [ jj_2_32 ] << {#unknown#}
     |                    |     +- Arguments
     |                    |        +- Op: Literal {I}
     |                    |           +- Integer: 3
     |                    +- If Code:
     |                    |  +- Block:
     |                    |     +- Code:
     |                    |        +- St: =
     |                    |           +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    |           +- Op: Proxy Call {#unknown#}
     |                    |              +- Op: >> Proxy Data Access [ MemberSelector ] << {#unknown#}
     |                    |              +- Arguments
     |                    |                 +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Else Code:
     |                       +- Block:
     |                          +- Code:
     |                             +- switch
     |                                +- Op: ? {#unknown#}
     |                                |  +- Op: == {Z}
     |                                |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                |  |  +- Op: - {I}
     |                                |  |     +- Op: Literal {I}
     |                                |  |        +- Integer: 1
     |                                |  +- Op: Proxy Call {#unknown#}
     |                                |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                |  |  +- No Arguments
     |                                |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |                                +- Local Variables
     |                                |  +- Local var "access" {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  +- Local var "args" {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |                                |  +- Local var "method" {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                +- case
     |                                |  +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |                                |  +- St: Proxy Call
     |                                |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                |  |  +- Arguments
     |                                |  |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |                                |  +- Statements:
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: access {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  +- Op: Proxy Call {#unknown#}
     |                                |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |                                |  |     +- No Arguments
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  |  +- Op: Proxy Call {#unknown#}
     |                                |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                |  |     +- Arguments
     |                                |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/ArrayOrComponentAccess;}
     |                                |  |     +- Lcat/quadriga/parsers/code/expressions/ArrayOrComponentAccess;
     |                                |  |     +- Arguments
     |                                |  |        +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |        +- Op: Local variable access: access {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  +- Proxy break
     |                                +- case
     |                                |  +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                                |  +- St: Proxy Call
     |                                |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                |  |  +- Arguments
     |                                |  |     +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  |  +- Op: Proxy Call {#unknown#}
     |                                |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                |  |     +- Arguments
     |                                |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |                                |  +- If Statement:
     |                                |  |  +- Condition:
     |                                |  |  |  +- Op: instanceof {Z}
     |                                |  |  |     +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  |     +- Op: >> proxy [ Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess; ] {#unknown#}
     |                                |  |  +- If Code:
     |                                |  |  |  +- Block:
     |                                |  |  |     +- Code:
     |                                |  |  |        +- St: =
     |                                |  |  |           +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  |           +- Op: Call {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  |              +- Op: Static Method:
     |                                |  |  |              |  +- cat.quadriga.parsers.code.Utils -> accessToMember
     |                                |  |  |              +- Arguments
     |                                |  |  |                 +- Op: cast Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess; {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                |  |  |                 |  +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  |                 +- Op: Field: {Ljava/lang/String;}
     |                                |  |  |                 |  +- cat.quadriga.parsers.Token -> image
     |                                |  |  |                 |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  |  |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  |  +- Else Code:
     |                                |  |     +- Block:
     |                                |  |        +- Code:
     |                                |  |           +- St: =
     |                                |  |              +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |              +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;}
     |                                |  |                 +- Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;
     |                                |  |                 +- Arguments
     |                                |  |                    +- Op: Field: {Ljava/lang/String;}
     |                                |  |                    |  +- cat.quadriga.parsers.Token -> image
     |                                |  |                    |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  |                    +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                                |  |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                                |  |                       +- Arguments
     |                                |  |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                                |  +- Proxy break
     |                                +- case
     |                                |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |                                |  +- Statements:
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: args {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |                                |  |  +- Op: Proxy Call {#unknown#}
     |                                |  |     +- Op: >> Proxy Data Access [ Arguments ] << {#unknown#}
     |                                |  |     +- No Arguments
     |                                |  +- Statements:
     |                                |  +- If Statement:
     |                                |  |  +- Condition:
     |                                |  |  |  +- Op: instanceof {Z}
     |                                |  |  |     +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  |     +- Op: >> proxy [ Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess; ] {#unknown#}
     |                                |  |  +- If Code:
     |                                |  |  |  +- Block:
     |                                |  |  |     +- Code:
     |                                |  |  |        +- St: =
     |                                |  |  |           +- Op: Local variable access: method {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                |  |  |           +- Op: cast Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess; {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                |  |  |              +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  +- Else Code:
     |                                |  |     +- Block:
     |                                |  |        +- Code:
     |                                |  |           +- St: =
     |                                |  |              +- Op: Local variable access: method {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                |  |              +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;}
     |                                |  |                 +- Lcat/quadriga/parsers/code/proxy/ProxyDataAccess;
     |                                |  |                 +- Arguments
     |                                |  |                    +- Op: Literal {Ljava/lang/String;}
     |                                |  |                    |  +- String: "Method Call"
     |                                |  |                    +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  +- St: =
     |                                |  |  +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                                |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/CallToMethod;}
     |                                |  |     +- Lcat/quadriga/parsers/code/expressions/CallToMethod;
     |                                |  |     +- Arguments
     |                                |  |        +- Op: Local variable access: method {Lcat/quadriga/parsers/code/expressions/dataaccess/DataAccess;}
     |                                |  |        +- Op: Local variable access: args {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |                                |  +- Proxy break
     |                                +- default
     |                                   +- St: Proxy Call
     |                                   |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                                   |  +- Arguments
     |                                   |     +- Op: - {I}
     |                                   |        +- Op: Literal {I}
     |                                   |           +- Integer: 1
     |                                   +- throw
     |                                      +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                                         +- Lcat/quadriga/parsers/ParseException;
     |                                         +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: out {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData; Literal
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ data ] Type [ Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/IntegerLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/IntegerLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/FloatLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/FloatLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/CharacterLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/CharacterLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/StringLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/StringLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ BooleanLiteral ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ NullLiteral ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: data {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData; BooleanLiteral
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ lit ] Type [ Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: lit {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/TrueLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/TrueLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: lit {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/FalseLiteral;}
     |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/FalseLiteral;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: lit {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData; NullLiteral
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/NullLiteral;}
     |                 +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/NullLiteral;
     |                 +- Arguments
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/CallToArguments; Arguments
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ arguments ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>; ]
  |  +- Symbol Var [ node ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: Invalid Call
     |  |  |  +- Op: Method:
     |  |  |  |  +- java.util.List -> add
     |  |  |  |  +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- LABEL: label_35
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- switch
     |  |  |           |  +- Op: ? {#unknown#}
     |  |  |           |  |  +- Op: == {Z}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- Op: - {I}
     |  |  |           |  |  |     +- Op: Literal {I}
     |  |  |           |  |  |        +- Integer: 1
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  |  |  +- No Arguments
     |  |  |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |           |  +- case
     |  |  |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           |  |  +- St: No operation
     |  |  |           |  |  +- Proxy break
     |  |  |           |  +- default
     |  |  |           |     +- Proxy break: label_35
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           +- St: =
     |  |  |           |  +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |           |  +- Op: Proxy Call {#unknown#}
     |  |  |           |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |           |     +- No Arguments
     |  |  |           +- St: Invalid Call
     |  |  |              +- Op: Method:
     |  |  |              |  +- java.util.List -> add
     |  |  |              |  +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Local variable access: node {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |                 +- Lcat/quadriga/parsers/code/statements/CallToArguments;
     |                 +- Arguments
     |                    +- Op: Local variable access: arguments {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; AllocationExpression
  Params
  in: Lcat/quadriga/parsers/code/expressions/ExpressionNode;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ other ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ other2 ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ exp ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ args ] Type [ Lcat/quadriga/parsers/code/statements/CallToArguments; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |  |  +- Op: Local variable access: other {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |     +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |  |     +- No Arguments
     |  +- St: =
     |  |  +- Op: Local variable access: other2 {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |     +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |  |     +- No Arguments
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_33 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ PrimitiveType ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: Local variable access: other {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        +- St: =
     |  |           +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ ArrayDimsAndInits ] << {#unknown#}
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ClassOrInterfaceType ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  +- switch
     |              |  |  +- Op: ? {#unknown#}
     |              |  |  |  +- Op: == {Z}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- Op: - {I}
     |              |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |        +- Integer: 1
     |              |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- No Arguments
     |              |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |              |  |  |  +- St: Proxy Call
     |              |  |  |  |  +- Op: >> Proxy Data Access [ TypeArguments ] << {#unknown#}
     |              |  |  |  |  +- Arguments
     |              |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  |  +- Proxy break
     |              |  |  +- default
     |              |  |     +- St: No operation
     |              |  +- switch
     |              |  |  +- Op: ? {#unknown#}
     |              |  |  |  +- Op: == {Z}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- Op: - {I}
     |              |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |        +- Integer: 1
     |              |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- No Arguments
     |              |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ ArrayDimsAndInits ] << {#unknown#}
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |  |  +- Proxy break
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: args {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ Arguments ] << {#unknown#}
     |              |  |  |  |     +- No Arguments
     |              |  |  |  +- switch
     |              |  |  |  |  +- Op: ? {#unknown#}
     |              |  |  |  |  |  +- Op: == {Z}
     |              |  |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  |  |  +- Op: - {I}
     |              |  |  |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |  |  |        +- Integer: 1
     |              |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  |  |  +- No Arguments
     |              |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- case
     |              |  |  |  |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |              |  |  |  |  |  +- St: Proxy Call
     |              |  |  |  |  |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceBody ] << {#unknown#}
     |              |  |  |  |  |  |  +- Arguments
     |              |  |  |  |  |  |     +- Op: Literal {Z}
     |              |  |  |  |  |  |     |  +- Boolean: false
     |              |  |  |  |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  |  |  |  +- St: =
     |              |  |  |  |  |  |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/ProxyExpression;}
     |              |  |  |  |  |  |     +- Lcat/quadriga/parsers/code/proxy/ProxyExpression;
     |              |  |  |  |  |  |     +- Arguments
     |              |  |  |  |  |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  |  |  |  |  +- St: =
     |              |  |  |  |  |  |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/proxy/UnaryProxy;}
     |              |  |  |  |  |  |     +- Lcat/quadriga/parsers/code/proxy/UnaryProxy;
     |              |  |  |  |  |  |     +- Arguments
     |              |  |  |  |  |  |        +- Op: + {#unknown#}
     |              |  |  |  |  |  |        |  +- Op: Literal {Ljava/lang/String;}
     |              |  |  |  |  |  |        |  |  +- String: "new "
     |              |  |  |  |  |  |        |  +- Op: Call {Ljava/lang/String;}
     |              |  |  |  |  |  |        |     +- Op: Method:
     |              |  |  |  |  |  |        |     |  +- cat.quadriga.parsers.code.types.BaseType -> toString
     |              |  |  |  |  |  |        |     |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  |  |  |  |        |     +- No Arguments
     |              |  |  |  |  |  |        +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  |  +- Proxy break
     |              |  |  |  |  +- default
     |              |  |  |  |     +- If Statement:
     |              |  |  |  |        +- Condition:
     |              |  |  |  |        |  +- Op: == {Z}
     |              |  |  |  |        |     +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |        |     +- Op: Literal {Null type}
     |              |  |  |  |        |        +- Null
     |              |  |  |  |        +- If Code:
     |              |  |  |  |        |  +- Block:
     |              |  |  |  |        |     +- Code:
     |              |  |  |  |        |        +- St: =
     |              |  |  |  |        |           +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |        |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/AllocationExpressionNode;}
     |              |  |  |  |        |              +- Lcat/quadriga/parsers/code/expressions/AllocationExpressionNode;
     |              |  |  |  |        |              +- Arguments
     |              |  |  |  |        |                 +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  |  |        |                 +- Op: Local variable access: args {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |              |  |  |  |        |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |        +- Else Code:
     |              |  |  |  |           +- Block:
     |              |  |  |  |              +- Code:
     |              |  |  |  |                 +- St: =
     |              |  |  |  |                    +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |                    +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/AllocationExpressionNode;}
     |              |  |  |  |                       +- Lcat/quadriga/parsers/code/expressions/AllocationExpressionNode;
     |              |  |  |  |                       +- Arguments
     |              |  |  |  |                          +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |                          +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  |  |  |                          +- Op: Local variable access: args {Lcat/quadriga/parsers/code/statements/CallToArguments;}
     |              |  |  |  |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |  |  +- Proxy break
     |              |  |  +- default
     |              |  |     +- St: Proxy Call
     |              |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     |  +- Arguments
     |              |  |     |     +- Op: - {I}
     |              |  |     |        +- Op: Literal {I}
     |              |  |     |           +- Integer: 1
     |              |  |     +- throw
     |              |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |              |  |           +- Lcat/quadriga/parsers/ParseException;
     |              |  |           +- No Arguments
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; ArrayDimsAndInits
  Params
  in: Lcat/quadriga/parsers/code/types/BaseType;
  n: Lcat/quadriga/parsers/Token;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ aux ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ listLengths ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>; ]
  |  +- Symbol Var [ dims ] Type [ I ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: listLengths {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;
     |        +- No Arguments
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: dims {I}
     |     +- Op: Literal {I}
     |        +- Integer: 0
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_36 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- LABEL: label_36
     |  |        |  +- while
     |  |        |     +- Op: Literal {Z}
     |  |        |     |  +- Boolean: true
     |  |        |     +- Block:
     |  |        |        +- Code:
     |  |        |           +- St: Proxy Call
     |  |        |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |           |  +- Arguments
     |  |        |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  |        |           +- St: =
     |  |        |           |  +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |        |           |  +- Op: Proxy Call {#unknown#}
     |  |        |           |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |        |           |     +- No Arguments
     |  |        |           +- St: =
     |  |        |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |        |           |  +- Op: Proxy Call {#unknown#}
     |  |        |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |           |     +- Arguments
     |  |        |           |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  |        |           +- St: Invalid Call
     |  |        |           |  +- Op: Method:
     |  |        |           |  |  +- java.util.List -> add
     |  |        |           |  |  +- Op: Local variable access: listLengths {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |        |           |  +- Arguments
     |  |        |           |     +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |        |           +- St: ++X
     |  |        |           |  +- Op: Local variable access: dims {I}
     |  |        |           +- If Statement:
     |  |        |              +- Condition:
     |  |        |              |  +- Op: Proxy Call {#unknown#}
     |  |        |              |     +- Op: >> Proxy Data Access [ jj_2_34 ] << {#unknown#}
     |  |        |              |     +- Arguments
     |  |        |              |        +- Op: Literal {I}
     |  |        |              |           +- Integer: 2
     |  |        |              +- If Code:
     |  |        |              |  +- Block:
     |  |        |              |     +- Code:
     |  |        |              |        +- St: No operation
     |  |        |              +- Else Code:
     |  |        |                 +- Block:
     |  |        |                    +- Code:
     |  |        |                       +- Proxy break: label_36
     |  |        +- LABEL: label_37
     |  |        |  +- while
     |  |        |     +- Op: Literal {Z}
     |  |        |     |  +- Boolean: true
     |  |        |     +- Block:
     |  |        |        +- Code:
     |  |        |           +- If Statement:
     |  |        |           |  +- Condition:
     |  |        |           |  |  +- Op: Proxy Call {#unknown#}
     |  |        |           |  |     +- Op: >> Proxy Data Access [ jj_2_35 ] << {#unknown#}
     |  |        |           |  |     +- Arguments
     |  |        |           |  |        +- Op: Literal {I}
     |  |        |           |  |           +- Integer: 2
     |  |        |           |  +- If Code:
     |  |        |           |  |  +- Block:
     |  |        |           |  |     +- Code:
     |  |        |           |  |        +- St: No operation
     |  |        |           |  +- Else Code:
     |  |        |           |     +- Block:
     |  |        |           |        +- Code:
     |  |        |           |           +- Proxy break: label_37
     |  |        |           +- St: Proxy Call
     |  |        |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |           |  +- Arguments
     |  |        |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  |        |           +- St: =
     |  |        |           |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |        |           |  +- Op: Proxy Call {#unknown#}
     |  |        |           |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |           |     +- Arguments
     |  |        |           |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  |        |           +- St: ++X
     |  |        |              +- Op: Local variable access: dims {I}
     |  |        +- St: =
     |  |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;}
     |  |              +- Lcat/quadriga/parsers/code/expressions/ArrayAllocationExpressionNode;
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: in {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |                 +- Op: Invalid Call {#unknown#}
     |  |                 |  +- Op: Method:
     |  |                 |  |  +- java.util.List -> toArray
     |  |                 |  |  +- Op: Local variable access: listLengths {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |                 |  +- Arguments
     |  |                 |     +- Op: new array {[Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |                 |        +- Lcat/quadriga/parsers/code/expressions/ExpressionNode;
     |  |                 |        +- Op: Call {I}
     |  |                 |           +- Op: Method:
     |  |                 |           |  +- java.util.List -> size
     |  |                 |           |  +- Op: Local variable access: listLengths {Ljava/util/List<Lcat/quadriga/parsers/code/expressions/ExpressionNode;>;}
     |  |                 |           +- No Arguments
     |  |                 +- Op: Local variable access: dims {I}
     |  |                 +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |                    +- Arguments
     |  |                       +- Op: Local variable access: n {Lcat/quadriga/parsers/Token;}
     |  |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |              |  +- LABEL: label_38
     |              |  |  +- while
     |              |  |     +- Op: Literal {Z}
     |              |  |     |  +- Boolean: true
     |              |  |     +- Block:
     |              |  |        +- Code:
     |              |  |           +- St: Proxy Call
     |              |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |           |  +- Arguments
     |              |  |           |     +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |              |  |           +- St: Proxy Call
     |              |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |           |  +- Arguments
     |              |  |           |     +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |              |  |           +- switch
     |              |  |              +- Op: ? {#unknown#}
     |              |  |              |  +- Op: == {Z}
     |              |  |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |              |  |  +- Op: - {I}
     |              |  |              |  |     +- Op: Literal {I}
     |              |  |              |  |        +- Integer: 1
     |              |  |              |  +- Op: Proxy Call {#unknown#}
     |              |  |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |              |  |  +- No Arguments
     |              |  |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |              +- case
     |              |  |              |  +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |              |  |              |  +- St: No operation
     |              |  |              |  +- Proxy break
     |              |  |              +- default
     |              |  |                 +- Proxy break: label_38
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ArrayInitializer ] << {#unknown#}
     |              |  |     +- Arguments
     |              |  |        +- Op: Local variable access: in {Lcat/quadriga/parsers/code/types/BaseType;}
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; Statement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ statement ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_37 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |           +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ LabeledStatement ] << {#unknown#}
     |  |              +- No Arguments
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ AssertStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ EmptyStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ StatementExpression ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ SwitchStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ IfStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ WhileStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ DoStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ForStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ BreakStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ContinueStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ReturnStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ ThrowStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ SynchronizedStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ TryStatement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/AssertStatementNode; AssertStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ assertion ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ message ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: message {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: assertion {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: message {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/AssertStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/AssertStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: assertion {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: message {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/LabeledStatementNode; LabeledStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ node ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: node {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/LabeledStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/LabeledStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Local variable access: node {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                    +- Op: >> Proxy Data Access [ symbolTable ] << {#unknown#}
     |                    +- Op: >> Proxy Data Access [ errorLog ] << {#unknown#}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/BlockCode; Block
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ blockStatementNode ] Type [ Lcat/quadriga/parsers/code/statements/BlockStatementNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ prevBlock ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode; ]
  |  +- Symbol Var [ block ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;
     |     +- Arguments
     |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- LABEL: label_39
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_39
     |           +- St: =
     |           |  +- Op: Local variable access: blockStatementNode {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ BlockStatement ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: Proxy Call
     |              +- Op: >> Proxy Data Access [ localBlock.addStatement ] << {#unknown#}
     |              +- Arguments
     |                 +- Op: Local variable access: blockStatementNode {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ localBlock.setEndToken ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: block {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |     +- Op: Proxy Call {#unknown#}
     |        +- Op: >> Proxy Data Access [ localBlock.transformToBlockCode ] << {#unknown#}
     |        +- No Arguments
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |  +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: block {Lcat/quadriga/parsers/code/statements/BlockCode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/BlockStatementNode; BlockStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/statements/BlockStatementNode; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_38 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ LocalVariableDeclaration ] << {#unknown#}
     |  |        |     +- No Arguments
     |  |        +- St: =
     |  |           +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |              +- Arguments
     |  |                 +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |              |  +- St: Proxy Call
     |              |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceDeclaration ] << {#unknown#}
     |              |  |  +- Arguments
     |              |  |     +- Op: Literal {I}
     |              |  |     |  +- Integer: 0
     |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |              |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/NoOpStatement;}
     |              |  |     +- Lcat/quadriga/parsers/code/statements/NoOpStatement;
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementList; LocalVariableDeclaration
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ modifiers ] Type [ I ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ var ] Type [ Lcat/quadriga/parsers/VarAndInit; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ initializers ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: initializers {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/StatementNode;>;
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: modifiers {I}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: =
     |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: =
     |  +- Op: Local variable access: var {Lcat/quadriga/parsers/VarAndInit;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ VariableDeclarator ] << {#unknown#}
     |     +- Arguments
     |        +- Op: Local variable access: modifiers {I}
     |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: >> Proxy Data Access [ init ] << {#unknown#}
     |  |     |  +- class cat.quadriga.parsers.VarAndInit
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: initializers {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |              +- Arguments
     |                 +- Op: >> Proxy Data Access [ init ] << {#unknown#}
     |                    +- class cat.quadriga.parsers.VarAndInit
     +- LABEL: label_40
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_40
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: var {Lcat/quadriga/parsers/VarAndInit;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ VariableDeclarator ] << {#unknown#}
     |           |     +- Arguments
     |           |        +- Op: Local variable access: modifiers {I}
     |           |        +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: != {Z}
     |              |     +- Op: >> Proxy Data Access [ init ] << {#unknown#}
     |              |     |  +- class cat.quadriga.parsers.VarAndInit
     |              |     +- Op: Literal {Null type}
     |              |        +- Null
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: Call
     |                          +- Op: Method:
     |                          |  +- java.util.List -> add
     |                          |  +- Op: Local variable access: initializers {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |                          +- Arguments
     |                             +- Op: >> Proxy Data Access [ init ] << {#unknown#}
     |                                +- class cat.quadriga.parsers.VarAndInit
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/StatementList;}
     |                 +- Lcat/quadriga/parsers/code/statements/StatementList;
     |                 +- Arguments
     |                    +- Op: Invalid Call {#unknown#}
     |                       +- Op: Method:
     |                       |  +- java.util.List -> toArray
     |                       |  +- Op: Local variable access: initializers {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |                       +- Arguments
     |                          +- Op: new array {[Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                             +- Lcat/quadriga/parsers/code/statements/StatementNode;
     |                             +- Op: Call {I}
     |                                +- Op: Method:
     |                                |  +- java.util.List -> size
     |                                |  +- Op: Local variable access: initializers {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |                                +- No Arguments
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/NoOpStatement; EmptyStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/NoOpStatement;}
     |                 +- Lcat/quadriga/parsers/code/statements/NoOpStatement;
     |                 +- Arguments
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; StatementExpression
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ expression ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ expression2 ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ assignOperator ] Type [ Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator; ]
  |  +- Symbol Var [ statementNode ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ PreIncrementExpression ] << {#unknown#}
     |  |  |  |  |     +- No Arguments
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ PreDecrementExpression ] << {#unknown#}
     |  |  |  |  |     +- No Arguments
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: Proxy Call
     |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     |  +- Arguments
     |  |  |     |     +- Op: - {I}
     |  |  |     |        +- Op: Literal {I}
     |  |  |     |           +- Integer: 1
     |  |  |     +- throw
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |           +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: statementNode {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/StatementFromExpresion;}
     |  |  |     +- Lcat/quadriga/parsers/code/statements/StatementFromExpresion;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ PrimaryExpression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  +- switch
     |  |  |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |  |  |        +- Integer: 1
     |  |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  |  |  +- No Arguments
     |  |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- case
     |  |  |  |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  |  |  |  +- St: =
     |  |  |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |  |  |     +- Arguments
     |  |  |  |  |  |  |        +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  |  |  |  |  |  +- Proxy break
     |  |  |  |  |  +- case
     |  |  |  |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  |  |  +- St: =
     |  |  |  |  |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |  |  |     +- Arguments
     |  |  |  |  |  |  |        +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  |  |  |  |  |  +- Proxy break
     |  |  |  |  |  +- default
     |  |  |  |  |     +- St: Proxy Call
     |  |  |  |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |     |  +- Arguments
     |  |  |  |  |     |     +- Op: - {I}
     |  |  |  |  |     |        +- Op: Literal {I}
     |  |  |  |  |     |           +- Integer: 1
     |  |  |  |  |     +- throw
     |  |  |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |  |  |  |  |           +- Lcat/quadriga/parsers/ParseException;
     |  |  |  |  |           +- No Arguments
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/UnaryOperation;}
     |  |  |  |  |     +- Lcat/quadriga/parsers/code/expressions/UnaryOperation;
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: >> Proxy Data Access [ Proxy access to member PRE_INC ] << {#unknown#}
     |  |  |  |  |        |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |  |  |  |  |        |     +- class cat.quadriga.parsers.code.expressions.UnaryOperation
     |  |  |  |  |        +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: statementNode {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/StatementFromExpresion;}
     |  |  |  |  |     +- Lcat/quadriga/parsers/code/statements/StatementFromExpresion;
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  +- Proxy break
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ PLUSASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ MINUSASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ STARASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ SLASHASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ ANDASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ ORASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ XORASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ REMASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ LSHIFTASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ RSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: assignOperator {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ AssignmentOperator ] << {#unknown#}
     |  |  |  |  |     +- No Arguments
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: expression2 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |  |  |     +- No Arguments
     |  |  |  |  +- St: =
     |  |  |  |  |  +- Op: Local variable access: statementNode {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode;}
     |  |  |  |  |     +- Lcat/quadriga/parsers/code/statements/AssigmentStatementNode;
     |  |  |  |  |     +- Arguments
     |  |  |  |  |        +- Op: Local variable access: assignOperator {Lcat/quadriga/parsers/code/statements/AssigmentStatementNode/Operator;}
     |  |  |  |  |        +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  |        +- Op: Local variable access: expression2 {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: =
     |  |  |        +- Op: Local variable access: statementNode {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/statements/StatementFromExpresion;}
     |  |  |           +- Lcat/quadriga/parsers/code/statements/StatementFromExpresion;
     |  |  |           +- Arguments
     |  |  |              +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: statementNode {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/SwitchStatementNode; SwitchStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ in ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ label ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ statements ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>; ]
  |  +- Symbol Var [ cases ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>; ]
  |  +- Symbol Var [ bsn ] Type [ Lcat/quadriga/parsers/code/statements/BlockStatementNode; ]
  |  +- Symbol Var [ prevBlock ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode; ]
  |  +- Symbol Var [ node ] Type [ Lcat/quadriga/parsers/code/statements/SwitchStatementNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: cases {Ljava/util/List<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>;
     |        +- No Arguments
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;
     |     +- Arguments
     |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- LABEL: label_41
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CASE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_41
     |           +- St: =
     |           |  +- Op: Local variable access: label {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ SwitchLabel ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: =
     |           |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>;}
     |           |  +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>;}
     |           |     +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>;
     |           |     +- No Arguments
     |           +- LABEL: label_42
     |           |  +- while
     |           |     +- Op: Literal {Z}
     |           |     |  +- Boolean: true
     |           |     +- Block:
     |           |        +- Code:
     |           |           +- switch
     |           |           |  +- Op: ? {#unknown#}
     |           |           |  |  +- Op: == {Z}
     |           |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |           |  |  |  +- Op: - {I}
     |           |           |  |  |     +- Op: Literal {I}
     |           |           |  |  |        +- Integer: 1
     |           |           |  |  +- Op: Proxy Call {#unknown#}
     |           |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |           |  |  |  +- No Arguments
     |           |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |           |           |  +- case
     |           |           |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |           |           |  |  +- St: No operation
     |           |           |  |  +- Proxy break
     |           |           |  +- default
     |           |           |     +- Proxy break: label_42
     |           |           +- St: =
     |           |           |  +- Op: Local variable access: bsn {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |           |           |  +- Op: Proxy Call {#unknown#}
     |           |           |     +- Op: >> Proxy Data Access [ BlockStatement ] << {#unknown#}
     |           |           |     +- No Arguments
     |           |           +- St: Call
     |           |              +- Op: Method:
     |           |              |  +- java.util.List -> add
     |           |              |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>;}
     |           |              +- Arguments
     |           |                 +- Op: Local variable access: bsn {Lcat/quadriga/parsers/code/statements/BlockStatementNode;}
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: cases {Ljava/util/List<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>;}
     |              +- Arguments
     |                 +- Op: Constructor {Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;}
     |                    +- Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;
     |                    +- Arguments
     |                       +- Op: Local variable access: label {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                       +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/BlockStatementNode;>;}
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: node {Lcat/quadriga/parsers/code/statements/SwitchStatementNode;}
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/statements/SwitchStatementNode;}
     |        +- Lcat/quadriga/parsers/code/statements/SwitchStatementNode;
     |        +- Arguments
     |           +- Op: Local variable access: in {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |           +- Op: Local variable access: cases {Ljava/util/List<Lcat/quadriga/parsers/code/statements/SwitchStatementNode/CaseNode;>;}
     |           +- Op: >> Proxy Data Access [ localBlock.localVariables ] << {#unknown#}
     |           +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |              +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |              +- Arguments
     |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                 +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |  +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: node {Lcat/quadriga/parsers/code/statements/SwitchStatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/expressions/ExpressionNode; SwitchLabel
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ cas ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CASE ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ CASE ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: cas {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |  +- Proxy break
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: cas {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Literal {Null type}
     |  |  |     +- Null
     |  |  +- Proxy break
     |  +- default
     |     +- St: Proxy Call
     |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     |  +- Arguments
     |     |     +- Op: - {I}
     |     |        +- Op: Literal {I}
     |     |           +- Integer: 1
     |     +- throw
     |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |           +- Lcat/quadriga/parsers/ParseException;
     |           +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: cas {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/IfStatementNode; IfStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ node1 ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ node2 ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ expression ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: node2 {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: =
     |  +- Op: Local variable access: node1 {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |  +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ ELSE ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ ELSE ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: node2 {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/IfStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/IfStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Local variable access: expression {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: node1 {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                    +- Op: Local variable access: node2 {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                    +- Op: >> Proxy Data Access [ errorLog ] << {#unknown#}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/WhileStatementNode; WhileStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ condition ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ execution ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/WhileStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/WhileStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                    +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/DoStatementNode; DoStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ condition ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ execution ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/DoStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/DoStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                    +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; ForStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ out ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>; ]
  |  +- Symbol Var [ init ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ update ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ execution ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ condition ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ mods ] Type [ I ]
  |  +- Symbol Var [ type ] Type [ Lcat/quadriga/parsers/code/types/BaseType; ]
  |  +- Symbol Var [ iterable ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ prevBlock ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
     |        +- No Arguments
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |  +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     |     +- Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;
     |     +- Arguments
     |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_39 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Local Variables:
     |  |     |  +- Symbol Var [ it ] Type [ Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol; ]
     |  |     |  +- Symbol Var [ access ] Type [ Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess; ]
     |  |     +- Code:
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: mods {I}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |     +- Arguments
     |  |        |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: iterable {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |        |     +- No Arguments
     |  |        +- Statements:
     |  |        |  +- St: =
     |  |        |     +- Op: Local variable access: it {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        |        +- Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;
     |  |        |        +- Arguments
     |  |        |           +- Op: Local variable access: mods {I}
     |  |        |           +- Op: Local variable access: type {Lcat/quadriga/parsers/code/types/BaseType;}
     |  |        |           +- Op: Field: {Ljava/lang/String;}
     |  |        |              +- cat.quadriga.parsers.Token -> image
     |  |        |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: Local variable access: it {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ localBlock.addLocalVariable ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: Local variable access: it {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        +- Statements:
     |  |        |  +- St: =
     |  |        |     +- Op: Local variable access: access {Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;}
     |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;}
     |  |        |        +- Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;
     |  |        |        +- Arguments
     |  |        |           +- Op: Local variable access: it {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |  |        |           +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |        |              +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |        |              +- Arguments
     |  |        |                 +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  |        +- St: Proxy Call
     |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |        |  +- Arguments
     |  |        |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  |        +- St: =
     |  |        |  +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |        |  +- Op: Proxy Call {#unknown#}
     |  |        |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |  |        |     +- No Arguments
     |  |        +- St: =
     |  |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |           +- Op: Constructor {Lcat/quadriga/parsers/code/statements/IterableFor;}
     |  |              +- Lcat/quadriga/parsers/code/statements/IterableFor;
     |  |              +- Arguments
     |  |                 +- Op: Local variable access: access {Lcat/quadriga/parsers/code/expressions/dataaccess/LocalVarAccess;}
     |  |                 +- Op: Local variable access: iterable {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |                 +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |                 +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |                    +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |                    +- Arguments
     |  |                       +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |                       +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  +- switch
     |              |  |  +- Op: ? {#unknown#}
     |              |  |  |  +- Op: == {Z}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- Op: - {I}
     |              |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |        +- Integer: 1
     |              |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- No Arguments
     |              |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: init {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ ForInit ] << {#unknown#}
     |              |  |  |  |     +- No Arguments
     |              |  |  |  +- St: Proxy Call
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |  +- Arguments
     |              |  |  |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- Proxy break
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: init {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/NoOpStatement;}
     |              |  |  |  |     +- Lcat/quadriga/parsers/code/statements/NoOpStatement;
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |              |  |  |  |           +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |              |  |  |  |           +- Arguments
     |              |  |  |  |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  +- Proxy break
     |              |  |  +- default
     |              |  |     +- St: Proxy Call
     |              |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     |  +- Arguments
     |              |  |     |     +- Op: - {I}
     |              |  |     |        +- Op: Literal {I}
     |              |  |     |           +- Integer: 1
     |              |  |     +- throw
     |              |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |              |  |           +- Lcat/quadriga/parsers/ParseException;
     |              |  |           +- No Arguments
     |              |  +- switch
     |              |  |  +- Op: ? {#unknown#}
     |              |  |  |  +- Op: == {Z}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- Op: - {I}
     |              |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |        +- Integer: 1
     |              |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- No Arguments
     |              |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |              |  |  |  |     +- No Arguments
     |              |  |  |  +- St: Proxy Call
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |  +- Arguments
     |              |  |  |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- Proxy break
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/TrueLiteral;}
     |              |  |  |  |     +- Lcat/quadriga/parsers/code/expressions/dataaccess/LiteralData/TrueLiteral;
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  +- Proxy break
     |              |  |  +- default
     |              |  |     +- St: Proxy Call
     |              |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     |  +- Arguments
     |              |  |     |     +- Op: - {I}
     |              |  |     |        +- Op: Literal {I}
     |              |  |     |           +- Integer: 1
     |              |  |     +- throw
     |              |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |              |  |           +- Lcat/quadriga/parsers/ParseException;
     |              |  |           +- No Arguments
     |              |  +- switch
     |              |  |  +- Op: ? {#unknown#}
     |              |  |  |  +- Op: == {Z}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- Op: - {I}
     |              |  |  |  |     +- Op: Literal {I}
     |              |  |  |  |        +- Integer: 1
     |              |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  |  |  +- No Arguments
     |              |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: update {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ ForUpdate ] << {#unknown#}
     |              |  |  |  |     +- No Arguments
     |              |  |  |  +- St: Proxy Call
     |              |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |  +- Arguments
     |              |  |  |  |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |              |  |  |  +- Proxy break
     |              |  |  +- case
     |              |  |  |  +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |  +- Op: Proxy Call {#unknown#}
     |              |  |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |              |  |  |  +- St: =
     |              |  |  |  |  +- Op: Local variable access: update {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/NoOpStatement;}
     |              |  |  |  |     +- Lcat/quadriga/parsers/code/statements/NoOpStatement;
     |              |  |  |  |     +- Arguments
     |              |  |  |  |        +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |              |  |  |  |           +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |              |  |  |  |           +- Arguments
     |              |  |  |  |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  |              +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |              |  |  |  +- Proxy break
     |              |  |  +- default
     |              |  |     +- St: Proxy Call
     |              |  |     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |              |  |     |  +- Arguments
     |              |  |     |     +- Op: - {I}
     |              |  |     |        +- Op: Literal {I}
     |              |  |     |           +- Integer: 1
     |              |  |     +- throw
     |              |  |        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |              |  |           +- Lcat/quadriga/parsers/ParseException;
     |              |  |           +- No Arguments
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ Statement ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/ClassicFor;}
     |              |  |     +- Lcat/quadriga/parsers/code/statements/ClassicFor;
     |              |  |     +- Arguments
     |              |  |        +- Op: >> Proxy Data Access [ localBlock.localVariables ] << {#unknown#}
     |              |  |        +- Op: Local variable access: init {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |        +- Op: Local variable access: condition {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |              |  |        +- Op: Local variable access: update {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |        +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |        +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |              |  |           +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |              |  |           +- Arguments
     |              |  |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |              |  |              +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- St: =
     |  +- Op: >> Proxy Data Access [ localBlock ] << {#unknown#}
     |  +- Op: Local variable access: prevBlock {Lcat/quadriga/parsers/code/statements/BlockCode/TmpBlockCode;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |  +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; ForInit
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ result ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_2_40 ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 2147483647
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: =
     |  |           +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  |           +- Op: Proxy Call {#unknown#}
     |  |              +- Op: >> Proxy Data Access [ LocalVariableDeclaration ] << {#unknown#}
     |  |              +- No Arguments
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- switch
     |              +- Op: ? {#unknown#}
     |              |  +- Op: == {Z}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- Op: - {I}
     |              |  |     +- Op: Literal {I}
     |              |  |        +- Integer: 1
     |              |  +- Op: Proxy Call {#unknown#}
     |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              |  |  +- No Arguments
     |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |              +- case
     |              |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |              |  +- St: =
     |              |  |  +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |              |  |  +- Op: Proxy Call {#unknown#}
     |              |  |     +- Op: >> Proxy Data Access [ StatementExpressionList ] << {#unknown#}
     |              |  |     +- No Arguments
     |              |  +- Proxy break
     |              +- default
     |                 +- St: Proxy Call
     |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |                 |  +- Arguments
     |                 |     +- Op: - {I}
     |                 |        +- Op: Literal {I}
     |                 |           +- Integer: 1
     |                 +- throw
     |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                       +- Lcat/quadriga/parsers/ParseException;
     |                       +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: result {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; StatementExpressionList
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ statement ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  |  +- Symbol Var [ statements ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/StatementNode;>;
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ StatementExpression ] << {#unknown#}
     |     +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |  +- Arguments
     |     +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- LABEL: label_43
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_43
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ StatementExpression ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: Call
     |              +- Op: Method:
     |              |  +- java.util.List -> add
     |              |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |              +- Arguments
     |                 +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- St: =
     |  +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Constructor {Lcat/quadriga/parsers/code/statements/StatementList;}
     |     +- Lcat/quadriga/parsers/code/statements/StatementList;
     |     +- Arguments
     |        +- Op: Invalid Call {#unknown#}
     |           +- Op: Method:
     |           |  +- java.util.List -> toArray
     |           |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |           +- Arguments
     |              +- Op: new array {[Lcat/quadriga/parsers/code/statements/StatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/StatementNode;
     |                 +- Op: Call {I}
     |                    +- Op: Method:
     |                    |  +- java.util.List -> size
     |                    |  +- Op: Local variable access: statements {Ljava/util/List<Lcat/quadriga/parsers/code/statements/StatementNode;>;}
     |                    +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: statement {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/StatementNode; ForUpdate
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ aux ] Type [ Lcat/quadriga/parsers/code/statements/StatementNode; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/statements/StatementNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ StatementExpressionList ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/statements/StatementNode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/JumpStatement; BreakStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t3 ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t3 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/statements/JumpStatement;}
     |                 +- Lcat/quadriga/parsers/code/statements/JumpStatement;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ Proxy access to member BREAK ] << {#unknown#}
     |                    |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |                    |     +- class cat.quadriga.parsers.code.statements.JumpStatement
     |                    +- Op: ? {Null type}
     |                    |  +- Op: == {Z}
     |                    |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    |  |  +- Op: Literal {Null type}
     |                    |  |     +- Null
     |                    |  +- Op: Literal {Null type}
     |                    |  |  +- Null
     |                    |  +- Op: Field: {Ljava/lang/String;}
     |                    |     +- cat.quadriga.parsers.Token -> image
     |                    |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t3 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/JumpStatement; ContinueStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t3 ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |     +- Arguments
     |  |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t3 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/statements/JumpStatement;}
     |                 +- Lcat/quadriga/parsers/code/statements/JumpStatement;
     |                 +- Arguments
     |                    +- Op: >> Proxy Data Access [ Proxy access to member CONTINUE ] << {#unknown#}
     |                    |  +- Op: >> Proxy Data Access [ Operator ] << {#unknown#}
     |                    |     +- class cat.quadriga.parsers.code.statements.JumpStatement
     |                    +- Op: ? {Null type}
     |                    |  +- Op: == {Z}
     |                    |  |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    |  |  +- Op: Literal {Null type}
     |                    |  |     +- Null
     |                    |  +- Op: Literal {Null type}
     |                    |  |  +- Null
     |                    |  +- Op: Field: {Ljava/lang/String;}
     |                    |     +- cat.quadriga.parsers.Token -> image
     |                    |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t3 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/ReturnStatementNode; ReturnStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ exp ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/ReturnStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/ReturnStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/ThrowStatementNode; ThrowStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ t2 ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ exp ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  +- Code:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/ThrowStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/ThrowStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: t2 {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/SynchronizedStatementNode; SynchronizedStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ exp ] Type [ Lcat/quadriga/parsers/code/expressions/ExpressionNode; ]
  |  +- Symbol Var [ block ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Expression ] << {#unknown#}
     |     +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: block {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |     +- No Arguments
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/SynchronizedStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/SynchronizedStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: exp {Lcat/quadriga/parsers/code/expressions/ExpressionNode;}
     |                    +- Op: Local variable access: block {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |                    +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                       +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                       +- Arguments
     |                          +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                          +- Op: Local variable access: block {Lcat/quadriga/parsers/code/statements/BlockCode;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public Lcat/quadriga/parsers/code/statements/TryStatementNode; TryStatement
  Params
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ param ] Type [ Lcat/quadriga/parsers/ParameterClass; ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ cz ] Type [ Lcat/quadriga/parsers/code/CodeZone; ]
  |  +- Symbol Var [ execution ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  |  +- Symbol Var [ aux ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  |  +- Symbol Var [ finalment ] Type [ Lcat/quadriga/parsers/code/statements/BlockCode; ]
  |  +- Symbol Var [ catches ] Type [ Ljava/util/List<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- Statements:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: finalment {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |     +- Op: Literal {Null type}
     |        +- Null
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: catches {Ljava/util/List<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>;}
     |     +- Op: Constructor {Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>;}
     |        +- Ljava/util/LinkedList<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>;
     |        +- No Arguments
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |     +- No Arguments
     +- St: =
     |  +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |  +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |     +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |     +- Arguments
     |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |        +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/BlockCode;}
     +- LABEL: label_44
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Local Variables:
     |        |  +- Symbol Var [ symbol ] Type [ Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol; ]
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CATCH ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_44
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ CATCH ] << {#unknown#}
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |           +- St: =
     |           |  +- Op: Local variable access: param {Lcat/quadriga/parsers/ParameterClass;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ FormalParameter ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |           +- Statements:
     |           |  +- St: =
     |           |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |           |        +- Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;
     |           |        +- Arguments
     |           |           +- Op: >> Proxy Data Access [ modifiers ] << {#unknown#}
     |           |           |  +- class cat.quadriga.parsers.ParameterClass
     |           |           +- Op: >> Proxy Data Access [ type ] << {#unknown#}
     |           |           |  +- class cat.quadriga.parsers.ParameterClass
     |           |           +- Op: >> Proxy Data Access [ name ] << {#unknown#}
     |           |              +- class cat.quadriga.parsers.ParameterClass
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ symbolTable.newContext ] << {#unknown#}
     |           |  +- No Arguments
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ symbolTable.addSymbol ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |           +- St: =
     |           |  +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |           |     +- No Arguments
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ symbolTable.deleteContext ] << {#unknown#}
     |           |  +- No Arguments
     |           +- St: Call
     |           |  +- Op: Method:
     |           |  |  +- java.util.List -> add
     |           |  |  +- Op: Local variable access: catches {Ljava/util/List<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>;}
     |           |  +- Arguments
     |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;}
     |           |        +- Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;
     |           |        +- Arguments
     |           |           +- Op: Local variable access: symbol {Lcat/quadriga/parsers/code/symbols/LocalVariableSymbol;}
     |           |           +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |           +- St: =
     |              +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |              +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |                 +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |                 +- Arguments
     |                    +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |                    +- Op: Local variable access: aux {Lcat/quadriga/parsers/code/statements/BlockCode;}
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FINALLY ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: >> Proxy Data Access [ FINALLY ] << {#unknown#}
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: finalment {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |     +- Op: >> Proxy Data Access [ Block ] << {#unknown#}
     |  |  |     +- No Arguments
     |  |  +- St: =
     |  |  |  +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |  |  |  +- Op: Invalid Constructor {Lcat/quadriga/parsers/code/CodeZoneClass;}
     |  |  |     +- Lcat/quadriga/parsers/code/CodeZoneClass;
     |  |  |     +- Arguments
     |  |  |        +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     |  |  |        +- Op: Local variable access: finalment {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- Block:
     |  +- Code:
     |     +- If Statement:
     |        +- Condition:
     |        |  +- Op: Literal {Z}
     |        |     +- Boolean: true
     |        +- If Code:
     |           +- return
     |              +- Op: Constructor {Lcat/quadriga/parsers/code/statements/TryStatementNode;}
     |                 +- Lcat/quadriga/parsers/code/statements/TryStatementNode;
     |                 +- Arguments
     |                    +- Op: Local variable access: execution {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |                    +- Op: Local variable access: catches {Ljava/util/List<Lcat/quadriga/parsers/code/statements/TryStatementNode/CatchBlock;>;}
     |                    +- Op: Local variable access: finalment {Lcat/quadriga/parsers/code/statements/BlockCode;}
     |                    +- Op: Local variable access: cz {Lcat/quadriga/parsers/code/CodeZone;}
     +- throw
        +- Op: Constructor {Ljava/lang/Error;}
           +- Ljava/lang/Error;
           +- Arguments
              +- Op: Literal {Ljava/lang/String;}
                 +- String: "Missing return statement in function"
  final public RUNSIGNEDSHIFT
  Params
  throws Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: && {Z}
     |  |     +- Op: == {Z}
     |  |     |  +- Op: >> Proxy Data Access [ kind ] << {#unknown#}
     |  |     |  |  +- Op: Proxy Call {#unknown#}
     |  |     |  |     +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |  |     |  |     +- Arguments
     |  |     |  |        +- Op: Literal {I}
     |  |     |  |           +- Integer: 1
     |  |     |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  |     +- Op: == {Z}
     |  |        +- Op: >> Proxy Data Access [ realKind ] << {#unknown#}
     |  |        |  +- Op: cast #unknown cat.quadriga.parsers.tokens.MySimpleToken # {#unknown cat.quadriga.parsers.tokens.MySimpleToken #}
     |  |        |     +- Op: Proxy Call {#unknown#}
     |  |        |        +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |  |        |        +- Arguments
     |  |        |           +- Op: Literal {I}
     |  |        |              +- Integer: 1
     |  |        +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFT ] << {#unknown#}
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: - {I}
     |           |        +- Op: Literal {I}
     |           |           +- Integer: 1
     |           +- throw
     |              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                 +- Lcat/quadriga/parsers/ParseException;
     |                 +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        +- Arguments
           +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
  final public RSIGNEDSHIFT
  Params
  throws Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: && {Z}
     |  |     +- Op: == {Z}
     |  |     |  +- Op: >> Proxy Data Access [ kind ] << {#unknown#}
     |  |     |  |  +- Op: Proxy Call {#unknown#}
     |  |     |  |     +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |  |     |  |     +- Arguments
     |  |     |  |        +- Op: Literal {I}
     |  |     |  |           +- Integer: 1
     |  |     |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  |     +- Op: == {Z}
     |  |        +- Op: >> Proxy Data Access [ realKind ] << {#unknown#}
     |  |        |  +- Op: cast #unknown cat.quadriga.parsers.tokens.MySimpleToken # {#unknown cat.quadriga.parsers.tokens.MySimpleToken #}
     |  |        |     +- Op: Proxy Call {#unknown#}
     |  |        |        +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |  |        |        +- Arguments
     |  |        |           +- Op: Literal {I}
     |  |        |              +- Integer: 1
     |  |        +- Op: >> Proxy Data Access [ RSIGNEDSHIFT ] << {#unknown#}
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: Proxy Call
     |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |           |  +- Arguments
     |           |     +- Op: - {I}
     |           |        +- Op: Literal {I}
     |           |           +- Integer: 1
     |           +- throw
     |              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
     |                 +- Lcat/quadriga/parsers/ParseException;
     |                 +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        +- Arguments
           +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
  final public Annotation
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- If Statement:
        +- Condition:
        |  +- Op: Proxy Call {#unknown#}
        |     +- Op: >> Proxy Data Access [ jj_2_41 ] << {#unknown#}
        |     +- Arguments
        |        +- Op: Literal {I}
        |           +- Integer: 2147483647
        +- If Code:
        |  +- Block:
        |     +- Code:
        |        +- St: Proxy Call
        |           +- Op: >> Proxy Data Access [ NormalAnnotation ] << {#unknown#}
        |           +- Arguments
        |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Else Code:
           +- If Statement:
              +- Condition:
              |  +- Op: Proxy Call {#unknown#}
              |     +- Op: >> Proxy Data Access [ jj_2_42 ] << {#unknown#}
              |     +- Arguments
              |        +- Op: Literal {I}
              |           +- Integer: 2147483647
              +- If Code:
              |  +- Block:
              |     +- Code:
              |        +- St: Proxy Call
              |           +- Op: >> Proxy Data Access [ SingleMemberAnnotation ] << {#unknown#}
              |           +- Arguments
              |              +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
              +- Else Code:
                 +- Block:
                    +- Code:
                       +- switch
                          +- Op: ? {#unknown#}
                          |  +- Op: == {Z}
                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  +- Op: - {I}
                          |  |     +- Op: Literal {I}
                          |  |        +- Integer: 1
                          |  +- Op: Proxy Call {#unknown#}
                          |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          |  |  +- No Arguments
                          |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                          +- case
                          |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
                          |  +- St: Proxy Call
                          |  |  +- Op: >> Proxy Data Access [ MarkerAnnotation ] << {#unknown#}
                          |  |  +- Arguments
                          |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                          |  +- Proxy break
                          +- default
                             +- St: Proxy Call
                             |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                             |  +- Arguments
                             |     +- Op: - {I}
                             |        +- Op: Literal {I}
                             |           +- Integer: 1
                             +- throw
                                +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                                   +- Lcat/quadriga/parsers/ParseException;
                                   +- No Arguments
  final public NormalAnnotation
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "@"
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |  +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "("
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ MemberValuePairs ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: ")"
  final public MarkerAnnotation
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "@"
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
        +- No Arguments
  final public SingleMemberAnnotation
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "@"
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ Name ] << {#unknown#}
     |  +- No Arguments
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "("
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ MemberValue ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: ")"
  final public MemberValuePairs
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ MemberValuePair ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- LABEL: label_45
        +- while
           +- Op: Literal {Z}
           |  +- Boolean: true
           +- Block:
              +- Code:
                 +- switch
                 |  +- Op: ? {#unknown#}
                 |  |  +- Op: == {Z}
                 |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  |  |  +- Op: - {I}
                 |  |  |     +- Op: Literal {I}
                 |  |  |        +- Integer: 1
                 |  |  +- Op: Proxy Call {#unknown#}
                 |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  |  |  +- No Arguments
                 |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 |  +- case
                 |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
                 |  |  +- St: No operation
                 |  |  +- Proxy break
                 |  +- default
                 |     +- Proxy break: label_45
                 +- St: Proxy Call
                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
                 |  +- Arguments
                 |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.util.List -> add
                 |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                 |  +- Arguments
                 |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
                 |        +- Op: Static Method:
                 |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
                 |        +- No Arguments
                 +- St: Call
                 |  +- Op: Method:
                 |  |  +- java.util.List -> add
                 |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
                 |  +- Arguments
                 |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
                 |        +- Lcat/quadriga/parsers/code/printers/PrintString;
                 |        +- Arguments
                 |           +- Op: Literal {Ljava/lang/String;}
                 |              +- String: ","
                 +- St: Proxy Call
                    +- Op: >> Proxy Data Access [ MemberValuePair ] << {#unknown#}
                    +- Arguments
                       +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public MemberValuePair
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "="
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ MemberValue ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public MemberValue
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- switch
        +- Op: ? {#unknown#}
        |  +- Op: == {Z}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- Op: - {I}
        |  |     +- Op: Literal {I}
        |  |        +- Integer: 1
        |  +- Op: Proxy Call {#unknown#}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ Annotation ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- Proxy break
        +- case
        |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ MemberValueArrayInitializer ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- Proxy break
        +- case
        |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ ConditionalExpression ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Proxy break
        +- default
           +- St: Proxy Call
           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
           |  +- Arguments
           |     +- Op: - {I}
           |        +- Op: Literal {I}
           |           +- Integer: 1
           +- throw
              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                 +- Lcat/quadriga/parsers/ParseException;
                 +- No Arguments
  final public MemberValueArrayInitializer
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "{"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- switch
     |  +- Op: ? {#unknown#}
     |  |  +- Op: == {Z}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- Op: - {I}
     |  |  |     +- Op: Literal {I}
     |  |  |        +- Integer: 1
     |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- No Arguments
     |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- case
     |  |  +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  |  +- St: Proxy Call
     |  |  |  +- Op: >> Proxy Data Access [ MemberValue ] << {#unknown#}
     |  |  |  +- Arguments
     |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- LABEL: label_46
     |  |  |  +- while
     |  |  |     +- Op: Literal {Z}
     |  |  |     |  +- Boolean: true
     |  |  |     +- Block:
     |  |  |        +- Code:
     |  |  |           +- If Statement:
     |  |  |           |  +- Condition:
     |  |  |           |  |  +- Op: Proxy Call {#unknown#}
     |  |  |           |  |     +- Op: >> Proxy Data Access [ jj_2_43 ] << {#unknown#}
     |  |  |           |  |     +- Arguments
     |  |  |           |  |        +- Op: Literal {I}
     |  |  |           |  |           +- Integer: 2
     |  |  |           |  +- If Code:
     |  |  |           |  |  +- Block:
     |  |  |           |  |     +- Code:
     |  |  |           |  |        +- St: No operation
     |  |  |           |  +- Else Code:
     |  |  |           |     +- Block:
     |  |  |           |        +- Code:
     |  |  |           |           +- Proxy break: label_46
     |  |  |           +- St: Proxy Call
     |  |  |           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |           +- St: Call
     |  |  |           |  +- Op: Method:
     |  |  |           |  |  +- java.util.List -> add
     |  |  |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |  |  |           |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |  |  |           |        +- Arguments
     |  |  |           |           +- Op: Literal {Ljava/lang/String;}
     |  |  |           |              +- String: "}"
     |  |  |           +- St: Call
     |  |  |           |  +- Op: Method:
     |  |  |           |  |  +- java.util.List -> add
     |  |  |           |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  |           |  +- Arguments
     |  |  |           |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |  |  |           |        +- Op: Static Method:
     |  |  |           |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |  |  |           |        +- No Arguments
     |  |  |           +- St: Proxy Call
     |  |  |              +- Op: >> Proxy Data Access [ MemberValue ] << {#unknown#}
     |  |  |              +- Arguments
     |  |  |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  |  +- switch
     |  |  |  +- Op: ? {#unknown#}
     |  |  |  |  +- Op: == {Z}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- Op: - {I}
     |  |  |  |  |     +- Op: Literal {I}
     |  |  |  |  |        +- Integer: 1
     |  |  |  |  +- Op: Proxy Call {#unknown#}
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  |  |  +- No Arguments
     |  |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  |  |  +- case
     |  |  |  |  +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |  |  +- St: Proxy Call
     |  |  |  |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  |  |  |  |  +- Arguments
     |  |  |  |  |     +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  |  |  |  +- Proxy break
     |  |  |  +- default
     |  |  |     +- St: No operation
     |  |  +- Proxy break
     |  +- default
     |     +- St: No operation
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: "}"
  final public AnnotationTypeDeclaration
  Params
  modifiers: I
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     +- St: =
     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |  +- Op: Proxy Call {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |     +- Arguments
     |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "@"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "interface"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Field: {Ljava/lang/String;}
     |              +- cat.quadriga.parsers.Token -> image
     |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ AnnotationTypeBody ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  final public AnnotationTypeBody
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "{"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintInitTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintInitTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- LABEL: label_47
     |  +- while
     |     +- Op: Literal {Z}
     |     |  +- Boolean: true
     |     +- Block:
     |        +- Code:
     |           +- switch
     |           |  +- Op: ? {#unknown#}
     |           |  |  +- Op: == {Z}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- Op: - {I}
     |           |  |  |     +- Op: Literal {I}
     |           |  |  |        +- Integer: 1
     |           |  |  +- Op: Proxy Call {#unknown#}
     |           |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  |  |  +- No Arguments
     |           |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |           |  +- case
     |           |  |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |           |  |  +- St: No operation
     |           |  |  +- Proxy break
     |           |  +- default
     |           |     +- Proxy break: label_47
     |           +- St: Proxy Call
     |              +- Op: >> Proxy Data Access [ AnnotationTypeMemberDeclaration ] << {#unknown#}
     |              +- Arguments
     |                 +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintEndTab;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintEndTab -> getInstance
     |        +- No Arguments
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintIntro;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintIntro -> getInstance
     |        +- No Arguments
     +- St: Call
        +- Op: Method:
        |  +- java.util.List -> add
        |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        +- Arguments
           +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
              +- Lcat/quadriga/parsers/code/printers/PrintString;
              +- Arguments
                 +- Op: Literal {Ljava/lang/String;}
                    +- String: "}"
  final public AnnotationTypeMemberDeclaration
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ modifiers ] Type [ I ]
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- Statements:
     +- switch
        +- Op: ? {#unknown#}
        |  +- Op: == {Z}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- Op: - {I}
        |  |     +- Op: Literal {I}
        |  |        +- Integer: 1
        |  +- Op: Proxy Call {#unknown#}
        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  +- No Arguments
        |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
        +- case
        |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
        |  +- St: =
        |  |  +- Op: Local variable access: modifiers {I}
        |  |  +- Op: Proxy Call {#unknown#}
        |  |     +- Op: >> Proxy Data Access [ Modifiers ] << {#unknown#}
        |  |     +- Arguments
        |  |        +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  +- If Statement:
        |  |  +- Condition:
        |  |  |  +- Op: Proxy Call {#unknown#}
        |  |  |     +- Op: >> Proxy Data Access [ jj_2_44 ] << {#unknown#}
        |  |  |     +- Arguments
        |  |  |        +- Op: Literal {I}
        |  |  |           +- Integer: 2147483647
        |  |  +- If Code:
        |  |  |  +- Block:
        |  |  |     +- Code:
        |  |  |        +- St: Proxy Call
        |  |  |        |  +- Op: >> Proxy Data Access [ Type ] << {#unknown#}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |        +- St: =
        |  |  |        |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
        |  |  |        |  +- Op: Proxy Call {#unknown#}
        |  |  |        |     +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  |        |     +- Arguments
        |  |  |        |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
        |  |  |        +- St: Proxy Call
        |  |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
        |  |  |        +- St: Proxy Call
        |  |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
        |  |  |        +- St: Call
        |  |  |        |  +- Op: Method:
        |  |  |        |  |  +- java.util.List -> add
        |  |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
        |  |  |        |        +- Lcat/quadriga/parsers/code/printers/PrintString;
        |  |  |        |        +- Arguments
        |  |  |        |           +- Op: Field: {Ljava/lang/String;}
        |  |  |        |              +- cat.quadriga.parsers.Token -> image
        |  |  |        |              +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
        |  |  |        +- St: Call
        |  |  |        |  +- Op: Method:
        |  |  |        |  |  +- java.util.List -> add
        |  |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
        |  |  |        |        +- Lcat/quadriga/parsers/code/printers/PrintString;
        |  |  |        |        +- Arguments
        |  |  |        |           +- Op: Literal {Ljava/lang/String;}
        |  |  |        |              +- String: "("
        |  |  |        +- St: Call
        |  |  |        |  +- Op: Method:
        |  |  |        |  |  +- java.util.List -> add
        |  |  |        |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
        |  |  |        |        +- Lcat/quadriga/parsers/code/printers/PrintString;
        |  |  |        |        +- Arguments
        |  |  |        |           +- Op: Literal {Ljava/lang/String;}
        |  |  |        |              +- String: ")"
        |  |  |        +- switch
        |  |  |        |  +- Op: ? {#unknown#}
        |  |  |        |  |  +- Op: == {Z}
        |  |  |        |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  |        |  |  |  +- Op: - {I}
        |  |  |        |  |  |     +- Op: Literal {I}
        |  |  |        |  |  |        +- Integer: 1
        |  |  |        |  |  +- Op: Proxy Call {#unknown#}
        |  |  |        |  |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  |        |  |  |  +- No Arguments
        |  |  |        |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |  |        |  +- case
        |  |  |        |  |  +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
        |  |  |        |  |  +- St: Proxy Call
        |  |  |        |  |  |  +- Op: >> Proxy Data Access [ DefaultValue ] << {#unknown#}
        |  |  |        |  |  |  +- Arguments
        |  |  |        |  |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |        |  |  +- Proxy break
        |  |  |        |  +- default
        |  |  |        |     +- St: No operation
        |  |  |        +- St: Proxy Call
        |  |  |        |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  |        |  +- Arguments
        |  |  |        |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
        |  |  |        +- St: Call
        |  |  |           +- Op: Method:
        |  |  |           |  +- java.util.List -> add
        |  |  |           |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |  |           +- Arguments
        |  |  |              +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
        |  |  |                 +- Lcat/quadriga/parsers/code/printers/PrintString;
        |  |  |                 +- Arguments
        |  |  |                    +- Op: Literal {Ljava/lang/String;}
        |  |  |                       +- String: ";"
        |  |  +- Else Code:
        |  |     +- Block:
        |  |        +- Code:
        |  |           +- switch
        |  |              +- Op: ? {#unknown#}
        |  |              |  +- Op: == {Z}
        |  |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |              |  |  +- Op: - {I}
        |  |              |  |     +- Op: Literal {I}
        |  |              |  |        +- Integer: 1
        |  |              |  +- Op: Proxy Call {#unknown#}
        |  |              |  |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |              |  |  +- No Arguments
        |  |              |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
        |  |              |  +- St: Proxy Call
        |  |              |  |  +- Op: >> Proxy Data Access [ ClassOrInterfaceDeclaration ] << {#unknown#}
        |  |              |  |  +- Arguments
        |  |              |  |     +- Op: Local variable access: modifiers {I}
        |  |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |              |  +- Proxy break
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
        |  |              |  +- St: Proxy Call
        |  |              |  |  +- Op: >> Proxy Data Access [ EnumDeclaration ] << {#unknown#}
        |  |              |  |  +- Arguments
        |  |              |  |     +- Op: Local variable access: modifiers {I}
        |  |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |              |  +- Proxy break
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
        |  |              |  +- St: Proxy Call
        |  |              |  |  +- Op: >> Proxy Data Access [ AnnotationTypeDeclaration ] << {#unknown#}
        |  |              |  |  +- Arguments
        |  |              |  |     +- Op: Local variable access: modifiers {I}
        |  |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |              |  +- Proxy break
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ BOOLEAN ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ BYTE ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ CHAR ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ DOUBLE ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ FLOAT ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ INT ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ LONG ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ SHORT ] << {#unknown#}
        |  |              +- case
        |  |              |  +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
        |  |              |  +- St: Proxy Call
        |  |              |  |  +- Op: >> Proxy Data Access [ FieldDeclaration ] << {#unknown#}
        |  |              |  |  +- Arguments
        |  |              |  |     +- Op: Local variable access: modifiers {I}
        |  |              |  |     +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
        |  |              |  +- Proxy break
        |  |              +- default
        |  |                 +- St: Proxy Call
        |  |                 |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |                 |  +- Arguments
        |  |                 |     +- Op: - {I}
        |  |                 |        +- Op: Literal {I}
        |  |                 |           +- Integer: 1
        |  |                 +- throw
        |  |                    +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
        |  |                       +- Lcat/quadriga/parsers/ParseException;
        |  |                       +- No Arguments
        |  +- Proxy break
        +- case
        |  +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
        |  +- St: Proxy Call
        |  |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
        |  |  +- Arguments
        |  |     +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
        |  +- Proxy break
        +- default
           +- St: Proxy Call
           |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
           |  +- Arguments
           |     +- Op: - {I}
           |        +- Op: Literal {I}
           |           +- Integer: 1
           +- throw
              +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
                 +- Lcat/quadriga/parsers/ParseException;
                 +- No Arguments
  final public DefaultValue
  Params
  out: Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;
  throws Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_consume_token ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Constructor {Lcat/quadriga/parsers/code/printers/PrintString;}
     |        +- Lcat/quadriga/parsers/code/printers/PrintString;
     |        +- Arguments
     |           +- Op: Literal {Ljava/lang/String;}
     |              +- String: "default"
     +- St: Call
     |  +- Op: Method:
     |  |  +- java.util.List -> add
     |  |  +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
     |  +- Arguments
     |     +- Op: Call {Lcat/quadriga/parsers/code/printers/PrintWhiteSpace;}
     |        +- Op: Static Method:
     |        |  +- cat.quadriga.parsers.code.printers.PrintWhiteSpace -> getInstance
     |        +- No Arguments
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ MemberValue ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: out {Ljava/util/List<Lcat/quadriga/parsers/code/printers/PrintInfo;>;}
  private Z jj_2_1
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_1 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_2
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_2 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_3
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_3 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_4
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_4 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_5
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_5 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_6
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_6 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_7
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_7 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_8
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_8 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_9
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_9 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_10
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_10 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_11
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_11 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_12
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_12 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_13
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_13 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_14
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_14 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_15
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_15 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_16
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_16 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_17
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_17 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_18
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_18 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_19
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_19 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_20
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_20 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_21
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_21 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_22
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_22 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_23
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_23 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_24
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_24 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_25
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_25 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_26
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_26 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_27
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_27 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_28
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_28 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_29
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_29 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_30
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_30 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_31
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_31 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_32
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_32 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_33
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_33 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_34
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_34 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_35
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_35 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_36
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_36 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_37
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_37 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_38
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_38 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_39
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_39 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_40
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_40 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_41
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_41 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_42
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_42 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_43
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_43 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_2_44
  Params
  xla: I
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  +- Op: Local variable access: xla {I}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- Op: = {#unknown#}
     |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- try
        +- Block:
        |  +- Code:
        |     +- return
        |        +- Op: ! {Z}
        |           +- Op: Proxy Call {#unknown#}
        |              +- Op: >> Proxy Data Access [ jj_3_44 ] << {#unknown#}
        |              +- No Arguments
        +- catch {Local var "ls" {#unknown LookaheadSuccess #}}
           +- Block:
              +- Code:
                 +- return
                    +- Op: Literal {Z}
                       +- Boolean: true
  private Z jj_3_17
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_70 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_287
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_167
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_284
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_287 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_287 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_138 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_71
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_115 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_17 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_43
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_87 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_200
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_87 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_43 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 87
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_155
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_167 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_35
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_144
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_200 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_148
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_155 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_34
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_131
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_115 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_130
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_144 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_36
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_34 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_34 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_35 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_135
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_148 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_129
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_88 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_87
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_129 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_130 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_131 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_280
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_36 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_284 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_336
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_177
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_87 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_327
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_336 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_136
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_135 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_89
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_135 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_136 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_286
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_178
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_177 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_340
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_288 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_16
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_166
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_177 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_178 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_339
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_99 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_285
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_288 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_85
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_16 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_61
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_339 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_340 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_283
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_99 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_285 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_286 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_282
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_280 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_281
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_69 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_127
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_128
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_281 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_282 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_283 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_146
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_87 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_333
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_291 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_33
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ NEW ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_76 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_280 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_325
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_333 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_126
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ VOID ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_81
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_33 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_128 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_80
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_126 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_127 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_147
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_3
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_61 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_86
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_324
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_61 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_3 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_154
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_166 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_308
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_324 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 87
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_325 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_151
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_42
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_139
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_151 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_145
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_154 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_41
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_86 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 81
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_307
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_323 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_134
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_147 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_99
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_139 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_76
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 14
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 19
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                          |     +- Arguments
     |                          |        +- Op: Literal {I}
     |                          |           +- Integer: 16
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                      |     +- Arguments
     |                                      |        +- Op: Literal {I}
     |                                      |           +- Integer: 50
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                  |     +- Arguments
     |                                                  |        +- Op: Literal {I}
     |                                                  |           +- Integer: 39
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                              |     +- Arguments
     |                                                              |        +- Op: Literal {I}
     |                                                              |           +- Integer: 41
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                                          |     +- Arguments
     |                                                                          |        +- Op: Literal {I}
     |                                                                          |           +- Integer: 32
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                                                      |     +- Arguments
     |                                                                                      |        +- Op: Literal {I}
     |                                                                                      |           +- Integer: 25
     |                                                                                      +- If Code:
     |                                                                                         +- return
     |                                                                                            +- Op: Literal {Z}
     |                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_133
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_146 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_299
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ENUM ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_307 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_308 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_132
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_145 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_116
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_88
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_132 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_133 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_134 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_176
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ NULL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_117
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_216
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_68 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_73
  Params
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lookingAhead ] << {#unknown#}
     |  +- Op: Literal {Z}
     |     +- Boolean: true
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_semLA ] << {#unknown#}
     |  +- Op: && {Z}
     |     +- Op: == {Z}
     |     |  +- Op: >> Proxy Data Access [ kind ] << {#unknown#}
     |     |  |  +- Op: Proxy Call {#unknown#}
     |     |  |     +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |     |  |     +- Arguments
     |     |  |        +- Op: Literal {I}
     |     |  |           +- Integer: 1
     |     |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |     +- Op: == {Z}
     |        +- Op: >> Proxy Data Access [ realKind ] << {#unknown#}
     |        |  +- Op: cast #unknown cat.quadriga.parsers.tokens.MySimpleToken # {#unknown cat.quadriga.parsers.tokens.MySimpleToken #}
     |        |     +- Op: Proxy Call {#unknown#}
     |        |        +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |        |        +- Arguments
     |        |           +- Op: Literal {I}
     |        |              +- Integer: 1
     |        +- Op: >> Proxy Data Access [ RSIGNEDSHIFT ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lookingAhead ] << {#unknown#}
     |  +- Op: Literal {Z}
     |     +- Boolean: false
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: || {Z}
     |  |     +- Op: ! {Z}
     |  |     |  +- Op: >> Proxy Data Access [ jj_semLA ] << {#unknown#}
     |  |     +- Op: Proxy Call {#unknown#}
     |  |        +- Op: >> Proxy Data Access [ jj_3R_116 ] << {#unknown#}
     |  |        +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_332
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_215
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_68 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_195
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_215 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_216 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_74
  Params
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lookingAhead ] << {#unknown#}
     |  +- Op: Literal {Z}
     |     +- Boolean: true
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_semLA ] << {#unknown#}
     |  +- Op: && {Z}
     |     +- Op: == {Z}
     |     |  +- Op: >> Proxy Data Access [ kind ] << {#unknown#}
     |     |  |  +- Op: Proxy Call {#unknown#}
     |     |  |     +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |     |  |     +- Arguments
     |     |  |        +- Op: Literal {I}
     |     |  |           +- Integer: 1
     |     |  +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |     +- Op: == {Z}
     |        +- Op: >> Proxy Data Access [ realKind ] << {#unknown#}
     |        |  +- Op: cast #unknown cat.quadriga.parsers.tokens.MySimpleToken # {#unknown cat.quadriga.parsers.tokens.MySimpleToken #}
     |        |     +- Op: Proxy Call {#unknown#}
     |        |        +- Op: >> Proxy Data Access [ getToken ] << {#unknown#}
     |        |        +- Arguments
     |        |           +- Op: Literal {I}
     |        |              +- Integer: 1
     |        +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFT ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_lookingAhead ] << {#unknown#}
     |  +- Op: Literal {Z}
     |     +- Boolean: false
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: || {Z}
     |  |     +- Op: ! {Z}
     |  |     |  +- Op: >> Proxy Data Access [ jj_semLA ] << {#unknown#}
     |  |     +- Op: Proxy Call {#unknown#}
     |  |        +- Op: >> Proxy Data Access [ jj_3R_117 ] << {#unknown#}
     |  |        +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_323
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IMPLEMENTS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_332 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_199
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FALSE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_198
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ TRUE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_175
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_198 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_199 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_172
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_171
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_195 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_331
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_360
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FINALLY ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_141
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_171 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_172 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_165
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_176 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_140
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_68 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_322
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ EXTENDS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_331 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_164
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_175 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_102
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_140 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_141 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_163
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STRING_LITERAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_306
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_323 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_305
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_322 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_359
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CATCH ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_334 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_194
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_162
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CHARACTER_LITERAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_304
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_89 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_161
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FLOATING_POINT_LITERAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_150
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_102 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_214
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ TRY ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_359 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_360 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_160
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INTEGER_LITERAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_170
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 20
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_194 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_304 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_305 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_306 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_288 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_69
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_102 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_150 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_153
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_160 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_161 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_162 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_163 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_164 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_165 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- return
     |                                                                    +- Op: Literal {Z}
     |                                                                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_213
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_124
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_99 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_212
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THROW ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_123
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_15
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_69 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_60
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_88 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_358
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_122
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_211
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RETURN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_358 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_32
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_82 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_30
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_14
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_15 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_59
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STRICTFP ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_31
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_81 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_125
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_13
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_69 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_29
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_58
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ VOLATILE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_121
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_210
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CONTINUE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 77
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_79
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_13 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_125 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_14 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_57
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ TRANSIENT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_120
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_77
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_120 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_121 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3_31 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3_32 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_122 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_123 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_124 ] << {#unknown#}
     |                                                                          |     +- No Arguments
     |                                                                          +- If Code:
     |                                                                             +- return
     |                                                                                +- Op: Literal {Z}
     |                                                                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_56
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ NATIVE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_209
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ BREAK ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 77
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_55
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SYNCHRONIZED ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_12
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_28
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_80 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_101
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_12 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_54
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ABSTRACT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_11
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_240
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_85 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_376
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_379 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_100
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_76 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_11 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_11 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_27
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_53
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_239
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_80 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CLASS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_68
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_100 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_101 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_238
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_81 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_237
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_52
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PRIVATE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_236
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_79 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_380
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_203 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_90
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_76 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_51
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PROTECTED ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_10
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_68 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_63
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_10 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_90 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_379
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_203 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_380 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_235
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_50
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_40
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_49
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PUBLIC ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_378
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_379 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_2
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_49 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_50 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_51 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_52 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_53 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_54 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_55 ] << {#unknown#}
     |                                                                          |     +- No Arguments
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_56 ] << {#unknown#}
     |                                                                                      |     +- No Arguments
     |                                                                                      +- If Code:
     |                                                                                         +- Block:
     |                                                                                            +- Code:
     |                                                                                               +- St: =
     |                                                                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                               +- If Statement:
     |                                                                                                  +- Condition:
     |                                                                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                                                                  |     +- Op: >> Proxy Data Access [ jj_3R_57 ] << {#unknown#}
     |                                                                                                  |     +- No Arguments
     |                                                                                                  +- If Code:
     |                                                                                                     +- Block:
     |                                                                                                        +- Code:
     |                                                                                                           +- St: =
     |                                                                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                           +- If Statement:
     |                                                                                                              +- Condition:
     |                                                                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                                                                              |     +- Op: >> Proxy Data Access [ jj_3R_58 ] << {#unknown#}
     |                                                                                                              |     +- No Arguments
     |                                                                                                              +- If Code:
     |                                                                                                                 +- Block:
     |                                                                                                                    +- Code:
     |                                                                                                                       +- St: =
     |                                                                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                       +- If Statement:
     |                                                                                                                          +- Condition:
     |                                                                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_59 ] << {#unknown#}
     |                                                                                                                          |     +- No Arguments
     |                                                                                                                          +- If Code:
     |                                                                                                                             +- Block:
     |                                                                                                                                +- Code:
     |                                                                                                                                   +- St: =
     |                                                                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                   +- If Statement:
     |                                                                                                                                      +- Condition:
     |                                                                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_60 ] << {#unknown#}
     |                                                                                                                                      |     +- No Arguments
     |                                                                                                                                      +- If Code:
     |                                                                                                                                         +- return
     |                                                                                                                                            +- Op: Literal {Z}
     |                                                                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_78
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_377
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_168 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_84
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_2 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_26
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_78 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_375
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_377 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_378 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_91
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STATIC ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_65
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_91 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_243
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_234
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_243 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_233
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_153 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_143
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_153 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_98
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SUPER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_230
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_233 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_234 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_235 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_236 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_237 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_238 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_239 ] << {#unknown#}
     |                                                                          |     +- No Arguments
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_240 ] << {#unknown#}
     |                                                                                      |     +- No Arguments
     |                                                                                      +- If Code:
     |                                                                                         +- return
     |                                                                                            +- Op: Literal {Z}
     |                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_97
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_96
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_69 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_372
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_371
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_376 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_279
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_9
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_370
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_369
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_82
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_69 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_95
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DOT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_67
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_95 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_9 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_96 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_97 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_98 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_99 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_368
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_367
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_375 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_357
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_367 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_368 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_369 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_370 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_371 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_372 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_25
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_77 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_225
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_230 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_25 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_24
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_76 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_8
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_67 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_39
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_276
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_261 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_275
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_249 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_313
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_149 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_273
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_275 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_276 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_312
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_67 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_356
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_208
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FOR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_356 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_357 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_311
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_327 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_48
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_88 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_278
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_1
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_48 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PACKAGE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_277
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_278 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_279 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_274
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_225 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_277 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_23
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_119
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 93
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 92
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                          |     +- Arguments
     |                          |        +- Op: Literal {I}
     |                          |           +- Integer: 80
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                      |     +- Arguments
     |                                      |        +- Op: Literal {I}
     |                                      |           +- Integer: 77
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                  |     +- Arguments
     |                                                  |        +- Op: Literal {I}
     |                                                  |           +- Integer: 56
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                              |     +- Arguments
     |                                                              |        +- Op: Literal {I}
     |                                                              |           +- Integer: 53
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                                                                          |     +- Arguments
     |                                                                          |        +- Op: Literal {I}
     |                                                                          |           +- Integer: 43
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_143 ] << {#unknown#}
     |                                                                                      |     +- No Arguments
     |                                                                                      +- If Code:
     |                                                                                         +- return
     |                                                                                            +- Op: Literal {Z}
     |                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_118
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_75
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_22 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_118 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_119 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_22
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_76 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_309
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_89 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_207
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DO ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_300
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_309 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_310 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_311 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_312 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_313 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_21
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_75 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_267
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_274 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_266
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_273 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_272
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ BANG ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_206
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ WHILE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_271
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ TILDE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_265
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_271 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_272 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_249 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_261
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_265 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_266 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_267 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_342
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ELLIPSIS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_346
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_88 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_355
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ELSE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_345
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ FINAL ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_341
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_345 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_346 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_229
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ DECR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_225 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_334
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_341 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_342 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_328 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_205
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IF ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_355 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_228
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INCR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_225 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_335
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_334 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_257
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_261 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_256
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_229 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_255
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_228 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_326
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_334 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_335 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_374
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_310
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_326 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_260
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_373
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ CASE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_259
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_254
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_259 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_260 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_249 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_365
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_373 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_374 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_249
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_254 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_255 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_256 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_257 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- return
     |                                            +- Op: Literal {Z}
     |                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_270
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ REM ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_269
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SLASH ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_268
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STAR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_262
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_268 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_269 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_270 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_249 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_366
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_149 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_247
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_249 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_262 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_354
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_365 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_366 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_317
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_310 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_264
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ MINUS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_263
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PLUS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_204
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SWITCH ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_354 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_258
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_263 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_264 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_247 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_242
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_247 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_258 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_320
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_319
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_364
  Params
  Block:
  +- Code:
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_318
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ THROWS ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_327 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_20
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_74 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_363
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_70 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_19
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_73 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_72
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LSHIFT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_18
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_72 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3_19 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3_20 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_242 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_316
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_89 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_232
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_242 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_18 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_362
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 102
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 103
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_302
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_316 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_80 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_317 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_318 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_319 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_320 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_220
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_225 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_362 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_363 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_364 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_224
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_229 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_223
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_228 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_219
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_223 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_224 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_253
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_252
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_203
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_219 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_220 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_251
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ GT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_250
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_248
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_250 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_251 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_252 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_253 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- return
     |                                            +- Op: Literal {Z}
     |                                               +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_232 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_227
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_232 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_248 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_7
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_66 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_202
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_289
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_66 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3_7 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_244
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INSTANCEOF ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_138
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_289 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 87
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_222
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_227 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_244 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_344
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_314 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_94
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_93
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_138 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_246
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ NE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_245
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ EQ ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_168
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_314 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_344 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_66
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_93 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_94 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_241
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_245 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_246 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_222 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_218
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_222 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_241 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_38
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_337
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_158
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_170 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_231
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ BIT_AND ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_218 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_157
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_328
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_337 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_197
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_218 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_231 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_156
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_168 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_149
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_156 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_157 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_158 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_226
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ XOR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_197 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_329
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_66 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_174
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_197 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_226 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_137
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_149 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_314
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_328 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_329 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_221
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ BIT_OR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_174 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_92
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_137 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_64
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACKET ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_159
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_174 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_221 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_361
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ _DEFAULT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_87 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_315
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COMMA ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_314 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_83
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_169 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_217
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SC_AND ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_159 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_152
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_159 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_217 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_301
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_314 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_315 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_351
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_301 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_5
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_64 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: Literal {I}
     |  |           +- Integer: 87
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 90
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                          |     +- Arguments
     |                          |        +- Op: Literal {I}
     |                          |           +- Integer: 86
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_350
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_303 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_62
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_89 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_349
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_299 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_4
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_62 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_353
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_348
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_170 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_298
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_303 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_44
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_352
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_361 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_297
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_302 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_201
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ASSERT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_353 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_296
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_301 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_196
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SC_OR ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_152 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_295
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_300 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_142
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_152 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_196 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_294
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_299 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_347
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_63 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RPAREN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_352 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_293
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_170 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_193
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_214 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_343
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_347 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_348 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_349 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_350 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_351 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- return
     |                                                        +- Op: Literal {Z}
     |                                                           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_338
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_343 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |              |     +- Arguments
     |              |        +- Op: Literal {I}
     |              |           +- Integer: 86
     |              +- If Code:
     |                 +- return
     |                    +- Op: Literal {Z}
     |                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_192
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_213 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_191
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_212 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_292
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_84 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_293 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_294 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_295 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_296 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_297 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_298 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- return
     |                                                                    +- Op: Literal {Z}
     |                                                                       +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_190
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_211 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_173
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ HOOK ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ COLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_71 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_189
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_210 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_188
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_209 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_6
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_65 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_115
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_142 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_173 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_187
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_208 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_330
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_338 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_186
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_207 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_291
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_6 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_292 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |                          |     +- Arguments
     |                          |        +- Op: Literal {I}
     |                          |           +- Integer: 86
     |                          +- If Code:
     |                             +- return
     |                                +- Op: Literal {Z}
     |                                   +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_185
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_206 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_184
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_205 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_183
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_204 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_321
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_330 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_114
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ORASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_182
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_203 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SEMICOLON ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_113
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ XORASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_112
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ANDASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_181
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_202 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_111
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RUNSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_110
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RSIGNEDSHIFTASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_180
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_92 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_109
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LSHIFTASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_108
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ MINUSASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_179
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_201 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_107
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ PLUSASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_106
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ REMASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_105
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ SLASHASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3_37
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_83 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_104
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ STARASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_103
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ ASSIGN ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_290
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_291 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_169
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3_37 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_179 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_180 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_181 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_182 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_183 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_184 ] << {#unknown#}
     |                                                                          |     +- No Arguments
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_185 ] << {#unknown#}
     |                                                                                      |     +- No Arguments
     |                                                                                      +- If Code:
     |                                                                                         +- Block:
     |                                                                                            +- Code:
     |                                                                                               +- St: =
     |                                                                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                               +- If Statement:
     |                                                                                                  +- Condition:
     |                                                                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                                                                  |     +- Op: >> Proxy Data Access [ jj_3R_186 ] << {#unknown#}
     |                                                                                                  |     +- No Arguments
     |                                                                                                  +- If Code:
     |                                                                                                     +- Block:
     |                                                                                                        +- Code:
     |                                                                                                           +- St: =
     |                                                                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                           +- If Statement:
     |                                                                                                              +- Condition:
     |                                                                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                                                                              |     +- Op: >> Proxy Data Access [ jj_3R_187 ] << {#unknown#}
     |                                                                                                              |     +- No Arguments
     |                                                                                                              +- If Code:
     |                                                                                                                 +- Block:
     |                                                                                                                    +- Code:
     |                                                                                                                       +- St: =
     |                                                                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                       +- If Statement:
     |                                                                                                                          +- Condition:
     |                                                                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_188 ] << {#unknown#}
     |                                                                                                                          |     +- No Arguments
     |                                                                                                                          +- If Code:
     |                                                                                                                             +- Block:
     |                                                                                                                                +- Code:
     |                                                                                                                                   +- St: =
     |                                                                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                   +- If Statement:
     |                                                                                                                                      +- Condition:
     |                                                                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_189 ] << {#unknown#}
     |                                                                                                                                      |     +- No Arguments
     |                                                                                                                                      +- If Code:
     |                                                                                                                                         +- Block:
     |                                                                                                                                            +- Code:
     |                                                                                                                                               +- St: =
     |                                                                                                                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                               +- If Statement:
     |                                                                                                                                                  +- Condition:
     |                                                                                                                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                                  |     +- Op: >> Proxy Data Access [ jj_3R_190 ] << {#unknown#}
     |                                                                                                                                                  |     +- No Arguments
     |                                                                                                                                                  +- If Code:
     |                                                                                                                                                     +- Block:
     |                                                                                                                                                        +- Code:
     |                                                                                                                                                           +- St: =
     |                                                                                                                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                                           +- If Statement:
     |                                                                                                                                                              +- Condition:
     |                                                                                                                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                                              |     +- Op: >> Proxy Data Access [ jj_3R_191 ] << {#unknown#}
     |                                                                                                                                                              |     +- No Arguments
     |                                                                                                                                                              +- If Code:
     |                                                                                                                                                                 +- Block:
     |                                                                                                                                                                    +- Code:
     |                                                                                                                                                                       +- St: =
     |                                                                                                                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                                                       +- If Statement:
     |                                                                                                                                                                          +- Condition:
     |                                                                                                                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_192 ] << {#unknown#}
     |                                                                                                                                                                          |     +- No Arguments
     |                                                                                                                                                                          +- If Code:
     |                                                                                                                                                                             +- Block:
     |                                                                                                                                                                                +- Code:
     |                                                                                                                                                                                   +- St: =
     |                                                                                                                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                                                                   +- If Statement:
     |                                                                                                                                                                                      +- Condition:
     |                                                                                                                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_193 ] << {#unknown#}
     |                                                                                                                                                                                      |     +- No Arguments
     |                                                                                                                                                                                      +- If Code:
     |                                                                                                                                                                                         +- return
     |                                                                                                                                                                                            +- Op: Literal {Z}
     |                                                                                                                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_70
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- St: =
     |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_103 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |           +- If Statement:
     |              +- Condition:
     |              |  +- Op: Proxy Call {#unknown#}
     |              |     +- Op: >> Proxy Data Access [ jj_3R_104 ] << {#unknown#}
     |              |     +- No Arguments
     |              +- If Code:
     |                 +- Block:
     |                    +- Code:
     |                       +- St: =
     |                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                       +- If Statement:
     |                          +- Condition:
     |                          |  +- Op: Proxy Call {#unknown#}
     |                          |     +- Op: >> Proxy Data Access [ jj_3R_105 ] << {#unknown#}
     |                          |     +- No Arguments
     |                          +- If Code:
     |                             +- Block:
     |                                +- Code:
     |                                   +- St: =
     |                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                   +- If Statement:
     |                                      +- Condition:
     |                                      |  +- Op: Proxy Call {#unknown#}
     |                                      |     +- Op: >> Proxy Data Access [ jj_3R_106 ] << {#unknown#}
     |                                      |     +- No Arguments
     |                                      +- If Code:
     |                                         +- Block:
     |                                            +- Code:
     |                                               +- St: =
     |                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                               +- If Statement:
     |                                                  +- Condition:
     |                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                  |     +- Op: >> Proxy Data Access [ jj_3R_107 ] << {#unknown#}
     |                                                  |     +- No Arguments
     |                                                  +- If Code:
     |                                                     +- Block:
     |                                                        +- Code:
     |                                                           +- St: =
     |                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                           +- If Statement:
     |                                                              +- Condition:
     |                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                              |     +- Op: >> Proxy Data Access [ jj_3R_108 ] << {#unknown#}
     |                                                              |     +- No Arguments
     |                                                              +- If Code:
     |                                                                 +- Block:
     |                                                                    +- Code:
     |                                                                       +- St: =
     |                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                       +- If Statement:
     |                                                                          +- Condition:
     |                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_109 ] << {#unknown#}
     |                                                                          |     +- No Arguments
     |                                                                          +- If Code:
     |                                                                             +- Block:
     |                                                                                +- Code:
     |                                                                                   +- St: =
     |                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                   +- If Statement:
     |                                                                                      +- Condition:
     |                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_110 ] << {#unknown#}
     |                                                                                      |     +- No Arguments
     |                                                                                      +- If Code:
     |                                                                                         +- Block:
     |                                                                                            +- Code:
     |                                                                                               +- St: =
     |                                                                                               |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                               |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                               +- If Statement:
     |                                                                                                  +- Condition:
     |                                                                                                  |  +- Op: Proxy Call {#unknown#}
     |                                                                                                  |     +- Op: >> Proxy Data Access [ jj_3R_111 ] << {#unknown#}
     |                                                                                                  |     +- No Arguments
     |                                                                                                  +- If Code:
     |                                                                                                     +- Block:
     |                                                                                                        +- Code:
     |                                                                                                           +- St: =
     |                                                                                                           |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                           |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                           +- If Statement:
     |                                                                                                              +- Condition:
     |                                                                                                              |  +- Op: Proxy Call {#unknown#}
     |                                                                                                              |     +- Op: >> Proxy Data Access [ jj_3R_112 ] << {#unknown#}
     |                                                                                                              |     +- No Arguments
     |                                                                                                              +- If Code:
     |                                                                                                                 +- Block:
     |                                                                                                                    +- Code:
     |                                                                                                                       +- St: =
     |                                                                                                                       |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                       |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                       +- If Statement:
     |                                                                                                                          +- Condition:
     |                                                                                                                          |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                          |     +- Op: >> Proxy Data Access [ jj_3R_113 ] << {#unknown#}
     |                                                                                                                          |     +- No Arguments
     |                                                                                                                          +- If Code:
     |                                                                                                                             +- Block:
     |                                                                                                                                +- Code:
     |                                                                                                                                   +- St: =
     |                                                                                                                                   |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                                                                                                                                   |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                                                                                                                                   +- If Statement:
     |                                                                                                                                      +- Condition:
     |                                                                                                                                      |  +- Op: Proxy Call {#unknown#}
     |                                                                                                                                      |     +- Op: >> Proxy Data Access [ jj_3R_114 ] << {#unknown#}
     |                                                                                                                                      |     +- No Arguments
     |                                                                                                                                      +- If Code:
     |                                                                                                                                         +- return
     |                                                                                                                                            +- Op: Literal {Z}
     |                                                                                                                                               +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_303
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ AT ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ INTERFACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ IDENTIFIER ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_3R_321 ] << {#unknown#}
     |  |     +- No Arguments
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  private Z jj_3R_288
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ xsp ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ LBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- Statements:
     +- while
     |  +- Op: Literal {Z}
     |  |  +- Boolean: true
     |  +- Block:
     |     +- Code:
     |        +- St: =
     |        |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: Proxy Call {#unknown#}
     |           |     +- Op: >> Proxy Data Access [ jj_3R_290 ] << {#unknown#}
     |           |     +- No Arguments
     |           +- If Code:
     |              +- Block:
     |                 +- Code:
     |                    +- St: =
     |                    |  +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |                    |  +- Op: Local variable access: xsp {Lcat/quadriga/parsers/Token;}
     |                    +- Proxy break
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: Proxy Call {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_scan_token ] << {#unknown#}
     |  |     +- Arguments
     |  |        +- Op: >> Proxy Data Access [ RBRACE ] << {#unknown#}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  public Lcat/quadriga/parsers/QuadrigaSimpleTokenManager; ;
  Lcat/quadriga/parsers/JavaCharStream; ;
  public Lcat/quadriga/parsers/Token; ;
  public Lcat/quadriga/parsers/Token; ;
  private I ;
  private Lcat/quadriga/parsers/Token; ;
  private I ;
  private Z ;
  private Z ;
  public QuadrigaSimple
  Params
  stream: #unknown java.io.InputStream #
  {
    this;
  }
  public QuadrigaSimple
  Params
  stream: #unknown java.io.InputStream #
  encoding: Ljava/lang/String;
  {
    try
    +- Block:
    |  +- Code:
    |     +- St: =
    |        +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}
    |        +- Op: Constructor {Lcat/quadriga/parsers/JavaCharStream;}
    |           +- Lcat/quadriga/parsers/JavaCharStream;
    |           +- Arguments
    |              +- Op: Local variable access: stream {#unknown java.io.InputStream #}
    |              +- Op: Local variable access: encoding {Ljava/lang/String;}
    |              +- Op: Literal {I}
    |              |  +- Integer: 1
    |              +- Op: Literal {I}
    |                 +- Integer: 1
    +- catch {Local var "e" {#unknown java.io.UnsupportedEncodingException #}}
       +- Block:
          +- Code:
             +- throw
                +- Op: Constructor {Ljava/lang/RuntimeException;}
                   +- Ljava/lang/RuntimeException;
                   +- Arguments
                      +- Op: Local variable access: e {#unknown java.io.UnsupportedEncodingException #}St: =
    +- Op: >> Proxy Data Access [ token_source ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;}
       +- Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;
       +- Arguments
          +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}St: =
    +- Op: >> Proxy Data Access [ token ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/Token;}
       +- Lcat/quadriga/parsers/Token;
       +- No ArgumentsSt: =
    +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
    +- Op: - {I}
       +- Op: Literal {I}
          +- Integer: 1
  }
  public ReInit
  Params
  stream: #unknown java.io.InputStream #
  Block:
  +- Code:
     +- St: Proxy Call
        +- Op: >> Proxy Data Access [ ReInit ] << {#unknown#}
        +- Arguments
           +- Op: Local variable access: stream {#unknown java.io.InputStream #}
           +- Op: Literal {Null type}
              +- Null
  public ReInit
  Params
  stream: #unknown java.io.InputStream #
  encoding: Ljava/lang/String;
  Block:
  +- Code:
     +- try
     |  +- Block:
     |  |  +- Code:
     |  |     +- St: Proxy Call
     |  |        +- Op: >> Proxy Data Access [ jj_input_stream.ReInit ] << {#unknown#}
     |  |        +- Arguments
     |  |           +- Op: Local variable access: stream {#unknown java.io.InputStream #}
     |  |           +- Op: Local variable access: encoding {Ljava/lang/String;}
     |  |           +- Op: Literal {I}
     |  |           |  +- Integer: 1
     |  |           +- Op: Literal {I}
     |  |              +- Integer: 1
     |  +- catch {Local var "e" {#unknown java.io.UnsupportedEncodingException #}}
     |     +- Block:
     |        +- Code:
     |           +- throw
     |              +- Op: Constructor {Ljava/lang/RuntimeException;}
     |                 +- Ljava/lang/RuntimeException;
     |                 +- Arguments
     |                    +- Op: Local variable access: e {#unknown java.io.UnsupportedEncodingException #}
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ token_source.ReInit ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/Token;}
     |     +- Lcat/quadriga/parsers/Token;
     |     +- No Arguments
     +- St: =
        +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- Op: - {I}
           +- Op: Literal {I}
              +- Integer: 1
  public QuadrigaSimple
  Params
  stream: #unknown java.io.Reader #
  {
    St: =
    +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/JavaCharStream;}
       +- Lcat/quadriga/parsers/JavaCharStream;
       +- Arguments
          +- Op: Local variable access: stream {#unknown java.io.Reader #}
          +- Op: Literal {I}
          |  +- Integer: 1
          +- Op: Literal {I}
             +- Integer: 1St: =
    +- Op: >> Proxy Data Access [ token_source ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;}
       +- Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;
       +- Arguments
          +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}St: =
    +- Op: >> Proxy Data Access [ token ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/Token;}
       +- Lcat/quadriga/parsers/Token;
       +- No ArgumentsSt: =
    +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
    +- Op: - {I}
       +- Op: Literal {I}
          +- Integer: 1
  }
  public ReInit
  Params
  stream: #unknown java.io.Reader #
  Block:
  +- Code:
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ jj_input_stream.ReInit ] << {#unknown#}
     |  +- Arguments
     |     +- Op: Local variable access: stream {#unknown java.io.Reader #}
     |     +- Op: Literal {I}
     |     |  +- Integer: 1
     |     +- Op: Literal {I}
     |        +- Integer: 1
     +- St: Proxy Call
     |  +- Op: >> Proxy Data Access [ token_source.ReInit ] << {#unknown#}
     |  +- Arguments
     |     +- Op: >> Proxy Data Access [ jj_input_stream ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/Token;}
     |     +- Lcat/quadriga/parsers/Token;
     |     +- No Arguments
     +- St: =
        +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- Op: - {I}
           +- Op: Literal {I}
              +- Integer: 1
  public QuadrigaSimple
  Params
  tm: Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;
  {
    St: =
    +- Op: >> Proxy Data Access [ token_source ] << {#unknown#}
    +- Op: Local variable access: tm {Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;}St: =
    +- Op: >> Proxy Data Access [ token ] << {#unknown#}
    +- Op: Constructor {Lcat/quadriga/parsers/Token;}
       +- Lcat/quadriga/parsers/Token;
       +- No ArgumentsSt: =
    +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
    +- Op: - {I}
       +- Op: Literal {I}
          +- Integer: 1
  }
  public ReInit
  Params
  tm: Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;
  Block:
  +- Code:
     +- St: =
     |  +- Op: >> Proxy Data Access [ token_source ] << {#unknown#}
     |  +- Op: Local variable access: tm {Lcat/quadriga/parsers/QuadrigaSimpleTokenManager;}
     +- St: =
     |  +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  +- Op: Constructor {Lcat/quadriga/parsers/Token;}
     |     +- Lcat/quadriga/parsers/Token;
     |     +- No Arguments
     +- St: =
        +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        +- Op: - {I}
           +- Op: Literal {I}
              +- Integer: 1
  private Lcat/quadriga/parsers/Token; jj_consume_token
  Params
  kind: I
  throws Block:
  +- Local Variables:
  |  +- Symbol Var [ oldToken ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: >> Proxy Data Access [ next ] << {#unknown#}
     |  |     |  +- Op: = {Lcat/quadriga/parsers/Token;}
     |  |     |     +- Op: Local variable access: oldToken {Lcat/quadriga/parsers/Token;}
     |  |     |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |  |  +- St: =
     |  |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     |  +- Else Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |        +- Op: = {#unknown#}
     |           +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     |           +- Op: Proxy Call {#unknown#}
     |              +- Op: >> Proxy Data Access [ token_source.getNextToken ] << {#unknown#}
     |              +- No Arguments
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- Op: - {I}
     |     +- Op: Literal {I}
     |        +- Integer: 1
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: == {Z}
     |  |     +- Op: >> Proxy Data Access [ token.kind ] << {#unknown#}
     |  |     +- Op: Local variable access: kind {I}
     |  +- If Code:
     |     +- Block:
     |        +- Code:
     |           +- return
     |              +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- St: =
     |  +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  +- Op: Local variable access: oldToken {Lcat/quadriga/parsers/Token;}
     +- throw
        +- Op: Proxy Call {#unknown#}
           +- Op: >> Proxy Data Access [ generateParseException ] << {#unknown#}
           +- No Arguments
  static private final class LookaheadSuccess extends {
    
  }
  
  final private #unknown LookaheadSuccess # ;
  private Z jj_scan_token
  Params
  kind: I
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: == {Z}
     |  |     +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- If Code:
     |  |  +- Block:
     |  |     +- Code:
     |  |        +- St: ++X
     |  |        |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  |        +- If Statement:
     |  |           +- Condition:
     |  |           |  +- Op: == {Z}
     |  |           |     +- Op: >> Proxy Data Access [ jj_scanpos.next ] << {#unknown#}
     |  |           |     +- Op: Literal {Null type}
     |  |           |        +- Null
     |  |           +- If Code:
     |  |           |  +- Block:
     |  |           |     +- Code:
     |  |           |        +- St: =
     |  |           |           +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  |           |           +- Op: = {#unknown#}
     |  |           |              +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |  |           |              +- Op: = {#unknown#}
     |  |           |                 +- Op: >> Proxy Data Access [ jj_scanpos.next ] << {#unknown#}
     |  |           |                 +- Op: Proxy Call {#unknown#}
     |  |           |                    +- Op: >> Proxy Data Access [ token_source.getNextToken ] << {#unknown#}
     |  |           |                    +- No Arguments
     |  |           +- Else Code:
     |  |              +- Block:
     |  |                 +- Code:
     |  |                    +- St: =
     |  |                       +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  |                       +- Op: = {#unknown#}
     |  |                          +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |  |                          +- Op: >> Proxy Data Access [ jj_scanpos.next ] << {#unknown#}
     |  +- Else Code:
     |     +- Block:
     |        +- Code:
     |           +- St: =
     |              +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |              +- Op: >> Proxy Data Access [ jj_scanpos.next ] << {#unknown#}
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: >> Proxy Data Access [ jj_scanpos.kind ] << {#unknown#}
     |  |     +- Op: Local variable access: kind {I}
     |  +- If Code:
     |     +- return
     |        +- Op: Literal {Z}
     |           +- Boolean: true
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: && {Z}
     |  |     +- Op: == {Z}
     |  |     |  +- Op: >> Proxy Data Access [ jj_la ] << {#unknown#}
     |  |     |  +- Op: Literal {I}
     |  |     |     +- Integer: 0
     |  |     +- Op: == {Z}
     |  |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |  |        +- Op: >> Proxy Data Access [ jj_lastpos ] << {#unknown#}
     |  +- If Code:
     |     +- throw
     |        +- Op: >> Proxy Data Access [ jj_ls ] << {#unknown#}
     +- return
        +- Op: Literal {Z}
           +- Boolean: false
  final public Lcat/quadriga/parsers/Token; getNextToken
  Params
  Block:
  +- Code:
     +- If Statement:
     |  +- Condition:
     |  |  +- Op: != {Z}
     |  |     +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     |  |     +- Op: Literal {Null type}
     |  |        +- Null
     |  +- If Code:
     |  |  +- St: =
     |  |     +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |  |     +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     |  +- Else Code:
     |     +- St: =
     |        +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     |        +- Op: = {#unknown#}
     |           +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     |           +- Op: Proxy Call {#unknown#}
     |              +- Op: >> Proxy Data Access [ token_source.getNextToken ] << {#unknown#}
     |              +- No Arguments
     +- St: =
     |  +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
     |  +- Op: - {I}
     |     +- Op: Literal {I}
     |        +- Integer: 1
     +- return
        +- Op: >> Proxy Data Access [ token ] << {#unknown#}
  final public Lcat/quadriga/parsers/Token; getToken
  Params
  index: I
  Block:
  +- Local Variables:
  |  +- Symbol Var [ t ] Type [ Lcat/quadriga/parsers/Token; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |     +- Op: ? {#unknown#}
     |        +- Op: >> Proxy Data Access [ jj_lookingAhead ] << {#unknown#}
     |        +- Op: >> Proxy Data Access [ jj_scanpos ] << {#unknown#}
     |        +- Op: >> Proxy Data Access [ token ] << {#unknown#}
     +- for
     |  +- Local Variables:
     |  |  +- Symbol Var [ i ] Type [ I ]
     |  +- Statements:
     |  |  +- St: =
     |  |     +- Op: Local variable access: i {I}
     |  |     +- Op: Literal {I}
     |  |        +- Integer: 0
     |  +- Op: < {Z}
     |  |  +- Op: Local variable access: i {I}
     |  |  +- Op: Local variable access: index {I}
     |  +- Statements:
     |  |  +- St: ++X
     |  |     +- Op: Local variable access: i {I}
     |  +- Block:
     |     +- Code:
     |        +- If Statement:
     |           +- Condition:
     |           |  +- Op: != {Z}
     |           |     +- Op: Field: {Lcat/quadriga/parsers/Token;}
     |           |     |  +- cat.quadriga.parsers.Token -> next
     |           |     |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           |     +- Op: Literal {Null type}
     |           |        +- Null
     |           +- If Code:
     |           |  +- St: =
     |           |     +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           |     +- Op: Field: {Lcat/quadriga/parsers/Token;}
     |           |        +- cat.quadriga.parsers.Token -> next
     |           |        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |           +- Else Code:
     |              +- St: =
     |                 +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                 +- Op: = {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Field: {Lcat/quadriga/parsers/Token;}
     |                    |  +- cat.quadriga.parsers.Token -> next
     |                    |  +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
     |                    +- Op: Proxy Call {#unknown#}
     |                       +- Op: >> Proxy Data Access [ token_source.getNextToken ] << {#unknown#}
     |                       +- No Arguments
     +- return
        +- Op: Local variable access: t {Lcat/quadriga/parsers/Token;}
  private I jj_ntk
  Params
  Block:
  +- Code:
     +- If Statement:
        +- Condition:
        |  +- Op: == {Z}
        |     +- Op: = {#unknown#}
        |     |  +- Op: >> Proxy Data Access [ jj_nt ] << {#unknown#}
        |     |  +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
        |     +- Op: Literal {Null type}
        |        +- Null
        +- If Code:
        |  +- return
        |     +- Op: = {#unknown#}
        |        +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
        |        +- Op: >> Proxy Data Access [ kind ] << {#unknown#}
        |           +- Op: = {#unknown#}
        |              +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
        |              +- Op: Proxy Call {#unknown#}
        |                 +- Op: >> Proxy Data Access [ token_source.getNextToken ] << {#unknown#}
        |                 +- No Arguments
        +- Else Code:
           +- return
              +- Op: = {#unknown#}
                 +- Op: >> Proxy Data Access [ jj_ntk ] << {#unknown#}
                 +- Op: >> Proxy Data Access [ jj_nt.kind ] << {#unknown#}
  public Lcat/quadriga/parsers/ParseException; generateParseException
  Params
  Block:
  +- Local Variables:
  |  +- Symbol Var [ errortok ] Type [ Lcat/quadriga/parsers/Token; ]
  |  +- Symbol Var [ line ] Type [ I ]
  |  +- Symbol Var [ column ] Type [ I ]
  |  +- Symbol Var [ mess ] Type [ Ljava/lang/String; ]
  +- Code:
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: errortok {Lcat/quadriga/parsers/Token;}
     |     +- Op: >> Proxy Data Access [ token.next ] << {#unknown#}
     +- Statements:
     |  +- St: =
     |  |  +- Op: Local variable access: line {I}
     |  |  +- Op: Field: {I}
     |  |     +- cat.quadriga.parsers.Token -> beginLine
     |  |     +- Op: Local variable access: errortok {Lcat/quadriga/parsers/Token;}
     |  +- St: =
     |     +- Op: Local variable access: column {I}
     |     +- Op: Field: {I}
     |        +- cat.quadriga.parsers.Token -> beginColumn
     |        +- Op: Local variable access: errortok {Lcat/quadriga/parsers/Token;}
     +- Statements:
     |  +- St: =
     |     +- Op: Local variable access: mess {Ljava/lang/String;}
     |     +- Op: ? {#unknown#}
     |        +- Op: == {Z}
     |        |  +- Op: Field: {I}
     |        |  |  +- cat.quadriga.parsers.Token -> kind
     |        |  |  +- Op: Local variable access: errortok {Lcat/quadriga/parsers/Token;}
     |        |  +- Op: Literal {I}
     |        |     +- Integer: 0
     |        +- Op: Array Access {#unknown#}
     |        |  +- Op: >> Proxy Data Access [ tokenImage ] << {#unknown#}
     |        |  +- Op: Literal {I}
     |        |     +- Integer: 0
     |        +- Op: Field: {Ljava/lang/String;}
     |           +- cat.quadriga.parsers.Token -> image
     |           +- Op: Local variable access: errortok {Lcat/quadriga/parsers/Token;}
     +- return
        +- Op: Constructor {Lcat/quadriga/parsers/ParseException;}
           +- Lcat/quadriga/parsers/ParseException;
           +- Arguments
              +- Op: + {#unknown#}
                 +- Op: + {#unknown#}
                 |  +- Op: + {#unknown#}
                 |  |  +- Op: + {#unknown#}
                 |  |  |  +- Op: + {#unknown#}
                 |  |  |  |  +- Op: Literal {Ljava/lang/String;}
                 |  |  |  |  |  +- String: "Parse error at line "
                 |  |  |  |  +- Op: Local variable access: line {I}
                 |  |  |  +- Op: Literal {Ljava/lang/String;}
                 |  |  |     +- String: ", column "
                 |  |  +- Op: Local variable access: column {I}
                 |  +- Op: Literal {Ljava/lang/String;}
                 |     +- String: ".  Encountered: "
                 +- Op: Local variable access: mess {Ljava/lang/String;}
  final public enable_tracing
  Params
  Block:
  +- Code:
  final public disable_tracing
  Params
  Block:
  +- Code:
  
}

class VarAndInit {
  Lcat/quadriga/parsers/Token; ;
  Lcat/quadriga/parsers/code/types/BaseType; ;
  Lcat/quadriga/parsers/code/statements/StatementNode; ;
  I ;
  
}

class ParameterClass {
  Lcat/quadriga/parsers/code/CodeZone; ;
  Lcat/quadriga/parsers/code/types/BaseType; ;
  Ljava/lang/String; ;
  Z ;
  I ;
  
}
