// en algun lloc de java...

public class JME_Quadriga_API {
  public static com.jme3.scene.Node getRootNode() ...
}

//----------------------------------------------

@quadriga jmeSystems 

@const String ROOT_NODE = "RootNode";

@thread Monkey {
  @systems {
    JME3Nodes
    JME3Geometries
    JME3Spatials
  }
  
  @init{
    Entity root = new RootNode();
    root.setName(ROOT_NODE);
  }
}

@component Spatial {
  *Transform
  Entity<Node> parent
}

@component Geometry {
  *Spatial
  String model
}
  
@component Node {
  *Spatial
}

@component Material {
  String name
  Map<String,Color> colors
  Map<String,float> floats
  Map<String,int> ints
  Map<String,boolean> booleans
  Map<String,Matrix4f> matrixes
  Map<String,Vector2f> vectors2
  Map<String,Vector3f> vectors3
}

@prototype RootNode {
  @init {
    com.jme3.scene.Node root = JME_Quadriga_API.getRootNode();
  }
  Transform (
              translation = root.getLocalTranslation();
              rotation    = root.getLocalRotation();
              scale       = root.getLocalScale();
            )
  Spatial()
  Node()
}

@system JME3Spatials {
  @components {
    Spatial
    Transform
  }
  
  @additionalInfo {
    com.jme3.scene.Spatial jME3Spatial
  }
  
  @externInfo {
    com.jme3.scene.Node jME3Node: JME3Nodes.jME3Node
  }
  
  public void initSpatial(Spatial spatial, Entity entity) {
    entity[jME3Spatial] = spatial;
    entity[jME3Spatial].setLocalTranslation(entity[Transform].translation);
    entity[jME3Spatial].setLocalRotation(entity[Transform].rotation);
    entity[jME3Spatial].setLocalScale(entity[Transform].scale);
    
    if(entity[jME3Spatial].parent != null) {
      entity[Node].parent[jME3Node].attachChild(spatial);
    }
  }
  
  @change(Entity entity: ENTITY) {
    if( @changed(entity[Transform].translation) )
      entity[jME3Spatial].setLocalTranslation(entity[Transform].translation);
    if( @changed(entity[Transform].rotation) )
      entity[jME3Spatial].setLocalRotation(entity[Transform].rotation);
    if( @changed(entity[Transform].scale) )
      entity[jME3Spatial].setLocalScale(entity[Transform].scale);
      
    if( @changed(entity[Spatial].parent) ) {
      //entity[Spatial].detatchFromParent();
      Entity<Node> old = @old(entity[Spatial].parent);
      if(old != null) {
        old[jME3Node].detatchChild();
      }
      
      if(entity[jME3Spatial].parent != null) {
        entity[jME3Spatial].parent[jME3Node].attachChild(spatial);
      }
    }
  }
  
  @eraseEntity(Entity entity: ENTITY) {
    entity[jME3Spatial].removeFromParent();
  }
}

@system JME3Nodes {
  @components {
    Node
  }
  
  @additionalInfo {
    com.jme3.scene.Node jME3Node
  }
  
  @affectedSystems {
    JME3Spatials spatialsSystem
  }
  
  @newEntity(Entity entity: ENTITY) {
  
    com.jme3.scene.Node node = new com.jme3.scene.Node("Entity node: " + entity);
    
    entity[jME3Node] = node;
    spatialsSystem.initSpatial(node, entity);
  }
}

@system JME3Geometries implements JME3Spatials {
  @components {
    Geometry
  }
  
  @additionalInfo {
    com.jme3.scene.Geometry jME3Geometry
  }
  
  @externInfo {
    com.jme3.scene.Node jME3Node: JME3Nodes.jME3Node
  }
  
  @newEntity(Entity entity: ENTITY) {
    com.jme3.scene.Mesh mesh = JME_Quadriga_API.getAssetManager().loadModel(entity[Geometry].model);
    com.jme3.scene.Geometry geometry = new com.jme3.scene.Geometry("Entity geo: " + entity, mesh);
    
    entity[jME3Geometry] = geometry;
    spatialsSystem.initSpatial(geometry, entity);
  }
}
