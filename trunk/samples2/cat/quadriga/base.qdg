@quadriga cat.quadriga.base

@java cat.quadriga.java.base.BaseMaterial

@component Transform {
  Vector3f position  = new Vector3f();
  float scale        = 1.0f;
  Quat4f rotation    = new Quat4f(0.0f,0.0f,0.0f,1.0f);
}


@component Materials {
  BaseMaterial[] materials = {};
}

@component StaticMeshRenderer {
  * Transform
  String mesh;
  int[] materials;
}

@component CilynderRenderer {
  * Transform
  float radi = 1.0f;
  Vector3f pos1 = new Vector3f(0.0f,0.0f,0.0f);
  Vector3f pos2 = new Vector3f(0.0f,0.0f,1.0f);
}

@component TexturedQuad {
  String   texture  = "";
  Vector3f position = new Vector3f();
}

@component FontQuad {
  String text       = "";
  Vector3f position = new Vector3f();
  Vector4f color    = new Vector4f();
}

@component BillboardRenderer {
  * Transform
}

@prototype TexturedQuadPrototype {
  Transform()
  TexturedQuad()
}

@prototype FontQuadPrototype {
  Transform()
  FontQuad()
}


// ------------------------------------------------------------------------------------
@component CameraComponent

@component SceneComponent {
  Entity<CameraComponent> camera;
}

@component CameraComponent {
  Vector3f position = new Vector3f(0.0f,0.0f,0.0f);
  Vector3f lookAt   = new Vector3f(0.0f,0.0f,1.0f);
  Vector3f up       = new Vector3f(0.0f,1.0f,0.0f);
}

@prototype SimpleCamera {
  CameraComponent()
}

@system SimpleStaticMeshRenderer {
  @components {
    Transform
    StaticMeshRenderer
  }
  
  @update(Entity<Transform, StaticMeshRenderer> entity : ENTITY) {
    //entity[Transform].position = new Vector3f(1.0f,1.0f,entity[Transform].scale*15);
    System.out.println(entity.toString());
  }
}

@thread SimpleRenderThread {
  @system SimpleStaticMeshRenderer
}